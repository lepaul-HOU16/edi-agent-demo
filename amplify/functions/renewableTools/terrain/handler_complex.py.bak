"""
Terrain Analysis Tool Lambda
Wraps the renewable demo's terrain analysis functionality
"""
import json
import sys
import os
import logging

# Import ACTUAL renewable demo functions (bundled with Lambda)
from agents.tools.terrain_tools import get_unbuildable_areas

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def handler(event, context):
    """
    Lambda handler for terrain analysis
    
    Expected event structure:
    {
        "query": "user query string",
        "parameters": {
            "latitude": float,
            "longitude": float,
            "project_id": str,
            "radius_km": float (optional, default 5.0),
            "setback_m": int (optional, default 100)
        }
    }
    """
    try:
        logger.info(f"Terrain analysis Lambda invoked with event: {json.dumps(event)}")
        
        # Extract parameters
        params = event.get('parameters', {})
        latitude = params.get('latitude')
        longitude = params.get('longitude')
        project_id = params.get('project_id', 'default-project')
        radius_km = params.get('radius_km', 5.0)
        setback_m = params.get('setback_m', 100)
        
        # Validate required parameters
        if latitude is None or longitude is None:
            return {
                'statusCode': 400,
                'body': json.dumps({
                    'success': False,
                    'error': 'Missing required parameters: latitude and longitude'
                })
            }
        
        logger.info(f"Analyzing terrain at ({latitude}, {longitude}) with radius={radius_km}km, setback={setback_m}m")
        
        # Call ACTUAL renewable demo function
        result = get_unbuildable_areas(
            latitude=float(latitude),
            longitude=float(longitude),
            project_id=project_id,
            radius_km=float(radius_km),
            setback_m=int(setback_m)
        )
        
        logger.info(f"Terrain analysis completed: success={result.get('success')}")
        
        # Transform result to Lambda response format
        if result.get('success'):
            # Extract key metrics from GeoJSON data
            geojson_data = result.get('GeoJSON_data', {})
            features = geojson_data.get('features', [])
            
            # Count features by type
            feature_counts = {}
            total_area = 0
            for feature in features:
                feature_type = feature.get('properties', {}).get('feature_type', 'other')
                feature_counts[feature_type] = feature_counts.get(feature_type, 0) + 1
                
                # Calculate approximate area (very rough estimate)
                geom = feature.get('geometry', {})
                if geom.get('type') == 'Polygon':
                    coords = geom.get('coordinates', [[]])[0]
                    if len(coords) > 2:
                        # Simple area calculation (not accurate but gives an idea)
                        total_area += len(coords) * 0.001  # Rough estimate
            
            return {
                'statusCode': 200,
                'body': json.dumps({
                    'success': True,
                    'type': 'terrain_analysis',
                    'data': {
                        'coordinates': {'lat': latitude, 'lng': longitude},
                        'projectId': project_id,
                        'exclusionZones': features,
                        'metrics': {
                            'totalFeatures': len(features),
                            'featuresByType': feature_counts,
                            'approximateExclusionArea': total_area,
                            'radiusKm': radius_km,
                            'setbackMeters': setback_m
                        },
                        'geojson': geojson_data,
                        'savedFiles': result.get('saved_files', {}),
                        'message': result.get('message', 'Analysis completed successfully')
                    }
                })
            }
        else:
            return {
                'statusCode': 500,
                'body': json.dumps({
                    'success': False,
                    'error': result.get('error', 'Unknown error occurred')
                })
            }
            
    except Exception as e:
        logger.error(f"Error in terrain analysis Lambda: {str(e)}", exc_info=True)
        return {
            'statusCode': 500,
            'body': json.dumps({
                'success': False,
                'error': f'Lambda execution error: {str(e)}'
            })
        }
