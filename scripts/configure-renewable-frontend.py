#!/usr/bin/env python3
"""
Configure frontend with renewable energy backend endpoint
"""

import sys
import json
from pathlib import Path

def configure_frontend(endpoint_arn):
    """Create .env.local file with configuration"""
    print("=" * 70)
    print("  Configuring Frontend")
    print("=" * 70)
    print()
    
    env_file = Path(__file__).parent.parent / ".env.local"
    
    config = f"""# Renewable Energy Integration Configuration
# Generated by configure-renewable-frontend.py

# Enable renewable energy features
NEXT_PUBLIC_RENEWABLE_ENABLED=true

# AgentCore endpoint (from deployment)
NEXT_PUBLIC_RENEWABLE_AGENTCORE_ENDPOINT={endpoint_arn}

# S3 bucket for artifacts
NEXT_PUBLIC_RENEWABLE_S3_BUCKET=amplify-d1eeg2gu6ddc3z-ma-workshopstoragebucketd9b-lzf4vwokty7m

# AWS region
NEXT_PUBLIC_RENEWABLE_REGION=us-east-1
"""
    
    with open(env_file, 'w') as f:
        f.write(config)
    
    print(f"‚úÖ Created {env_file}")
    print()
    print("Configuration:")
    print(config)
    print()
    print("=" * 70)
    print("  Testing Configuration")
    print("=" * 70)
    print()
    
    # Test the endpoint
    import boto3
    
    try:
        client = boto3.client('bedrock-agentcore', region_name='us-east-1')
        
        test_payload = {
            "prompt": "Analyze terrain for wind farm at 35.067482, -101.395466",
            "project_id": "test_config"
        }
        
        print(f"üß™ Testing endpoint: {endpoint_arn}")
        print(f"   Prompt: {test_payload['prompt']}")
        print()
        
        response = client.invoke_agent_runtime(
            agentRuntimeArn=endpoint_arn,
            payload=json.dumps(test_payload).encode('utf-8')
        )
        
        print("‚úÖ Backend is responding!")
        print(f"   Status: {response['ResponseMetadata']['HTTPStatusCode']}")
        
        if 'payload' in response:
            response_body = json.loads(response['payload'].read())
            print(f"   Response: {len(str(response_body))} characters")
            
            # Check for artifacts
            if 'artifacts' in response_body:
                print(f"   Artifacts: {len(response_body['artifacts'])} found")
        
        print()
        print("=" * 70)
        print("  Configuration Complete!")
        print("=" * 70)
        print()
        print("üöÄ Next steps:")
        print("   1. Start the frontend:")
        print("      npm run dev")
        print()
        print("   2. Navigate to chat")
        print()
        print("   3. Try a renewable energy query:")
        print("      'Analyze terrain for wind farm at 35.067482, -101.395466'")
        print()
        return 0
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Backend test failed: {e}")
        print()
        print("The configuration was saved, but the backend may not be ready yet.")
        print("Check CloudWatch logs for details.")
        return 1

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 configure-renewable-frontend.py <agentcore-endpoint-arn>")
        print()
        print("Example:")
        print("  python3 configure-renewable-frontend.py arn:aws:bedrock-agentcore:us-east-1:123456789012:runtime/my-agent")
        sys.exit(1)
    
    endpoint_arn = sys.argv[1]
    
    if not endpoint_arn.startswith('arn:aws:bedrock-agentcore:'):
        print(f"‚ùå Invalid ARN format: {endpoint_arn}")
        print("   Expected format: arn:aws:bedrock-agentcore:REGION:ACCOUNT:runtime/AGENT_ID")
        sys.exit(1)
    
    sys.exit(configure_frontend(endpoint_arn))
