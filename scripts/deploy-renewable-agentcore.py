#!/usr/bin/env python3
"""
Automated deployment script for renewable energy backend to AWS Bedrock AgentCore.
This script automates the steps from the Jupyter notebooks.
"""

import os
import sys
import boto3
import json
import time
from pathlib import Path

# Configuration
REGION = 'us-east-1'
WORKSHOP_DIR = Path(__file__).parent.parent / "agentic-ai-for-renewable-site-design-mainline" / "workshop-assets"
AGENT_NAME = "renewable-multi-agent"
MODEL_ID = "us.anthropic.claude-3-7-sonnet-20250219-v1:0"

def print_section(title):
    """Print a formatted section header"""
    print("\n" + "=" * 70)
    print(f"  {title}")
    print("=" * 70 + "\n")

def check_prerequisites():
    """Check if all prerequisites are met"""
    print_section("Checking Prerequisites")
    
    # Check AWS credentials
    try:
        sts = boto3.client('sts', region_name=REGION)
        identity = sts.get_caller_identity()
        print(f"‚úÖ AWS Account: {identity['Account']}")
        print(f"‚úÖ AWS User: {identity['Arn']}")
    except Exception as e:
        print(f"‚ùå AWS credentials not configured: {e}")
        return False
    
    # Check Bedrock access
    try:
        bedrock = boto3.client('bedrock', region_name=REGION)
        models = bedrock.list_foundation_models()
        claude_models = [m for m in models['modelSummaries'] if 'claude-3' in m['modelId'].lower()]
        print(f"‚úÖ Bedrock access: {len(claude_models)} Claude models available")
    except Exception as e:
        print(f"‚ùå Bedrock access failed: {e}")
        return False
    
    # Check workshop directory
    if not WORKSHOP_DIR.exists():
        print(f"‚ùå Workshop directory not found: {WORKSHOP_DIR}")
        return False
    print(f"‚úÖ Workshop directory: {WORKSHOP_DIR}")
    
    # Check virtual environment
    venv_path = WORKSHOP_DIR / ".venv"
    if not venv_path.exists():
        print(f"‚ö†Ô∏è  Virtual environment not found at {venv_path}")
        print("   Creating virtual environment...")
        os.system(f"cd {WORKSHOP_DIR} && python3 -m venv .venv")
        print("   Installing dependencies...")
        os.system(f"cd {WORKSHOP_DIR} && .venv/bin/pip install -r requirements.txt")
    print(f"‚úÖ Virtual environment: {venv_path}")
    
    return True

def deploy_multi_agent_system():
    """Deploy the multi-agent system to AgentCore"""
    print_section("Deploying Multi-Agent System to AgentCore")
    
    print("üì¶ This will deploy the renewable energy multi-agent system")
    print(f"   Region: {REGION}")
    print(f"   Model: {MODEL_ID}")
    print(f"   Agent Name: {AGENT_NAME}")
    print()
    
    # The actual deployment requires running the Jupyter notebook
    # Let's provide instructions for now
    print("üöÄ To deploy, you need to run the Jupyter notebook:")
    print()
    print("   1. Start Jupyter:")
    print(f"      cd {WORKSHOP_DIR}")
    print("      source .venv/bin/activate")
    print("      jupyter notebook")
    print()
    print("   2. Open and run this notebook:")
    print("      agent_core/03_host_agent_to_runtime/03_host_agent_to_runtime.ipynb")
    print()
    print("   3. The notebook will:")
    print("      - Build Docker image with all agents")
    print("      - Push to ECR")
    print("      - Create AgentCore runtime")
    print("      - Return the AgentCore endpoint ARN")
    print()
    print("   4. Copy the endpoint ARN and save it")
    print()
    
    return None

def create_env_file(endpoint_arn):
    """Create .env.local file with configuration"""
    print_section("Creating Frontend Configuration")
    
    env_file = Path(__file__).parent.parent / ".env.local"
    
    config = f"""# Renewable Energy Integration Configuration
# Generated by deploy-renewable-agentcore.py

# Enable renewable energy features
NEXT_PUBLIC_RENEWABLE_ENABLED=true

# AgentCore endpoint (from deployment)
NEXT_PUBLIC_RENEWABLE_AGENTCORE_ENDPOINT={endpoint_arn}

# S3 bucket for artifacts
NEXT_PUBLIC_RENEWABLE_S3_BUCKET=amplify-d1eeg2gu6ddc3z-ma-workshopstoragebucketd9b-lzf4vwokty7m

# AWS region
NEXT_PUBLIC_RENEWABLE_REGION={REGION}
"""
    
    with open(env_file, 'w') as f:
        f.write(config)
    
    print(f"‚úÖ Created {env_file}")
    print()
    print("Configuration:")
    print(config)

def test_deployment(endpoint_arn):
    """Test the deployed AgentCore endpoint"""
    print_section("Testing Deployment")
    
    print(f"üß™ Testing endpoint: {endpoint_arn}")
    print()
    
    try:
        client = boto3.client('bedrock-agentcore', region_name=REGION)
        
        test_payload = {
            "prompt": "Analyze terrain for wind farm at 35.067482, -101.395466",
            "project_id": "test_deployment"
        }
        
        print(f"üì§ Sending test request...")
        print(f"   Prompt: {test_payload['prompt']}")
        print()
        
        response = client.invoke_agent_runtime(
            agentRuntimeArn=endpoint_arn,
            payload=json.dumps(test_payload).encode('utf-8')
        )
        
        print("‚úÖ Deployment successful!")
        print(f"   Status: {response['ResponseMetadata']['HTTPStatusCode']}")
        
        if 'payload' in response:
            response_body = json.loads(response['payload'].read())
            print(f"   Response received: {len(str(response_body))} characters")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        return False

def main():
    """Main deployment workflow"""
    print_section("Renewable Energy Backend Deployment")
    
    # Step 1: Check prerequisites
    if not check_prerequisites():
        print("\n‚ùå Prerequisites check failed. Please fix the issues above.")
        return 1
    
    # Step 2: Deploy multi-agent system
    endpoint_arn = deploy_multi_agent_system()
    
    # If we have an endpoint, configure and test
    if endpoint_arn:
        # Step 3: Create frontend configuration
        create_env_file(endpoint_arn)
        
        # Step 4: Test deployment
        if test_deployment(endpoint_arn):
            print_section("Deployment Complete!")
            print("‚úÖ Backend deployed successfully")
            print("‚úÖ Frontend configured")
            print("‚úÖ End-to-end test passed")
            print()
            print("üöÄ Next steps:")
            print("   1. Start the frontend: npm run dev")
            print("   2. Navigate to chat")
            print("   3. Try: 'Analyze terrain for wind farm at 35.067482, -101.395466'")
            return 0
        else:
            print("\n‚ö†Ô∏è  Deployment succeeded but test failed")
            print("   Check CloudWatch logs for details")
            return 1
    else:
        print_section("Manual Deployment Required")
        print("‚ö†Ô∏è  Automated deployment not available")
        print()
        print("üìã Follow these steps:")
        print()
        print("1. Start Jupyter:")
        print(f"   cd {WORKSHOP_DIR}")
        print("   source .venv/bin/activate")
        print("   jupyter notebook")
        print()
        print("2. Run deployment notebook:")
        print("   agent_core/03_host_agent_to_runtime/03_host_agent_to_runtime.ipynb")
        print()
        print("3. Copy the AgentCore endpoint ARN")
        print()
        print("4. Run this script again with the endpoint:")
        print("   python3 scripts/configure-renewable-frontend.py <endpoint-arn>")
        print()
        return 2

if __name__ == "__main__":
    sys.exit(main())
