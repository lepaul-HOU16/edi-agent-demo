{
  "version": 3,
  "sources": ["../../../../node_modules/src/toggle/index.tsx", "../../../../node_modules/src/toggle/internal.tsx", "../../../../node_modules/@cloudscape-design/components/toggle/styles.css.js"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { ToggleProps } from './interfaces';\nimport InternalToggle from './internal';\n\nexport { ToggleProps };\n\nconst Toggle = React.forwardRef<ToggleProps.Ref, ToggleProps>((props, ref) => {\n  const baseComponentProps = useBaseComponent('Toggle', { props: { readOnly: props.readOnly } });\n  return <InternalToggle {...props} {...baseComponentProps} ref={ref} __injectAnalyticsComponentMetadata={true} />;\n});\n\napplyDisplayName(Toggle, 'Toggle');\nexport default Toggle;\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\n\nimport {\n  GeneratedAnalyticsMetadataFragment,\n  getAnalyticsMetadataAttribute,\n} from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport { getBaseProps } from '../internal/base-component';\nimport AbstractSwitch from '../internal/components/abstract-switch';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport {\n  GeneratedAnalyticsMetadataToggleComponent,\n  GeneratedAnalyticsMetadataToggleSelect,\n} from './analytics-metadata/interfaces';\nimport { ToggleProps } from './interfaces';\n\nimport styles from './styles.css.js';\n\ninterface InternalToggleProps extends ToggleProps, InternalBaseComponentProps {\n  __injectAnalyticsComponentMetadata?: boolean;\n}\n\nconst InternalToggle = React.forwardRef<ToggleProps.Ref, InternalToggleProps>(\n  (\n    {\n      controlId,\n      checked,\n      name,\n      disabled,\n      readOnly,\n      children,\n      description,\n      ariaLabel,\n      ariaControls,\n      onFocus,\n      onBlur,\n      onChange,\n      __internalRootRef = null,\n      __injectAnalyticsComponentMetadata,\n      ...rest\n    },\n    ref\n  ) => {\n    const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);\n    const baseProps = getBaseProps(rest);\n    const checkboxRef = useRef<HTMLInputElement>(null);\n\n    const analyticsMetadata: GeneratedAnalyticsMetadataFragment = {};\n    const analyticsComponentMetadata: GeneratedAnalyticsMetadataToggleComponent = {\n      name: 'awsui.Toggle',\n      label: { root: 'self' },\n    };\n\n    if (__injectAnalyticsComponentMetadata) {\n      analyticsMetadata.component = analyticsComponentMetadata;\n    }\n\n    if (!disabled && !readOnly) {\n      analyticsMetadata.detail = {\n        selected: `${!checked}`,\n      } as Partial<GeneratedAnalyticsMetadataToggleSelect['detail']>;\n    }\n    useForwardFocus(ref, checkboxRef);\n\n    return (\n      <AbstractSwitch\n        {...baseProps}\n        className={clsx(styles.root, baseProps.className)}\n        controlClassName={clsx(styles['toggle-control'], {\n          [styles['toggle-control-checked']]: checked,\n          [styles['toggle-control-disabled']]: disabled,\n          [styles['toggle-control-readonly']]: readOnly,\n        })}\n        outlineClassName={styles.outline}\n        controlId={controlId}\n        disabled={disabled}\n        readOnly={readOnly}\n        label={children}\n        description={description}\n        descriptionBottomPadding={true}\n        ariaLabel={ariaLabel}\n        ariaLabelledby={ariaLabelledby}\n        ariaDescribedby={ariaDescribedby}\n        ariaControls={ariaControls}\n        nativeControl={nativeControlProps => (\n          <input\n            {...nativeControlProps}\n            ref={checkboxRef}\n            type=\"checkbox\"\n            checked={checked}\n            name={name}\n            aria-disabled={readOnly && !disabled ? 'true' : undefined}\n            onFocus={() => fireNonCancelableEvent(onFocus)}\n            onBlur={() => fireNonCancelableEvent(onBlur)}\n            // empty handler to suppress React controllability warning\n            onChange={() => {}}\n          />\n        )}\n        onClick={() => {\n          checkboxRef.current?.focus();\n          fireNonCancelableEvent(onChange, { checked: !checked });\n        }}\n        styledControl={\n          /*Using span, not div for HTML validity*/\n          <span\n            className={clsx(styles['toggle-handle'], {\n              [styles['toggle-handle-checked']]: checked,\n              [styles['toggle-handle-disabled']]: disabled,\n              [styles['toggle-handle-readonly']]: readOnly,\n            })}\n          />\n        }\n        __internalRootRef={__internalRootRef}\n        {...getAnalyticsMetadataAttribute(analyticsMetadata)}\n      />\n    );\n  }\n);\n\nexport default InternalToggle;\n", "\n    import './styles.scoped.css';\n    export default {\n  \"root\": \"awsui_root_4yi2u_nvz0x_145\",\n  \"outline\": \"awsui_outline_4yi2u_nvz0x_178\",\n  \"toggle-control\": \"awsui_toggle-control_4yi2u_nvz0x_200\",\n  \"toggle-control-checked\": \"awsui_toggle-control-checked_4yi2u_nvz0x_213\",\n  \"toggle-control-disabled\": \"awsui_toggle-control-disabled_4yi2u_nvz0x_216\",\n  \"toggle-control-readonly\": \"awsui_toggle-control-readonly_4yi2u_nvz0x_222\",\n  \"toggle-handle\": \"awsui_toggle-handle_4yi2u_nvz0x_226\",\n  \"toggle-handle-checked\": \"awsui_toggle-handle-checked_4yi2u_nvz0x_251\",\n  \"toggle-handle-disabled\": \"awsui_toggle-handle-disabled_4yi2u_nvz0x_258\",\n  \"toggle-handle-readonly\": \"awsui_toggle-handle-readonly_4yi2u_nvz0x_262\"\n};\n  "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAAA,gBAAkB;;;ACAlB,mBAA8B;;;ACD1B,OAAO;AACP,IAAO,qBAAQ;AAAA,EACjB,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,kBAAkB;AAAA,EAClB,0BAA0B;AAAA,EAC1B,2BAA2B;AAAA,EAC3B,2BAA2B;AAAA,EAC3B,iBAAiB;AAAA,EACjB,yBAAyB;AAAA,EACzB,0BAA0B;AAAA,EAC1B,0BAA0B;AAC5B;;;ADeA,IAAM,iBAAiB,aAAAC,QAAM,WAC3B,CACE,IAiBA,QACE;MAlBF,EACE,WACA,SACA,MACA,UACA,UACA,UACA,aACA,WACA,cACA,SACA,QACA,UACA,oBAAoB,MACpB,mCAAkC,IAAA,IAC/B,OAAI,OAAA,IAfT,CAAA,aAAA,WAAA,QAAA,YAAA,YAAA,YAAA,eAAA,aAAA,gBAAA,WAAA,UAAA,YAAA,qBAAA,oCAAA,CAgBC;AAGD,QAAM,EAAE,iBAAiB,eAAc,IAAK,oBAAoB,IAAI;AACpE,QAAM,YAAY,aAAa,IAAI;AACnC,QAAM,kBAAc,qBAAyB,IAAI;AAEjD,QAAM,oBAAwD,CAAA;AAC9D,QAAM,6BAAwE;IAC5E,MAAM;IACN,OAAO,EAAE,MAAM,OAAM;;AAGvB,MAAI,oCAAoC;AACtC,sBAAkB,YAAY;;AAGhC,MAAI,CAAC,YAAY,CAAC,UAAU;AAC1B,sBAAkB,SAAS;MACzB,UAAU,GAAG,CAAC,OAAO;;;AAGzB,kBAAgB,KAAK,WAAW;AAEhC,SACE,aAAAA,QAAA,cAAC,gBAAc,OAAA,OAAA,CAAA,GACT,WAAS,EACb,WAAW,eAAK,mBAAO,MAAM,UAAU,SAAS,GAChD,kBAAkB,eAAK,mBAAO,gBAAgB,GAAG;IAC/C,CAAC,mBAAO,wBAAwB,CAAC,GAAG;IACpC,CAAC,mBAAO,yBAAyB,CAAC,GAAG;IACrC,CAAC,mBAAO,yBAAyB,CAAC,GAAG;GACtC,GACD,kBAAkB,mBAAO,SACzB,WACA,UACA,UACA,OAAO,UACP,aACA,0BAA0B,MAC1B,WACA,gBACA,iBACA,cACA,eAAe,wBACb,aAAAA,QAAA,cAAA,SAAA,OAAA,OAAA,CAAA,GACM,oBAAkB;IACtB,KAAK;IACL,MAAK;IACL;IACA;IAAU,iBACK,YAAY,CAAC,WAAW,SAAS;IAChD,SAAS,MAAM,uBAAuB,OAAO;IAC7C,QAAQ,MAAM,uBAAuB,MAAM;;IAE3C,UAAU,MAAK;IAAE;EAAC,CAAA,CAAA,GAGtB,SAAS,MAAK;;AACZ,KAAAC,MAAA,YAAY,aAAO,QAAAA,QAAA,SAAA,SAAAA,IAAE,MAAK;AAC1B,2BAAuB,UAAU,EAAE,SAAS,CAAC,QAAO,CAAE;EACxD,GACA;;IAEE,aAAAD,QAAA,cAAA,QAAA,EACE,WAAW,eAAK,mBAAO,eAAe,GAAG;MACvC,CAAC,mBAAO,uBAAuB,CAAC,GAAG;MACnC,CAAC,mBAAO,wBAAwB,CAAC,GAAG;MACpC,CAAC,mBAAO,wBAAwB,CAAC,GAAG;KACrC,EAAC,CAAA;KAGN,kBAAoC,GAChC,8BAA8B,iBAAiB,CAAC,CAAA;AAG1D,CAAC;AAGH,IAAA,mBAAe;;;ADlHf,IAAM,SAAS,cAAAE,QAAM,WAAyC,CAAC,OAAO,QAAO;AAC3E,QAAM,qBAAqB,iBAAiB,UAAU,EAAE,OAAO,EAAE,UAAU,MAAM,SAAQ,EAAE,CAAE;AAC7F,SAAO,cAAAA,QAAA,cAAC,kBAAc,OAAA,OAAA,CAAA,GAAK,OAAW,oBAAkB,EAAE,KAAU,oCAAoC,KAAI,CAAA,CAAA;AAC9G,CAAC;AAED,iBAAiB,QAAQ,QAAQ;AACjC,IAAA,iBAAe;",
  "names": ["import_react", "React", "_a", "React"]
}
