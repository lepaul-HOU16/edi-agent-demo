import {
  AbstractSwitch
} from "./chunk-XEQW7XHV.js";
import {
  fireNonCancelableEvent,
  useForwardFocus
} from "./chunk-VOJL5FZQ.js";
import {
  useFormFieldContext
} from "./chunk-X6YNYP2P.js";
import {
  getAnalyticsMetadataAttribute
} from "./chunk-UO4K3KY5.js";
import {
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  useBaseComponent
} from "./chunk-TACQRHRS.js";
import {
  __rest
} from "./chunk-FA3WS4TG.js";
import "./chunk-IOW5GAHV.js";
import {
  require_react
} from "./chunk-NNXGX6WR.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// ../node_modules/@cloudscape-design/components/toggle/index.js
var import_react2 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/toggle/internal.js
var import_react = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/toggle/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/toggle/styles.scoped.css";
var styles_css_default = {
  "root": "awsui_root_4yi2u_nvz0x_145",
  "outline": "awsui_outline_4yi2u_nvz0x_178",
  "toggle-control": "awsui_toggle-control_4yi2u_nvz0x_200",
  "toggle-control-checked": "awsui_toggle-control-checked_4yi2u_nvz0x_213",
  "toggle-control-disabled": "awsui_toggle-control-disabled_4yi2u_nvz0x_216",
  "toggle-control-readonly": "awsui_toggle-control-readonly_4yi2u_nvz0x_222",
  "toggle-handle": "awsui_toggle-handle_4yi2u_nvz0x_226",
  "toggle-handle-checked": "awsui_toggle-handle-checked_4yi2u_nvz0x_251",
  "toggle-handle-disabled": "awsui_toggle-handle-disabled_4yi2u_nvz0x_258",
  "toggle-handle-readonly": "awsui_toggle-handle-readonly_4yi2u_nvz0x_262"
};

// ../node_modules/@cloudscape-design/components/toggle/internal.js
var InternalToggle = import_react.default.forwardRef((_a, ref) => {
  var { controlId, checked, name, disabled, readOnly, children, description, ariaLabel, ariaControls, onFocus, onBlur, onChange, __internalRootRef = null, __injectAnalyticsComponentMetadata } = _a, rest = __rest(_a, ["controlId", "checked", "name", "disabled", "readOnly", "children", "description", "ariaLabel", "ariaControls", "onFocus", "onBlur", "onChange", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const checkboxRef = (0, import_react.useRef)(null);
  const analyticsMetadata = {};
  const analyticsComponentMetadata = {
    name: "awsui.Toggle",
    label: { root: "self" }
  };
  if (__injectAnalyticsComponentMetadata) {
    analyticsMetadata.component = analyticsComponentMetadata;
  }
  if (!disabled && !readOnly) {
    analyticsMetadata.detail = {
      selected: `${!checked}`
    };
  }
  useForwardFocus(ref, checkboxRef);
  return import_react.default.createElement(AbstractSwitch, Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default.root, baseProps.className), controlClassName: clsx_m_default(styles_css_default["toggle-control"], {
    [styles_css_default["toggle-control-checked"]]: checked,
    [styles_css_default["toggle-control-disabled"]]: disabled,
    [styles_css_default["toggle-control-readonly"]]: readOnly
  }), outlineClassName: styles_css_default.outline, controlId, disabled, readOnly, label: children, description, descriptionBottomPadding: true, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, nativeControl: (nativeControlProps) => import_react.default.createElement("input", Object.assign({}, nativeControlProps, {
    ref: checkboxRef,
    type: "checkbox",
    checked,
    name,
    "aria-disabled": readOnly && !disabled ? "true" : void 0,
    onFocus: () => fireNonCancelableEvent(onFocus),
    onBlur: () => fireNonCancelableEvent(onBlur),
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a2;
    (_a2 = checkboxRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    fireNonCancelableEvent(onChange, { checked: !checked });
  }, styledControl: (
    /*Using span, not div for HTML validity*/
    import_react.default.createElement("span", { className: clsx_m_default(styles_css_default["toggle-handle"], {
      [styles_css_default["toggle-handle-checked"]]: checked,
      [styles_css_default["toggle-handle-disabled"]]: disabled,
      [styles_css_default["toggle-handle-readonly"]]: readOnly
    }) })
  ), __internalRootRef }, getAnalyticsMetadataAttribute(analyticsMetadata)));
});
var internal_default = InternalToggle;

// ../node_modules/@cloudscape-design/components/toggle/index.js
var Toggle = import_react2.default.forwardRef((props, ref) => {
  const baseComponentProps = useBaseComponent("Toggle", { props: { readOnly: props.readOnly } });
  return import_react2.default.createElement(internal_default, Object.assign({}, props, baseComponentProps, { ref, __injectAnalyticsComponentMetadata: true }));
});
applyDisplayName(Toggle, "Toggle");
var toggle_default = Toggle;
export {
  toggle_default as default
};
//# sourceMappingURL=@cloudscape-design_components_toggle.js.map
