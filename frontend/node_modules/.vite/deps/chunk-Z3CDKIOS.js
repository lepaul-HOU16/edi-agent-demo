import {
  dropdown_default,
  options_list_default,
  useDropdownContext,
  useOpenState,
  usePortalModeClasses
} from "./chunk-OLUISYJE.js";
import {
  InternalButton,
  KeyCode,
  PopoverBody,
  PopoverContainer,
  Portal,
  arrow_default,
  checkSafeUrl,
  useHiddenDescription
} from "./chunk-KFOOYN5R.js";
import {
  fireCancelableEvent,
  isPlainLeftClick
} from "./chunk-VOJL5FZQ.js";
import {
  internal_default
} from "./chunk-MPPGLDEP.js";
import {
  isDevelopment
} from "./chunk-CCBYTID7.js";
import {
  useMobile
} from "./chunk-ZRGU2BWH.js";
import {
  useFunnel
} from "./chunk-3YAZCWEI.js";
import {
  getAnalyticsMetadataAttribute,
  useUniqueId
} from "./chunk-UO4K3KY5.js";
import {
  clsx_m_default,
  getBaseProps,
  useReducedMotion,
  useVisualRefresh,
  warnOnce
} from "./chunk-TACQRHRS.js";
import {
  __rest
} from "./chunk-FA3WS4TG.js";
import {
  require_react
} from "./chunk-NNXGX6WR.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// ../node_modules/@cloudscape-design/components/box/internal.js
var import_react = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/box/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/box/styles.scoped.css";
var styles_css_default = {
  "box": "awsui_box_18wu0_1t6jp_172",
  "p-variant": "awsui_p-variant_18wu0_1t6jp_172",
  "color-default": "awsui_color-default_18wu0_1t6jp_172",
  "b-variant": "awsui_b-variant_18wu0_1t6jp_172",
  "strong-variant": "awsui_strong-variant_18wu0_1t6jp_172",
  "code-variant": "awsui_code-variant_18wu0_1t6jp_172",
  "pre-variant": "awsui_pre-variant_18wu0_1t6jp_172",
  "samp-variant": "awsui_samp-variant_18wu0_1t6jp_172",
  "h1-variant": "awsui_h1-variant_18wu0_1t6jp_176",
  "h2-variant": "awsui_h2-variant_18wu0_1t6jp_176",
  "h3-variant": "awsui_h3-variant_18wu0_1t6jp_176",
  "h4-variant": "awsui_h4-variant_18wu0_1t6jp_176",
  "h5-variant": "awsui_h5-variant_18wu0_1t6jp_176",
  "small-variant": "awsui_small-variant_18wu0_1t6jp_180",
  "a-variant": "awsui_a-variant_18wu0_1t6jp_184",
  "font-size-default": "awsui_font-size-default_18wu0_1t6jp_188",
  "font-weight-default": "awsui_font-weight-default_18wu0_1t6jp_228",
  "key-label-variant": "awsui_key-label-variant_18wu0_1t6jp_270",
  "gen-ai-label-variant": "awsui_gen-ai-label-variant_18wu0_1t6jp_277",
  "value-large-variant": "awsui_value-large-variant_18wu0_1t6jp_284",
  "font-weight-heavy": "awsui_font-weight-heavy_18wu0_1t6jp_291",
  "color-inverted": "awsui_color-inverted_18wu0_1t6jp_296",
  "color-text-label": "awsui_color-text-label_18wu0_1t6jp_299",
  "color-text-body-secondary": "awsui_color-text-body-secondary_18wu0_1t6jp_302",
  "color-text-status-error": "awsui_color-text-status-error_18wu0_1t6jp_305",
  "color-text-status-success": "awsui_color-text-status-success_18wu0_1t6jp_308",
  "color-text-status-info": "awsui_color-text-status-info_18wu0_1t6jp_311",
  "color-text-status-inactive": "awsui_color-text-status-inactive_18wu0_1t6jp_314",
  "color-text-status-warning": "awsui_color-text-status-warning_18wu0_1t6jp_317",
  "color-inherit": "awsui_color-inherit_18wu0_1t6jp_320",
  "font-size-body-s": "awsui_font-size-body-s_18wu0_1t6jp_323",
  "font-size-body-m": "awsui_font-size-body-m_18wu0_1t6jp_328",
  "font-size-heading-xs": "awsui_font-size-heading-xs_18wu0_1t6jp_332",
  "font-size-heading-s": "awsui_font-size-heading-s_18wu0_1t6jp_336",
  "font-size-heading-m": "awsui_font-size-heading-m_18wu0_1t6jp_341",
  "font-size-heading-l": "awsui_font-size-heading-l_18wu0_1t6jp_346",
  "font-size-heading-xl": "awsui_font-size-heading-xl_18wu0_1t6jp_351",
  "font-size-display-l": "awsui_font-size-display-l_18wu0_1t6jp_356",
  "font-weight-light": "awsui_font-weight-light_18wu0_1t6jp_361",
  "font-weight-normal": "awsui_font-weight-normal_18wu0_1t6jp_364",
  "font-weight-bold": "awsui_font-weight-bold_18wu0_1t6jp_367",
  "t-left": "awsui_t-left_18wu0_1t6jp_374",
  "t-right": "awsui_t-right_18wu0_1t6jp_378",
  "t-center": "awsui_t-center_18wu0_1t6jp_382",
  "p-n": "awsui_p-n_18wu0_1t6jp_399",
  "p-top-n": "awsui_p-top-n_18wu0_1t6jp_404",
  "p-vertical-n": "awsui_p-vertical-n_18wu0_1t6jp_405",
  "p-right-n": "awsui_p-right-n_18wu0_1t6jp_409",
  "p-horizontal-n": "awsui_p-horizontal-n_18wu0_1t6jp_410",
  "p-bottom-n": "awsui_p-bottom-n_18wu0_1t6jp_414",
  "p-left-n": "awsui_p-left-n_18wu0_1t6jp_419",
  "p-xxxs": "awsui_p-xxxs_18wu0_1t6jp_424",
  "p-top-xxxs": "awsui_p-top-xxxs_18wu0_1t6jp_429",
  "p-vertical-xxxs": "awsui_p-vertical-xxxs_18wu0_1t6jp_430",
  "p-right-xxxs": "awsui_p-right-xxxs_18wu0_1t6jp_434",
  "p-horizontal-xxxs": "awsui_p-horizontal-xxxs_18wu0_1t6jp_435",
  "p-bottom-xxxs": "awsui_p-bottom-xxxs_18wu0_1t6jp_439",
  "p-left-xxxs": "awsui_p-left-xxxs_18wu0_1t6jp_444",
  "p-xxs": "awsui_p-xxs_18wu0_1t6jp_449",
  "p-top-xxs": "awsui_p-top-xxs_18wu0_1t6jp_454",
  "p-vertical-xxs": "awsui_p-vertical-xxs_18wu0_1t6jp_455",
  "p-right-xxs": "awsui_p-right-xxs_18wu0_1t6jp_459",
  "p-horizontal-xxs": "awsui_p-horizontal-xxs_18wu0_1t6jp_460",
  "p-bottom-xxs": "awsui_p-bottom-xxs_18wu0_1t6jp_464",
  "p-left-xxs": "awsui_p-left-xxs_18wu0_1t6jp_469",
  "p-xs": "awsui_p-xs_18wu0_1t6jp_474",
  "p-top-xs": "awsui_p-top-xs_18wu0_1t6jp_479",
  "p-vertical-xs": "awsui_p-vertical-xs_18wu0_1t6jp_480",
  "p-right-xs": "awsui_p-right-xs_18wu0_1t6jp_484",
  "p-horizontal-xs": "awsui_p-horizontal-xs_18wu0_1t6jp_485",
  "p-bottom-xs": "awsui_p-bottom-xs_18wu0_1t6jp_489",
  "p-left-xs": "awsui_p-left-xs_18wu0_1t6jp_494",
  "p-s": "awsui_p-s_18wu0_1t6jp_499",
  "p-top-s": "awsui_p-top-s_18wu0_1t6jp_504",
  "p-vertical-s": "awsui_p-vertical-s_18wu0_1t6jp_505",
  "p-right-s": "awsui_p-right-s_18wu0_1t6jp_509",
  "p-horizontal-s": "awsui_p-horizontal-s_18wu0_1t6jp_510",
  "p-bottom-s": "awsui_p-bottom-s_18wu0_1t6jp_514",
  "p-left-s": "awsui_p-left-s_18wu0_1t6jp_519",
  "p-m": "awsui_p-m_18wu0_1t6jp_524",
  "p-top-m": "awsui_p-top-m_18wu0_1t6jp_529",
  "p-vertical-m": "awsui_p-vertical-m_18wu0_1t6jp_530",
  "p-right-m": "awsui_p-right-m_18wu0_1t6jp_534",
  "p-horizontal-m": "awsui_p-horizontal-m_18wu0_1t6jp_535",
  "p-bottom-m": "awsui_p-bottom-m_18wu0_1t6jp_539",
  "p-left-m": "awsui_p-left-m_18wu0_1t6jp_544",
  "p-l": "awsui_p-l_18wu0_1t6jp_419",
  "p-top-l": "awsui_p-top-l_18wu0_1t6jp_554",
  "p-vertical-l": "awsui_p-vertical-l_18wu0_1t6jp_555",
  "p-right-l": "awsui_p-right-l_18wu0_1t6jp_559",
  "p-horizontal-l": "awsui_p-horizontal-l_18wu0_1t6jp_560",
  "p-bottom-l": "awsui_p-bottom-l_18wu0_1t6jp_564",
  "p-left-l": "awsui_p-left-l_18wu0_1t6jp_569",
  "p-xl": "awsui_p-xl_18wu0_1t6jp_574",
  "p-top-xl": "awsui_p-top-xl_18wu0_1t6jp_579",
  "p-vertical-xl": "awsui_p-vertical-xl_18wu0_1t6jp_580",
  "p-right-xl": "awsui_p-right-xl_18wu0_1t6jp_584",
  "p-horizontal-xl": "awsui_p-horizontal-xl_18wu0_1t6jp_585",
  "p-bottom-xl": "awsui_p-bottom-xl_18wu0_1t6jp_589",
  "p-left-xl": "awsui_p-left-xl_18wu0_1t6jp_594",
  "p-xxl": "awsui_p-xxl_18wu0_1t6jp_599",
  "p-top-xxl": "awsui_p-top-xxl_18wu0_1t6jp_604",
  "p-vertical-xxl": "awsui_p-vertical-xxl_18wu0_1t6jp_605",
  "p-right-xxl": "awsui_p-right-xxl_18wu0_1t6jp_609",
  "p-horizontal-xxl": "awsui_p-horizontal-xxl_18wu0_1t6jp_610",
  "p-bottom-xxl": "awsui_p-bottom-xxl_18wu0_1t6jp_614",
  "p-left-xxl": "awsui_p-left-xxl_18wu0_1t6jp_619",
  "p-xxxl": "awsui_p-xxxl_18wu0_1t6jp_624",
  "p-top-xxxl": "awsui_p-top-xxxl_18wu0_1t6jp_629",
  "p-vertical-xxxl": "awsui_p-vertical-xxxl_18wu0_1t6jp_630",
  "p-right-xxxl": "awsui_p-right-xxxl_18wu0_1t6jp_634",
  "p-horizontal-xxxl": "awsui_p-horizontal-xxxl_18wu0_1t6jp_635",
  "p-bottom-xxxl": "awsui_p-bottom-xxxl_18wu0_1t6jp_639",
  "p-left-xxxl": "awsui_p-left-xxxl_18wu0_1t6jp_644",
  "m-n": "awsui_m-n_18wu0_1t6jp_649",
  "m-top-n": "awsui_m-top-n_18wu0_1t6jp_654",
  "m-vertical-n": "awsui_m-vertical-n_18wu0_1t6jp_655",
  "m-right-n": "awsui_m-right-n_18wu0_1t6jp_659",
  "m-horizontal-n": "awsui_m-horizontal-n_18wu0_1t6jp_660",
  "m-bottom-n": "awsui_m-bottom-n_18wu0_1t6jp_664",
  "m-left-n": "awsui_m-left-n_18wu0_1t6jp_669",
  "m-xxxs": "awsui_m-xxxs_18wu0_1t6jp_674",
  "m-top-xxxs": "awsui_m-top-xxxs_18wu0_1t6jp_679",
  "m-vertical-xxxs": "awsui_m-vertical-xxxs_18wu0_1t6jp_680",
  "m-right-xxxs": "awsui_m-right-xxxs_18wu0_1t6jp_684",
  "m-horizontal-xxxs": "awsui_m-horizontal-xxxs_18wu0_1t6jp_685",
  "m-bottom-xxxs": "awsui_m-bottom-xxxs_18wu0_1t6jp_689",
  "m-left-xxxs": "awsui_m-left-xxxs_18wu0_1t6jp_694",
  "m-xxs": "awsui_m-xxs_18wu0_1t6jp_699",
  "m-top-xxs": "awsui_m-top-xxs_18wu0_1t6jp_704",
  "m-vertical-xxs": "awsui_m-vertical-xxs_18wu0_1t6jp_705",
  "m-right-xxs": "awsui_m-right-xxs_18wu0_1t6jp_709",
  "m-horizontal-xxs": "awsui_m-horizontal-xxs_18wu0_1t6jp_710",
  "m-bottom-xxs": "awsui_m-bottom-xxs_18wu0_1t6jp_714",
  "m-left-xxs": "awsui_m-left-xxs_18wu0_1t6jp_719",
  "m-xs": "awsui_m-xs_18wu0_1t6jp_724",
  "m-top-xs": "awsui_m-top-xs_18wu0_1t6jp_729",
  "m-vertical-xs": "awsui_m-vertical-xs_18wu0_1t6jp_730",
  "m-right-xs": "awsui_m-right-xs_18wu0_1t6jp_734",
  "m-horizontal-xs": "awsui_m-horizontal-xs_18wu0_1t6jp_735",
  "m-bottom-xs": "awsui_m-bottom-xs_18wu0_1t6jp_739",
  "m-left-xs": "awsui_m-left-xs_18wu0_1t6jp_744",
  "m-s": "awsui_m-s_18wu0_1t6jp_749",
  "m-top-s": "awsui_m-top-s_18wu0_1t6jp_754",
  "m-vertical-s": "awsui_m-vertical-s_18wu0_1t6jp_755",
  "m-right-s": "awsui_m-right-s_18wu0_1t6jp_759",
  "m-horizontal-s": "awsui_m-horizontal-s_18wu0_1t6jp_760",
  "m-bottom-s": "awsui_m-bottom-s_18wu0_1t6jp_764",
  "m-left-s": "awsui_m-left-s_18wu0_1t6jp_769",
  "m-m": "awsui_m-m_18wu0_1t6jp_774",
  "m-top-m": "awsui_m-top-m_18wu0_1t6jp_779",
  "m-vertical-m": "awsui_m-vertical-m_18wu0_1t6jp_780",
  "m-right-m": "awsui_m-right-m_18wu0_1t6jp_784",
  "m-horizontal-m": "awsui_m-horizontal-m_18wu0_1t6jp_785",
  "m-bottom-m": "awsui_m-bottom-m_18wu0_1t6jp_789",
  "m-left-m": "awsui_m-left-m_18wu0_1t6jp_794",
  "m-l": "awsui_m-l_18wu0_1t6jp_669",
  "m-top-l": "awsui_m-top-l_18wu0_1t6jp_804",
  "m-vertical-l": "awsui_m-vertical-l_18wu0_1t6jp_805",
  "m-right-l": "awsui_m-right-l_18wu0_1t6jp_809",
  "m-horizontal-l": "awsui_m-horizontal-l_18wu0_1t6jp_810",
  "m-bottom-l": "awsui_m-bottom-l_18wu0_1t6jp_814",
  "m-left-l": "awsui_m-left-l_18wu0_1t6jp_819",
  "m-xl": "awsui_m-xl_18wu0_1t6jp_824",
  "m-top-xl": "awsui_m-top-xl_18wu0_1t6jp_829",
  "m-vertical-xl": "awsui_m-vertical-xl_18wu0_1t6jp_830",
  "m-right-xl": "awsui_m-right-xl_18wu0_1t6jp_834",
  "m-horizontal-xl": "awsui_m-horizontal-xl_18wu0_1t6jp_835",
  "m-bottom-xl": "awsui_m-bottom-xl_18wu0_1t6jp_839",
  "m-left-xl": "awsui_m-left-xl_18wu0_1t6jp_844",
  "m-xxl": "awsui_m-xxl_18wu0_1t6jp_849",
  "m-top-xxl": "awsui_m-top-xxl_18wu0_1t6jp_854",
  "m-vertical-xxl": "awsui_m-vertical-xxl_18wu0_1t6jp_855",
  "m-right-xxl": "awsui_m-right-xxl_18wu0_1t6jp_859",
  "m-horizontal-xxl": "awsui_m-horizontal-xxl_18wu0_1t6jp_860",
  "m-bottom-xxl": "awsui_m-bottom-xxl_18wu0_1t6jp_864",
  "m-left-xxl": "awsui_m-left-xxl_18wu0_1t6jp_869",
  "m-xxxl": "awsui_m-xxxl_18wu0_1t6jp_874",
  "m-top-xxxl": "awsui_m-top-xxxl_18wu0_1t6jp_879",
  "m-vertical-xxxl": "awsui_m-vertical-xxxl_18wu0_1t6jp_880",
  "m-right-xxxl": "awsui_m-right-xxxl_18wu0_1t6jp_884",
  "m-horizontal-xxxl": "awsui_m-horizontal-xxxl_18wu0_1t6jp_885",
  "m-bottom-xxxl": "awsui_m-bottom-xxxl_18wu0_1t6jp_889",
  "m-left-xxxl": "awsui_m-left-xxxl_18wu0_1t6jp_894",
  "d-block": "awsui_d-block_18wu0_1t6jp_899",
  "d-inline": "awsui_d-inline_18wu0_1t6jp_902",
  "d-inline-block": "awsui_d-inline-block_18wu0_1t6jp_905",
  "d-none": "awsui_d-none_18wu0_1t6jp_908",
  "f-left": "awsui_f-left_18wu0_1t6jp_912",
  "f-right": "awsui_f-right_18wu0_1t6jp_916",
  "root": "awsui_root_18wu0_1t6jp_920"
};

// ../node_modules/@cloudscape-design/components/box/internal.js
function InternalBox(_a) {
  var { variant = "div", tagOverride, margin = {}, padding = {}, display, textAlign, float, fontSize, fontWeight, color, children, __internalRootRef = null } = _a, props = __rest(_a, ["variant", "tagOverride", "margin", "padding", "display", "textAlign", "float", "fontSize", "fontWeight", "color", "children", "__internalRootRef"]);
  const baseProps = getBaseProps(props);
  const marginsClassNamesSuffices = getClassNamesSuffixes(margin);
  const paddingsClassNamesSuffices = getClassNamesSuffixes(padding);
  const Tag = getTag(variant, tagOverride);
  const className = clsx_m_default(baseProps.className, styles_css_default.root, styles_css_default.box, styles_css_default[`${variant.replace(/^awsui-/, "")}-variant`], marginsClassNamesSuffices.map((suffix) => styles_css_default[`m-${suffix}`]), paddingsClassNamesSuffices.map((suffix) => styles_css_default[`p-${suffix}`]), styles_css_default[`d-${display}`], styles_css_default[`f-${float}`], styles_css_default[`color-${color || "default"}`], styles_css_default[`font-size-${fontSize || "default"}`], styles_css_default[`font-weight-${fontWeight || "default"}`], styles_css_default[`t-${textAlign}`]);
  return import_react.default.createElement(Tag, Object.assign({}, baseProps, { className, ref: __internalRootRef }), children);
}
var getClassNamesSuffixes = (value) => {
  if (typeof value === "string") {
    return [value];
  }
  const sides = ["top", "right", "bottom", "left", "horizontal", "vertical"];
  return sides.filter((side) => !!value[side]).map((side) => `${side}-${value[side]}`);
};
var getTag = (variant, tagOverride) => {
  if (tagOverride) {
    return tagOverride;
  }
  if (variant === "awsui-value-large") {
    return "span";
  }
  if (variant === "awsui-key-label" || variant === "awsui-gen-ai-label") {
    return "div";
  }
  return variant;
};

// ../node_modules/@cloudscape-design/components/button-dropdown/utils/create-items-tree.js
function createItemsTree(items) {
  const itemToIndex = /* @__PURE__ */ new Map();
  const indexToItem = /* @__PURE__ */ new Map();
  const flatIndices = [];
  traverseItems(items, (item, index) => {
    const indexKey = stringifyIndex(index);
    itemToIndex.set(item, indexKey);
    indexToItem.set(indexKey, item);
    flatIndices.push(indexKey);
  });
  return {
    getItem: (index) => {
      const indexKey = stringifyIndex(index);
      return indexToItem.get(indexKey) || null;
    },
    getItemIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      return parseIndex(indexKey);
    },
    getSequentialIndex: (index, direction) => {
      const indexKey = stringifyIndex(index);
      const position = flatIndices.indexOf(indexKey);
      const nextIndexKey = flatIndices[position + direction];
      if (!nextIndexKey) {
        return null;
      }
      return parseIndex(nextIndexKey);
    },
    getParentIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      const index = parseIndex(indexKey);
      if (index.length === 1) {
        return null;
      }
      return index.slice(0, index.length - 1);
    }
  };
}
function traverseItems(items, act, parentIndex = []) {
  items.forEach((item, index) => {
    const itemIndex = [...parentIndex, index];
    act(item, itemIndex);
    if (isItemGroup(item)) {
      traverseItems(item.items, act, itemIndex);
    }
  });
}
function stringifyIndex(index) {
  return index.join("-");
}
function parseIndex(index) {
  return index.split("-").map((it) => parseInt(it));
}

// ../node_modules/@cloudscape-design/components/button-dropdown/utils/utils.js
var isItemGroup = (item) => item && item.items !== void 0;
var isLinkItem = (item) => item && item.href !== void 0;
var isCheckboxItem = (item) => item && item.itemType === "checkbox";
var getItemTarget = (item) => item.external ? "_blank" : void 0;
function indexIncludes(source, target) {
  for (let index = 0; index < source.length; index++) {
    if (source[index] !== target[index]) {
      return false;
    }
  }
  return true;
}
function indexEquals(left, right) {
  if (left.length !== right.length) {
    return false;
  }
  for (let index = 0; index < left.length; index++) {
    if (left[index] !== right[index]) {
      return false;
    }
  }
  return true;
}
function hasCheckboxItems(items) {
  let hasCheckboxItems2 = false;
  traverseItems(items, (item) => {
    if (item.itemType === "checkbox") {
      hasCheckboxItems2 = true;
    }
  });
  return hasCheckboxItems2;
}

// ../node_modules/@cloudscape-design/components/internal/styles/motion/utils.js
var spinWhenOpen = (styles, className, open) => clsx_m_default(styles[className], open && styles[`${className}-open`]);

// ../node_modules/@cloudscape-design/components/button-dropdown/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/button-dropdown/styles.scoped.css";
var styles_css_default2 = {
  "button-dropdown": "awsui_button-dropdown_sne0l_ulg38_145",
  "full-width": "awsui_full-width_sne0l_ulg38_148",
  "items-list-container": "awsui_items-list-container_sne0l_ulg38_153",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_sne0l_ulg38_1",
  "rotate": "awsui_rotate_sne0l_ulg38_172",
  "rotate-open": "awsui_rotate-open_sne0l_ulg38_186",
  "header": "awsui_header_sne0l_ulg38_190",
  "title": "awsui_title_sne0l_ulg38_201",
  "description": "awsui_description_sne0l_ulg38_202",
  "trigger-button": "awsui_trigger-button_sne0l_ulg38_206",
  "loading": "awsui_loading_sne0l_ulg38_210",
  "split-trigger-wrapper": "awsui_split-trigger-wrapper_sne0l_ulg38_214",
  "trigger-item": "awsui_trigger-item_sne0l_ulg38_217",
  "has-no-text": "awsui_has-no-text_sne0l_ulg38_226",
  "visual-refresh": "awsui_visual-refresh_sne0l_ulg38_229",
  "variant-normal": "awsui_variant-normal_sne0l_ulg38_240",
  "split-trigger": "awsui_split-trigger_sne0l_ulg38_214",
  "dropdown-trigger": "awsui_dropdown-trigger_sne0l_ulg38_251",
  "main-action-full-width": "awsui_main-action-full-width_sne0l_ulg38_255",
  "main-action-trigger-full-width": "awsui_main-action-trigger-full-width_sne0l_ulg38_259",
  "test-utils-button-trigger": "awsui_test-utils-button-trigger_sne0l_ulg38_263"
};

// ../node_modules/@cloudscape-design/components/button-dropdown/internal.js
var import_react10 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/button-dropdown/items-list.js
var import_react8 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/button-dropdown/category-elements/category-element.js
var import_react2 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.scoped.css";
var styles_css_default3 = {
  "header": "awsui_header_16mm3_1azb2_145",
  "disabled": "awsui_disabled_16mm3_1azb2_160",
  "expandable-header": "awsui_expandable-header_16mm3_1azb2_164",
  "rolled-down": "awsui_rolled-down_16mm3_1azb2_175",
  "highlighted": "awsui_highlighted_16mm3_1azb2_178",
  "is-focused": "awsui_is-focused_16mm3_1azb2_196",
  "category": "awsui_category_16mm3_1azb2_201",
  "expandable": "awsui_expandable_16mm3_1azb2_164",
  "variant-navigation": "awsui_variant-navigation_16mm3_1azb2_216",
  "expand-icon": "awsui_expand-icon_16mm3_1azb2_223",
  "expand-icon-up": "awsui_expand-icon-up_16mm3_1azb2_240",
  "expand-icon-right": "awsui_expand-icon-right_16mm3_1azb2_243",
  "items-list-container": "awsui_items-list-container_16mm3_1azb2_251",
  "in-dropdown": "awsui_in-dropdown_16mm3_1azb2_260"
};

// ../node_modules/@cloudscape-design/components/button-dropdown/category-elements/category-element.js
var CategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, variant, position }) => {
  return import_react2.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default3.category, styles_css_default3[`variant-${variant}`], disabled && styles_css_default3.disabled), role: "presentation" },
    item.text && import_react2.default.createElement("p", { className: clsx_m_default(styles_css_default3.header, { [styles_css_default3.disabled]: disabled }), "aria-hidden": "true" }, item.text),
    import_react2.default.createElement("ul", { className: styles_css_default3["items-list-container"], role: "group", "aria-label": item.text, "aria-disabled": disabled }, item.items && import_react2.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, categoryDisabled: disabled, hasCategoryHeader: !!item.text, variant, position }))
  );
};
var category_element_default = CategoryElement;

// ../node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var import_react4 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/button-dropdown/tooltip.js
var import_react3 = __toESM(require_react());
var DEFAULT_OPEN_TIMEOUT_IN_MS = 120;
function Tooltip({ children, content, position = "right", className }) {
  const ref = (0, import_react3.useRef)(null);
  const isReducedMotion = useReducedMotion(ref);
  const { open, triggerProps } = useTooltipOpen(isReducedMotion ? 0 : DEFAULT_OPEN_TIMEOUT_IN_MS);
  const portalClasses = usePortalModeClasses(ref);
  return import_react3.default.createElement(
    "span",
    Object.assign({ ref }, triggerProps, { className }),
    children,
    open && import_react3.default.createElement(
      Portal,
      null,
      import_react3.default.createElement(
        "span",
        { className: portalClasses },
        import_react3.default.createElement(
          PopoverContainer,
          { size: "small", fixedWidth: false, position, trackRef: ref, arrow: (position2) => import_react3.default.createElement(arrow_default, { position: position2 }), renderWithPortal: true, zIndex: 7e3 },
          import_react3.default.createElement(
            PopoverBody,
            { dismissButton: false, dismissAriaLabel: void 0, header: null, onDismiss: () => {
            }, overflowVisible: "both" },
            import_react3.default.createElement("span", { "data-testid": "button-dropdown-disabled-reason", role: "tooltip" }, content)
          )
        )
      )
    )
  );
}
function useTooltipOpen(timeout) {
  const handle = (0, import_react3.useRef)();
  const [isOpen, setIsOpen] = (0, import_react3.useState)(false);
  const close = () => {
    clearTimeout(handle.current);
    setIsOpen(false);
  };
  const open = () => setIsOpen(true);
  const openDelayed = () => {
    handle.current = setTimeout(open, timeout);
  };
  const onKeyDown = (e) => {
    if (isOpen && isEscape(e.key)) {
      e.preventDefault();
      e.stopPropagation();
      close();
    }
  };
  const onFocus = openDelayed;
  const onBlur = close;
  return {
    open: isOpen,
    triggerProps: {
      onBlur,
      onFocus,
      onKeyDown
    }
  };
}
var isEscape = (key) => key === "Escape" || key === "Esc";

// ../node_modules/@cloudscape-design/components/button-dropdown/utils/menu-item.js
var getMenuItemProps = ({ disabled, parent, expanded }) => ({
  role: "menuitem",
  "aria-disabled": disabled ? "true" : void 0,
  "aria-haspopup": parent ? "true" : void 0,
  "aria-expanded": expanded ? "true" : parent ? "false" : void 0
});
var getMenuItemCheckboxProps = ({ disabled, checked }) => ({
  role: "menuitemcheckbox",
  "aria-disabled": disabled ? "true" : void 0,
  "aria-checked": checked ? "true" : "false"
});

// ../node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var ExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, expandToViewport, variant, position }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react4.default.useRef(null);
  const ref = (0, import_react4.useRef)(null);
  (0, import_react4.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (event) => {
    var _a;
    if (!disabled) {
      event.preventDefault();
      onGroupToggle(item, event);
      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react4.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default3.header, styles_css_default3["expandable-header"], styles_css_default3[`variant-${variant}`], {
        [styles_css_default3.disabled]: disabled,
        [styles_css_default3.highlighted]: highlighted,
        [styles_css_default3["is-focused"]]: isKeyboardHighlighted
      }),
      // We are using the roving tabindex technique to manage the focus state of the dropdown.
      // The current element will always have tabindex=0 which means that it can be tabbed to,
      // while all other items have tabindex=-1 so we can focus them when necessary.
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, expanded, disabled }), isDisabledWithReason ? targetProps : {}, getAnalyticsMetadataAttribute(disabled ? {} : {
      action: "expand",
      detail: {
        position: position || "0",
        label: { root: "self" },
        id: item.id || "",
        expanded: `${!expanded}`
      }
    })),
    item.text,
    import_react4.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default3["expand-icon"], styles_css_default3["expand-icon-right"]) },
      import_react4.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react4.default.createElement(
      Tooltip,
      { content: item.disabledReason },
      trigger,
      descriptionEl
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react4.default.createElement(dropdown_default, { open: expanded, stretchWidth: false, interior: true, expandToViewport, trigger }, item.items && expanded && import_react4.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: clsx_m_default(styles_css_default3["items-list-container"], styles_css_default3["in-dropdown"]) },
      import_react4.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, variant, position })
    ));
  }
  return import_react4.default.createElement("li", { className: clsx_m_default(styles_css_default3.category, styles_css_default3[`variant-${variant}`], styles_css_default3.expandable, {
    [styles_css_default3.expanded]: expanded,
    [styles_css_default3.disabled]: disabled,
    [styles_css_default3.highlighted]: highlighted
  }), role: "presentation", "data-testid": item.id, ref, onClick, onMouseEnter: onHover, onTouchStart: onHover }, content);
};
var expandable_category_element_default = ExpandableCategoryElement;

// ../node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var import_react6 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var import_react5 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.scoped.css";
var styles_css_default4 = {
  "root": "awsui_root_14cnr_13zum_145",
  "trigger": "awsui_trigger_14cnr_13zum_179",
  "dropdown": "awsui_dropdown_14cnr_13zum_182",
  "nowrap": "awsui_nowrap_14cnr_13zum_193",
  "open": "awsui_open_14cnr_13zum_196"
};

// ../node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var MobileExpandableGroup = ({ children, trigger, open }) => {
  return import_react5.default.createElement(
    "div",
    { className: styles_css_default4.root },
    import_react5.default.createElement("div", { className: styles_css_default4.trigger }, trigger),
    import_react5.default.createElement("div", { className: clsx_m_default(styles_css_default4.dropdown, { [styles_css_default4.open]: open }), "data-open": open }, children)
  );
};
var mobile_expandable_group_default = MobileExpandableGroup;

// ../node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var MobileExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, variant, position }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react6.default.useRef(null);
  (0, import_react6.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (e) => {
    if (!disabled) {
      e.preventDefault();
      onGroupToggle(item, e);
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react6.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default3.header, styles_css_default3["expandable-header"], styles_css_default3[`variant-${variant}`], {
        [styles_css_default3.highlighted]: highlighted,
        [styles_css_default3["rolled-down"]]: expanded,
        [styles_css_default3.disabled]: disabled,
        [styles_css_default3["is-focused"]]: isKeyboardHighlighted
      }),
      // We are using the roving tabindex technique to manage the focus state of the dropdown.
      // The current element will always have tabindex=0 which means that it can be tabbed to,
      // while all other items have tabindex=-1 so we can focus them when necessary.
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, disabled, expanded }), isDisabledWithReason ? targetProps : {}, getAnalyticsMetadataAttribute(disabled ? {} : {
      action: "expand",
      detail: {
        position: position || "0",
        label: { root: "self" },
        id: item.id || "",
        expanded: `${!expanded}`
      }
    })),
    item.text,
    import_react6.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default3["expand-icon"], {
        [styles_css_default3["expand-icon-up"]]: expanded
      }) },
      import_react6.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react6.default.createElement(
      import_react6.default.Fragment,
      null,
      descriptionEl,
      import_react6.default.createElement(Tooltip, { content: item.disabledReason }, trigger)
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react6.default.createElement(mobile_expandable_group_default, { open: expanded, trigger }, item.items && expanded && import_react6.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: styles_css_default3["items-list-container"] },
      import_react6.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, hasCategoryHeader: true, variant, position })
    ));
  }
  return import_react6.default.createElement("li", { className: clsx_m_default(styles_css_default3.category, styles_css_default3[`variant-${variant}`], styles_css_default3.expandable, {
    [styles_css_default3.expanded]: expanded,
    [styles_css_default3.disabled]: disabled,
    [styles_css_default3.highlighted]: highlighted || expanded,
    [styles_css_default3.expandable]: true
  }), role: "presentation", onClick, onMouseEnter: onHover, onTouchStart: onHover, "data-testid": item.id }, content);
};
var mobile_expandable_category_element_default = MobileExpandableCategoryElement;

// ../node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var import_react7 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/button-dropdown/analytics-metadata/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/button-dropdown/analytics-metadata/styles.scoped.css";
var styles_css_default5 = {
  "trigger-label": "awsui_trigger-label_q2oen_w271r_5",
  "menu-item": "awsui_menu-item_q2oen_w271r_6",
  "main-action-label": "awsui_main-action-label_q2oen_w271r_7"
};

// ../node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.scoped.css";
var styles_css_default6 = {
  "item-element": "awsui_item-element_93a1u_1ramd_145",
  "disabled": "awsui_disabled_93a1u_1ramd_157",
  "show-divider": "awsui_show-divider_93a1u_1ramd_164",
  "highlighted": "awsui_highlighted_93a1u_1ramd_167",
  "is-focused": "awsui_is-focused_93a1u_1ramd_182",
  "menu-item": "awsui_menu-item_93a1u_1ramd_187",
  "link-style": "awsui_link-style_93a1u_1ramd_199",
  "current-breadcrumb": "awsui_current-breadcrumb_93a1u_1ramd_235",
  "link-style-highlighted": "awsui_link-style-highlighted_93a1u_1ramd_243",
  "has-category-header": "awsui_has-category-header_93a1u_1ramd_249",
  "item-tooltip-wrapper": "awsui_item-tooltip-wrapper_93a1u_1ramd_249",
  "has-checkmark": "awsui_has-checkmark_93a1u_1ramd_249",
  "icon": "awsui_icon_93a1u_1ramd_253",
  "checkmark": "awsui_checkmark_93a1u_1ramd_257",
  "external-icon": "awsui_external-icon_93a1u_1ramd_264"
};

// ../node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var ItemElement = ({ position = "1", item, disabled, onItemActivate, highlighted, highlightItem, showDivider, hasCategoryHeader, isKeyboardHighlighted = false, analyticsMetadataTransformer = (metadata) => metadata, variant = "normal", linkStyle }) => {
  const isLink = isLinkItem(item);
  const isCheckbox = isCheckboxItem(item);
  const onClick = (event) => {
    event.stopPropagation();
    if (!isLink) {
      event.preventDefault();
    }
    if (!disabled) {
      onItemActivate(item, event);
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  return import_react7.default.createElement(
    "li",
    Object.assign({ className: clsx_m_default(styles_css_default6["item-element"], styles_css_default6[`variant-${variant}`], {
      [styles_css_default6.highlighted]: highlighted,
      [styles_css_default6.disabled]: disabled,
      [styles_css_default6["has-category-header"]]: hasCategoryHeader,
      [styles_css_default6["has-checkmark"]]: isCheckbox,
      [styles_css_default6["show-divider"]]: showDivider,
      [styles_css_default6["is-focused"]]: isKeyboardHighlighted
    }), role: "presentation", "data-testid": item.id, "data-description": item.description, onClick, onMouseEnter: onHover, onTouchStart: onHover }, getAnalyticsMetadataAttribute(disabled ? {} : analyticsMetadataTransformer({
      action: "click",
      detail: {
        position,
        id: item.id,
        label: `.${styles_css_default5["menu-item"]}`,
        href: item.href || ""
      }
    }))),
    import_react7.default.createElement(MenuItem, { item, disabled, highlighted, linkStyle })
  );
};
function MenuItem({ item, disabled, highlighted, linkStyle }) {
  const menuItemRef = (0, import_react7.useRef)(null);
  const isCheckbox = isCheckboxItem(item);
  const isCurrentBreadcrumb = !isCheckbox && item.isCurrentBreadcrumb;
  (0, import_react7.useEffect)(() => {
    if (highlighted && menuItemRef.current) {
      menuItemRef.current.focus();
    }
  }, [highlighted]);
  const isDisabledWithReason = disabled && item.disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const menuItemProps = Object.assign(Object.assign({
    "aria-label": item.ariaLabel,
    className: clsx_m_default(styles_css_default6["menu-item"], styles_css_default5["menu-item"], linkStyle && styles_css_default6["link-style"], linkStyle && highlighted && styles_css_default6["link-style-highlighted"], isCurrentBreadcrumb && styles_css_default6["current-breadcrumb"]),
    "aria-current": isCurrentBreadcrumb,
    lang: item.lang,
    ref: menuItemRef,
    // We are using the roving tabindex technique to manage the focus state of the dropdown.
    // The current element will always have tabindex=0 which means that it can be tabbed to,
    // while all other items have tabindex=-1 so we can focus them when necessary.
    tabIndex: highlighted ? 0 : -1
  }, isCheckbox ? getMenuItemCheckboxProps({ disabled, checked: item.checked }) : getMenuItemProps({ disabled })), isDisabledWithReason ? targetProps : {});
  const menuItem = isLinkItem(item) ? import_react7.default.createElement(
    "a",
    Object.assign({}, menuItemProps, { href: !disabled ? item.href : void 0, target: getItemTarget(item), rel: item.external ? "noopener noreferrer" : void 0 }),
    import_react7.default.createElement(MenuItemContent, { item, disabled })
  ) : import_react7.default.createElement(
    "span",
    Object.assign({}, menuItemProps),
    import_react7.default.createElement(MenuItemContent, { item, disabled })
  );
  const { position } = useDropdownContext();
  const tooltipPosition = position === "bottom-left" || position === "top-left" ? "left" : "right";
  return isDisabledWithReason ? import_react7.default.createElement(
    Tooltip,
    { content: item.disabledReason, position: tooltipPosition, className: styles_css_default6["item-tooltip-wrapper"] },
    menuItem,
    descriptionEl
  ) : menuItem;
}
var MenuItemContent = ({ item, disabled }) => {
  const hasIcon = !!(item.iconName || item.iconUrl || item.iconSvg);
  const hasExternal = isLinkItem(item) && item.external;
  const isCheckbox = isCheckboxItem(item);
  return import_react7.default.createElement(
    import_react7.default.Fragment,
    null,
    isCheckbox && import_react7.default.createElement(MenuItemCheckmark, { checked: item.checked, disabled }),
    hasIcon && import_react7.default.createElement(MenuItemIcon, { name: item.iconName, url: item.iconUrl, svg: item.iconSvg, alt: item.iconAlt, badge: item.badge }),
    item.text,
    hasExternal && import_react7.default.createElement(ExternalIcon, { disabled, ariaLabel: item.externalIconAriaLabel })
  );
};
var MenuItemIcon = (props) => import_react7.default.createElement(
  "span",
  { className: styles_css_default6.icon },
  import_react7.default.createElement(internal_default, Object.assign({}, props))
);
var MenuItemCheckmark = ({ disabled, checked }) => {
  const checkmark = import_react7.default.createElement(internal_default, { variant: disabled ? "disabled" : "normal", name: "check" });
  return import_react7.default.createElement("span", { className: clsx_m_default(styles_css_default6.icon, styles_css_default6.checkmark, { [styles_css_default6.disabled]: disabled }), "aria-hidden": "true", style: { visibility: checked ? "visible" : "hidden" } }, checkmark);
};
var ExternalIcon = ({ disabled, ariaLabel }) => {
  const icon = import_react7.default.createElement(internal_default, { variant: disabled ? "disabled" : "normal", name: "external" });
  return import_react7.default.createElement("span", { className: styles_css_default6["external-icon"], role: ariaLabel ? "img" : void 0, "aria-label": ariaLabel }, icon);
};
var item_element_default = ItemElement;

// ../node_modules/@cloudscape-design/components/button-dropdown/items-list.js
function ItemsList({ items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, categoryDisabled = false, hasExpandableGroups = false, hasCategoryHeader = false, expandToViewport = false, variant = "normal", analyticsMetadataTransformer, position, linkStyle }) {
  const isMobile = useMobile();
  const elements = items.map((item, index) => {
    var _a, _b, _c, _d;
    if (!isItemGroup(item)) {
      const showDivider = index === items.length - 1 && !lastInDropdown || isItemGroup(items[index + 1]);
      return import_react8.default.createElement(item_element_default, { key: index, item, onItemActivate, disabled: (_a = item.disabled) !== null && _a !== void 0 ? _a : categoryDisabled, highlighted: isHighlighted(item), isKeyboardHighlighted: isKeyboardHighlight(item), highlightItem, showDivider, hasCategoryHeader, variant, position: `${position ? `${position},` : ""}${index + 1}`, analyticsMetadataTransformer, linkStyle });
    }
    if (hasExpandableGroups) {
      return item.text ? isMobile ? import_react8.default.createElement(mobile_expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: lastInDropdown && index === items.length - 1, highlightItem, disabled: (_b = item.disabled) !== null && _b !== void 0 ? _b : false, variant, position: `${position ? `${position},` : ""}${index + 1}` }) : import_react8.default.createElement(expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: true, highlightItem, disabled: (_c = item.disabled) !== null && _c !== void 0 ? _c : false, expandToViewport, variant, position: `${position ? `${position},` : ""}${index + 1}` }) : null;
    }
    return import_react8.default.createElement(category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: lastInDropdown && index === items.length - 1, highlightItem, disabled: (_d = item.disabled) !== null && _d !== void 0 ? _d : false, variant, position: `${position ? `${position},` : ""}${index + 1}` });
  });
  return import_react8.default.createElement(import_react8.default.Fragment, null, elements);
}

// ../node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
var import_react9 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/button-dropdown/utils/move-highlight.js
function moveHighlight({ startIndex, expandedIndex, getNext, hasExpandableGroups, isInRestrictedView }) {
  const tryMove = (currentIndex) => {
    var _a;
    const next = getNext(currentIndex);
    if (!next) {
      return null;
    }
    if (((_a = next.parent) === null || _a === void 0 ? void 0 : _a.disabled) && hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (isItemGroup(next.item) && !hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && !isInRestrictedView && !isSameParent(startIndex, next.index)) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && isInRestrictedView && !isSameLevel(next.index, expandedIndex) && !isIncluded(expandedIndex, next.index)) {
      return tryMove(next.index);
    }
    return next.index;
  };
  return tryMove(startIndex);
}
function isSameParent(left, right) {
  return indexEquals(left.slice(0, -1), right.slice(0, -1));
}
function isSameLevel(left, right) {
  return left.length === right.length;
}
function isIncluded(parent, child) {
  return indexEquals(parent, child.slice(0, -1));
}

// ../node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
function useHighlightedMenu({ items, hasExpandableGroups, isInRestrictedView = false }) {
  const [targetIndex, setTargetIndex] = (0, import_react9.useState)([]);
  const [expandedIndex, setExpandedIndex] = (0, import_react9.useState)([]);
  const [isUsingMouse, setIsUsingMouse] = (0, import_react9.useState)(true);
  const { getItem, getItemIndex, getSequentialIndex, getParentIndex } = (0, import_react9.useMemo)(() => createItemsTree(items), [items]);
  const targetItem = (0, import_react9.useMemo)(() => getItem(targetIndex), [targetIndex, getItem]);
  const isHighlighted = (0, import_react9.useCallback)((item) => {
    const index = getItemIndex(item);
    return indexIncludes(index, targetIndex);
  }, [targetIndex, getItemIndex]);
  const isKeyboardHighlight = (0, import_react9.useCallback)((item) => {
    const index = getItemIndex(item);
    return !isUsingMouse && indexEquals(index, targetIndex);
  }, [targetIndex, getItemIndex, isUsingMouse]);
  const isExpanded = (0, import_react9.useCallback)((group) => {
    const index = getItemIndex(group);
    return indexIncludes(index, expandedIndex);
  }, [expandedIndex, getItemIndex]);
  const moveHighlight2 = (0, import_react9.useCallback)((direction) => {
    const getNext = (index) => {
      const nextIndex2 = getSequentialIndex(index, direction);
      const item = getItem(nextIndex2 || [-1]);
      if (!nextIndex2 || !item) {
        return null;
      }
      const parentIndex = getParentIndex(item);
      const parentItem = parentIndex && getItem(parentIndex);
      return { index: nextIndex2, item, parent: parentItem || void 0 };
    };
    const nextIndex = moveHighlight({
      startIndex: targetIndex,
      expandedIndex,
      getNext,
      hasExpandableGroups,
      isInRestrictedView
    });
    if (nextIndex) {
      setTargetIndex(nextIndex);
    }
  }, [targetIndex, expandedIndex, getItem, getSequentialIndex, getParentIndex, hasExpandableGroups, isInRestrictedView]);
  const highlightItem = (0, import_react9.useCallback)((item) => {
    setTargetIndex(getItemIndex(item));
  }, [getItemIndex]);
  const expandGroup = (0, import_react9.useCallback)((group) => {
    const groupIndex = group ? getItemIndex(group) : targetIndex;
    const firstChildIndex = [...groupIndex, 0];
    setTargetIndex(isInRestrictedView ? groupIndex : firstChildIndex);
    setExpandedIndex(groupIndex);
  }, [targetIndex, getItemIndex, isInRestrictedView]);
  const collapseGroup = (0, import_react9.useCallback)(() => {
    if (expandedIndex.length > 0) {
      setTargetIndex(expandedIndex);
      setExpandedIndex(expandedIndex.slice(0, -1));
    }
  }, [expandedIndex]);
  const reset = (0, import_react9.useCallback)(() => {
    setTargetIndex([]);
    setExpandedIndex([]);
  }, []);
  return {
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    moveHighlight: moveHighlight2,
    highlightItem,
    expandGroup,
    collapseGroup,
    reset,
    setIsUsingMouse
  };
}

// ../node_modules/@cloudscape-design/components/button-dropdown/utils/use-button-dropdown.js
function useButtonDropdown({ items, onItemClick, onItemFollow, onReturnFocus, hasExpandableGroups, isInRestrictedView = false, expandToViewport = false }) {
  const { targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, moveHighlight: moveHighlight2, expandGroup, collapseGroup, reset, setIsUsingMouse } = useHighlightedMenu({
    items,
    hasExpandableGroups,
    isInRestrictedView
  });
  const _a = useOpenState({ onClose: reset }), { isOpen, closeDropdown } = _a, openStateProps = __rest(_a, ["isOpen", "closeDropdown"]);
  const toggleDropdown = (options = {}) => {
    var _a2;
    const moveHighlightOnOpen = (_a2 = options.moveHighlightOnOpen) !== null && _a2 !== void 0 ? _a2 : true;
    if (!isOpen && moveHighlightOnOpen) {
      moveHighlight2(1);
    }
    openStateProps.toggleDropdown();
  };
  const onGroupToggle = (item) => !isExpanded(item) ? expandGroup(item) : collapseGroup();
  const onItemActivate = (item, event) => {
    const isCheckbox = isCheckboxItem(item);
    const isLink = isLinkItem(item);
    const details = {
      id: item.id || "undefined",
      href: isLink ? item.href : void 0,
      external: isLink ? item.external : void 0,
      target: isLink ? getItemTarget(item) : void 0,
      checked: isCheckbox ? !item.checked : void 0
    };
    onReturnFocus();
    if (onItemFollow && isLink && isPlainLeftClick(event)) {
      fireCancelableEvent(onItemFollow, details, event);
    }
    if (onItemClick) {
      fireCancelableEvent(onItemClick, details, event);
    }
    closeDropdown();
  };
  const doVerticalNavigation = (direction) => {
    if (isOpen) {
      moveHighlight2(direction);
    }
  };
  const openAndSelectFirst = (event) => {
    toggleDropdown();
    event.preventDefault();
  };
  const actOnParentDropdown = (event) => {
    if (!targetItem) {
      if (isOpen && !isInRestrictedView) {
        toggleDropdown();
      } else {
        openAndSelectFirst(event);
      }
    } else {
      if (isItemGroup(targetItem)) {
        onGroupToggle(targetItem, event);
      } else {
        onItemActivate(targetItem, event);
      }
    }
  };
  const activate = (event, isEnter) => {
    setIsUsingMouse(false);
    if (targetItem && isLinkItem(targetItem) && isEnter) {
      return;
    }
    event.preventDefault();
    actOnParentDropdown(event);
  };
  const onKeyDown = (event) => {
    setIsUsingMouse(false);
    switch (event.keyCode) {
      case KeyCode.down: {
        doVerticalNavigation(1);
        event.preventDefault();
        break;
      }
      case KeyCode.up: {
        doVerticalNavigation(-1);
        event.preventDefault();
        break;
      }
      case KeyCode.space: {
        event.preventDefault();
        break;
      }
      case KeyCode.enter: {
        if (!(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
          activate(event, true);
        }
        break;
      }
      case KeyCode.left:
      case KeyCode.right: {
        if (targetItem && !targetItem.disabled && isItemGroup(targetItem) && !isExpanded(targetItem)) {
          expandGroup();
        } else if (hasExpandableGroups) {
          collapseGroup();
        }
        event.preventDefault();
        break;
      }
      case KeyCode.escape: {
        onReturnFocus();
        closeDropdown();
        event.preventDefault();
        if (isOpen) {
          event.stopPropagation();
        }
        break;
      }
      case KeyCode.tab: {
        if (expandToViewport) {
          onReturnFocus();
        }
        closeDropdown();
        break;
      }
    }
  };
  const onKeyUp = (event) => {
    if (event.keyCode === KeyCode.space && !(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
      activate(event);
    }
  };
  return {
    isOpen,
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    highlightItem,
    onKeyDown,
    onKeyUp,
    onItemActivate,
    onGroupToggle,
    toggleDropdown,
    closeDropdown,
    setIsUsingMouse
  };
}

// ../node_modules/@cloudscape-design/components/button-dropdown/internal.js
var InternalButtonDropdown = import_react10.default.forwardRef((_a, ref) => {
  var _b;
  var { items, variant = "normal", loading = false, loadingText, disabled = false, disabledReason, expandableGroups = false, children, onItemClick, onItemFollow, customTriggerBuilder, expandToViewport, ariaLabel, title, description, preferCenter, mainAction, showMainActionOnly, __internalRootRef, analyticsMetadataTransformer, linkStyle, fullWidth } = _a, props = __rest(_a, ["items", "variant", "loading", "loadingText", "disabled", "disabledReason", "expandableGroups", "children", "onItemClick", "onItemFollow", "customTriggerBuilder", "expandToViewport", "ariaLabel", "title", "description", "preferCenter", "mainAction", "showMainActionOnly", "__internalRootRef", "analyticsMetadataTransformer", "linkStyle", "fullWidth"]);
  const isInRestrictedView = useMobile();
  const dropdownId = useUniqueId("dropdown");
  for (const item of items) {
    if (isLinkItem(item)) {
      checkSafeUrl("ButtonDropdown", item.href);
    }
  }
  if (mainAction) {
    checkSafeUrl("ButtonDropdown", mainAction.href);
  }
  if (isDevelopment) {
    if (mainAction && variant !== "primary" && variant !== "normal") {
      warnOnce("ButtonDropdown", 'Main action is only supported for "primary" and "normal" component variant.');
    }
  }
  const isMainAction = mainAction && (variant === "primary" || variant === "normal");
  const isVisualRefresh = useVisualRefresh();
  const { isOpen, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, onKeyDown, onKeyUp, onItemActivate, onGroupToggle, toggleDropdown, closeDropdown, setIsUsingMouse } = useButtonDropdown({
    items,
    onItemClick,
    onItemFollow,
    // Scroll is unnecessary when moving focus back to the dropdown trigger.
    onReturnFocus: () => {
      var _a2;
      return (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus({ preventScroll: true });
    },
    expandToViewport,
    hasExpandableGroups: expandableGroups,
    isInRestrictedView
  });
  const handleMouseEvent = () => {
    setIsUsingMouse(true);
  };
  const baseProps = getBaseProps(props);
  const mainActionRef = (0, import_react10.useRef)(null);
  const triggerRef = (0, import_react10.useRef)(null);
  (0, import_react10.useImperativeHandle)(ref, () => ({
    focus(...args) {
      var _a2;
      (_a2 = (isMainAction ? mainActionRef : triggerRef).current) === null || _a2 === void 0 ? void 0 : _a2.focus(...args);
    },
    focusDropdownTrigger(...args) {
      var _a2;
      (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus(...args);
    }
  }), [mainActionRef, triggerRef, isMainAction]);
  const clickHandler = () => {
    if (!loading && !disabled) {
      toggleDropdown({ moveHighlightOnOpen: !isInRestrictedView });
    }
  };
  const canBeOpened = !loading && !disabled;
  const canBeFullWidth = !!fullWidth && (variant === "primary" || variant === "normal");
  const triggerVariant = variant === "navigation" ? void 0 : variant === "inline-icon" ? "inline-icon" : variant;
  const iconProps = variant === "icon" || variant === "inline-icon" ? {
    iconName: "ellipsis"
  } : {
    iconName: "caret-down-filled",
    iconAlign: "right",
    __iconClass: spinWhenOpen(styles_css_default2, "rotate", canBeOpened && isOpen)
  };
  const baseTriggerProps = Object.assign(Object.assign({ className: clsx_m_default(styles_css_default2["trigger-button"], styles_css_default2["test-utils-button-trigger"], styles_css_default5["trigger-label"]) }, iconProps), {
    variant: triggerVariant,
    loading,
    loadingText,
    disabled,
    disabledReason,
    onClick: (event) => {
      event.preventDefault();
      clickHandler();
    },
    ariaLabel,
    ariaExpanded: canBeOpened && isOpen,
    formAction: "none",
    __nativeAttributes: {
      "aria-haspopup": true
    }
  });
  const triggerId = useUniqueId("awsui-button-dropdown__trigger");
  const triggerHasBadge = () => {
    const flatItems = items.flatMap((item) => {
      if ("items" in item) {
        return item.items;
      }
      return item;
    });
    return variant === "icon" && !!(flatItems === null || flatItems === void 0 ? void 0 : flatItems.find((item) => {
      if ("badge" in item) {
        return item.badge;
      }
    }));
  };
  let trigger = null;
  const analyticsMetadata = disabled ? {} : {
    action: "expand",
    detail: {
      expanded: `${!isOpen}`,
      label: `.${styles_css_default5["trigger-label"]}`
    }
  };
  if (customTriggerBuilder) {
    trigger = import_react10.default.createElement("div", Object.assign({ className: styles_css_default2["dropdown-trigger"] }, getAnalyticsMetadataAttribute(analyticsMetadata)), customTriggerBuilder({
      testUtilsClass: styles_css_default2["test-utils-button-trigger"],
      ariaExpanded: canBeOpened && isOpen,
      onClick: clickHandler,
      triggerRef,
      ariaLabel,
      disabled,
      disabledReason,
      isOpen
    }));
  } else if (isMainAction) {
    const { text, iconName, iconAlt, iconSvg, iconUrl, external, externalIconAriaLabel } = mainAction, mainActionProps = __rest(mainAction, ["text", "iconName", "iconAlt", "iconSvg", "iconUrl", "external", "externalIconAriaLabel"]);
    const mainActionIconProps = external ? { iconName: "external", iconAlign: "right", target: "_blank", rel: "noopener noreferrer" } : { iconName, iconAlt, iconSvg, iconUrl };
    const mainActionAriaLabel = externalIconAriaLabel ? `${(_b = mainAction.ariaLabel) !== null && _b !== void 0 ? _b : mainAction.text} ${mainAction.externalIconAriaLabel}` : mainAction.ariaLabel;
    const hasNoText = !text;
    const mainActionButton = import_react10.default.createElement(InternalButton, Object.assign({ ref: mainActionRef }, mainActionProps, mainActionIconProps, { fullWidth: canBeFullWidth, className: clsx_m_default(styles_css_default2["trigger-button"], hasNoText && styles_css_default2["has-no-text"], isVisualRefresh && styles_css_default2["visual-refresh"], canBeFullWidth && styles_css_default2["main-action-full-width"]), variant, ariaLabel: mainActionAriaLabel, formAction: "none" }), text);
    trigger = import_react10.default.createElement(
      "div",
      { role: "group", "aria-label": ariaLabel, className: styles_css_default2["split-trigger-wrapper"] },
      import_react10.default.createElement("div", Object.assign({
        className: clsx_m_default(styles_css_default2["trigger-item"], styles_css_default2["split-trigger"], styles_css_default2[`variant-${variant}`], mainActionProps.disabled && styles_css_default2.disabled, mainActionProps.loading && styles_css_default2.loading),
        // Close dropdown upon main action click unless event is cancelled.
        onClick: closeDropdown,
        // Prevent keyboard events from propagation to the button dropdown handler.
        onKeyDown: (e) => e.stopPropagation(),
        onKeyUp: (e) => e.stopPropagation()
      }, getAnalyticsMetadataAttribute({
        action: "click",
        detail: {
          label: `.${styles_css_default5["main-action-label"]}`
        }
      })), mainActionButton),
      !showMainActionOnly && import_react10.default.createElement(
        "div",
        Object.assign({ className: clsx_m_default(styles_css_default2["trigger-item"], styles_css_default2["dropdown-trigger"], isVisualRefresh && styles_css_default2["visual-refresh"], styles_css_default2[`variant-${variant}`], baseTriggerProps.disabled && styles_css_default2.disabled, baseTriggerProps.loading && styles_css_default2.loading) }, getAnalyticsMetadataAttribute(analyticsMetadata)),
        import_react10.default.createElement(InternalButton, Object.assign({ ref: triggerRef }, baseTriggerProps, { className: clsx_m_default(baseTriggerProps.className, {
          [styles_css_default2["main-action-trigger-full-width"]]: canBeFullWidth
        }), __emitPerformanceMarks: false }), children)
      )
    );
  } else {
    trigger = import_react10.default.createElement(
      "div",
      Object.assign({ className: styles_css_default2["dropdown-trigger"] }, getAnalyticsMetadataAttribute(analyticsMetadata)),
      import_react10.default.createElement(InternalButton, Object.assign({ ref: triggerRef, id: triggerId }, baseTriggerProps, { className: clsx_m_default(baseTriggerProps.className, {
        [styles_css_default2["full-width"]]: canBeFullWidth,
        [styles_css_default2.loading]: canBeFullWidth && !!loading
      }), badge: triggerHasBadge(), fullWidth }), children)
    );
  }
  const hasHeader = title || description;
  const headerId = useUniqueId("awsui-button-dropdown__header");
  const shouldLabelWithTrigger = !ariaLabel && !mainAction && variant !== "icon" && variant !== "inline-icon";
  const { loadingButtonCount } = useFunnel();
  (0, import_react10.useEffect)(() => {
    if (loading) {
      loadingButtonCount.current++;
      return () => {
        loadingButtonCount.current--;
      };
    }
  }, [loading, loadingButtonCount]);
  return import_react10.default.createElement(
    "div",
    Object.assign({}, baseProps, { onKeyDown, onKeyUp, onMouseDown: handleMouseEvent, onMouseMove: handleMouseEvent, className: clsx_m_default(styles_css_default2["button-dropdown"], styles_css_default2[`variant-${variant}`], canBeFullWidth && styles_css_default2["full-width"], baseProps.className), "aria-owns": expandToViewport && isOpen ? dropdownId : void 0, ref: __internalRootRef }),
    import_react10.default.createElement(
      dropdown_default,
      { open: canBeOpened && isOpen, stretchWidth: false, stretchTriggerHeight: variant === "navigation", expandToViewport, preferCenter, onDropdownClose: () => toggleDropdown(), trigger, dropdownId },
      hasHeader && import_react10.default.createElement(
        "div",
        { className: styles_css_default2.header, id: headerId },
        title && import_react10.default.createElement(
          "div",
          { className: styles_css_default2.title },
          import_react10.default.createElement(InternalBox, { fontSize: "heading-s", fontWeight: "bold", color: "inherit", tagOverride: "h2", margin: { vertical: "n", horizontal: "n" } }, title)
        ),
        description && import_react10.default.createElement(
          InternalBox,
          { fontSize: "body-s" },
          import_react10.default.createElement("span", { className: styles_css_default2.description }, description)
        )
      ),
      import_react10.default.createElement(
        options_list_default,
        { open: canBeOpened && isOpen, position: "static", role: "menu", decreaseBlockMargin: true, ariaLabel, ariaLabelledby: hasHeader ? headerId : shouldLabelWithTrigger ? triggerId : void 0, statusType: "finished" },
        import_react10.default.createElement(ItemsList, { items, onItemActivate, onGroupToggle, hasExpandableGroups: expandableGroups, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: true, highlightItem, expandToViewport, variant, analyticsMetadataTransformer, linkStyle })
      )
    )
  );
});
var internal_default2 = InternalButtonDropdown;

export {
  InternalBox,
  spinWhenOpen,
  isLinkItem,
  hasCheckboxItems,
  styles_css_default2 as styles_css_default,
  internal_default2 as internal_default
};
//# sourceMappingURL=chunk-Z3CDKIOS.js.map
