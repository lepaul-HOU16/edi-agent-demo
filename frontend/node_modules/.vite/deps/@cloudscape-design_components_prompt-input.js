import {
  convertAutoComplete
} from "./chunk-7IEBUIP7.js";
import {
  internal_default
} from "./chunk-KFOOYN5R.js";
import "./chunk-WAJJAPY2.js";
import "./chunk-BPNZDXD5.js";
import "./chunk-BOBTJSWI.js";
import "./chunk-QUGP2XCS.js";
import {
  fireKeyboardEvent,
  fireNonCancelableEvent
} from "./chunk-VOJL5FZQ.js";
import "./chunk-MPPGLDEP.js";
import "./chunk-CCBYTID7.js";
import {
  useFormFieldContext
} from "./chunk-X6YNYP2P.js";
import {
  lineHeightBodyM,
  spaceScaledXxs,
  spaceXxs,
  spaceXxxs
} from "./chunk-LSG22TNR.js";
import "./chunk-G4E5S7N7.js";
import "./chunk-XQ7LOIJ7.js";
import "./chunk-3YAZCWEI.js";
import "./chunk-3AQDIJNT.js";
import "./chunk-UO4K3KY5.js";
import {
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  useBaseComponent,
  useDensityMode,
  useVisualRefresh
} from "./chunk-TACQRHRS.js";
import {
  __rest
} from "./chunk-FA3WS4TG.js";
import "./chunk-IOW5GAHV.js";
import {
  require_react
} from "./chunk-NNXGX6WR.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// ../node_modules/@cloudscape-design/components/prompt-input/index.js
var import_react2 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/prompt-input/internal.js
var import_react = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/prompt-input/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/prompt-input/styles.scoped.css";
var styles_css_default = {
  "root": "awsui_root_55fkh_14pjo_146",
  "textarea-readonly": "awsui_textarea-readonly_55fkh_14pjo_185",
  "disabled": "awsui_disabled_55fkh_14pjo_190",
  "textarea-invalid": "awsui_textarea-invalid_55fkh_14pjo_198",
  "textarea-warning": "awsui_textarea-warning_55fkh_14pjo_223",
  "textarea": "awsui_textarea_55fkh_14pjo_185",
  "invalid": "awsui_invalid_55fkh_14pjo_323",
  "warning": "awsui_warning_55fkh_14pjo_323",
  "textarea-wrapper": "awsui_textarea-wrapper_55fkh_14pjo_342",
  "button": "awsui_button_55fkh_14pjo_346",
  "action-button": "awsui_action-button_55fkh_14pjo_351",
  "secondary-content": "awsui_secondary-content_55fkh_14pjo_376",
  "with-paddings": "awsui_with-paddings_55fkh_14pjo_411",
  "secondary-actions": "awsui_secondary-actions_55fkh_14pjo_421",
  "buffer": "awsui_buffer_55fkh_14pjo_474"
};

// ../node_modules/@cloudscape-design/components/prompt-input/test-classes/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/prompt-input/test-classes/styles.scoped.css";
var styles_css_default2 = {
  "root": "awsui_root_nr3gs_n93je_5",
  "textarea": "awsui_textarea_nr3gs_n93je_9",
  "action-button": "awsui_action-button_nr3gs_n93je_13",
  "secondary-actions": "awsui_secondary-actions_nr3gs_n93je_17",
  "secondary-content": "awsui_secondary-content_nr3gs_n93je_21"
};

// ../node_modules/@cloudscape-design/components/prompt-input/internal.js
var InternalPromptInput = import_react.default.forwardRef((_a, ref) => {
  var { value, actionButtonAriaLabel, actionButtonIconName, actionButtonIconUrl, actionButtonIconSvg, actionButtonIconAlt, ariaLabel, autoComplete, autoFocus, disableActionButton, disableBrowserAutocorrect, disabled, maxRows, minRows, name, onAction, onBlur, onChange, onFocus, onKeyDown, onKeyUp, placeholder, readOnly, spellcheck, secondaryActions, secondaryContent, disableSecondaryActionsPaddings, disableSecondaryContentPaddings, __internalRootRef = null } = _a, rest = __rest(_a, ["value", "actionButtonAriaLabel", "actionButtonIconName", "actionButtonIconUrl", "actionButtonIconSvg", "actionButtonIconAlt", "ariaLabel", "autoComplete", "autoFocus", "disableActionButton", "disableBrowserAutocorrect", "disabled", "maxRows", "minRows", "name", "onAction", "onBlur", "onChange", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "spellcheck", "secondaryActions", "secondaryContent", "disableSecondaryActionsPaddings", "disableSecondaryContentPaddings", "__internalRootRef"]);
  const { ariaLabelledby, ariaDescribedby, controlId, invalid, warning } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const textareaRef = (0, import_react.useRef)(null);
  const isRefresh = useVisualRefresh();
  const isCompactMode = useDensityMode(textareaRef) === "compact";
  const PADDING = isRefresh ? spaceXxs : spaceXxxs;
  const LINE_HEIGHT = lineHeightBodyM;
  const DEFAULT_MAX_ROWS = 3;
  (0, import_react.useImperativeHandle)(ref, () => ({
    focus(...args) {
      var _a2;
      (_a2 = textareaRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus(...args);
    },
    select() {
      var _a2;
      (_a2 = textareaRef.current) === null || _a2 === void 0 ? void 0 : _a2.select();
    },
    setSelectionRange(...args) {
      var _a2;
      (_a2 = textareaRef.current) === null || _a2 === void 0 ? void 0 : _a2.setSelectionRange(...args);
    }
  }), [textareaRef]);
  const handleKeyDown = (event) => {
    fireKeyboardEvent(onKeyDown, event);
    if (event.key === "Enter" && !event.shiftKey) {
      if ("form" in event.target && event.target.form !== null && !event.isDefaultPrevented()) {
        event.target.form.requestSubmit();
      }
      event.preventDefault();
      fireNonCancelableEvent(onAction, { value });
    }
  };
  const handleChange = (event) => {
    fireNonCancelableEvent(onChange, { value: event.target.value });
    adjustTextareaHeight();
  };
  const hasActionButton = actionButtonIconName || actionButtonIconSvg || actionButtonIconUrl;
  const adjustTextareaHeight = (0, import_react.useCallback)(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      const minTextareaHeight = `calc(${LINE_HEIGHT} +  ${spaceScaledXxs} * 2)`;
      if (maxRows === -1) {
        const scrollHeight = `calc(${textareaRef.current.scrollHeight}px)`;
        textareaRef.current.style.height = `max(${scrollHeight}, ${minTextareaHeight})`;
      } else {
        const maxRowsHeight = `calc(${maxRows <= 0 ? DEFAULT_MAX_ROWS : maxRows} * (${LINE_HEIGHT} + ${PADDING} / 2) + ${PADDING})`;
        const scrollHeight = `calc(${textareaRef.current.scrollHeight}px)`;
        textareaRef.current.style.height = `min(max(${scrollHeight}, ${minTextareaHeight}), ${maxRowsHeight})`;
      }
    }
  }, [maxRows, LINE_HEIGHT, PADDING]);
  (0, import_react.useEffect)(() => {
    const handleResize = () => {
      adjustTextareaHeight();
    };
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [adjustTextareaHeight]);
  (0, import_react.useEffect)(() => {
    adjustTextareaHeight();
  }, [value, adjustTextareaHeight, maxRows, isCompactMode]);
  const attributes = {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    "aria-invalid": invalid ? "true" : void 0,
    name,
    placeholder,
    autoFocus,
    className: clsx_m_default(styles_css_default.textarea, styles_css_default2.textarea, {
      [styles_css_default.invalid]: invalid,
      [styles_css_default.warning]: warning
    }),
    autoComplete: convertAutoComplete(autoComplete),
    spellCheck: spellcheck,
    disabled,
    readOnly: readOnly ? true : void 0,
    rows: minRows,
    onKeyDown: handleKeyDown,
    onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)),
    // We set a default value on the component in order to force it into the controlled mode.
    value: value || "",
    onChange: handleChange,
    onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),
    onFocus: onFocus && (() => fireNonCancelableEvent(onFocus))
  };
  if (disableBrowserAutocorrect) {
    attributes.autoCorrect = "off";
    attributes.autoCapitalize = "off";
  }
  const action = import_react.default.createElement(
    "div",
    { className: styles_css_default.button },
    import_react.default.createElement(internal_default, { className: clsx_m_default(styles_css_default["action-button"], styles_css_default2["action-button"]), ariaLabel: actionButtonAriaLabel, disabled: disabled || readOnly || disableActionButton, __focusable: readOnly, iconName: actionButtonIconName, iconUrl: actionButtonIconUrl, iconSvg: actionButtonIconSvg, iconAlt: actionButtonIconAlt, onClick: () => fireNonCancelableEvent(onAction, { value }), variant: "icon" })
  );
  return import_react.default.createElement(
    "div",
    Object.assign({}, baseProps, { "aria-label": ariaLabel, className: clsx_m_default(styles_css_default.root, styles_css_default2.root, baseProps.className, {
      [styles_css_default["textarea-readonly"]]: readOnly,
      [styles_css_default["textarea-invalid"]]: invalid,
      [styles_css_default["textarea-warning"]]: warning && !invalid,
      [styles_css_default.disabled]: disabled
    }), ref: __internalRootRef, role: "region" }),
    secondaryContent && import_react.default.createElement("div", { className: clsx_m_default(styles_css_default["secondary-content"], styles_css_default2["secondary-content"], {
      [styles_css_default["with-paddings"]]: !disableSecondaryContentPaddings,
      [styles_css_default.invalid]: invalid,
      [styles_css_default.warning]: warning
    }) }, secondaryContent),
    import_react.default.createElement(
      "div",
      { className: styles_css_default["textarea-wrapper"] },
      import_react.default.createElement("textarea", Object.assign({ ref: textareaRef, id: controlId }, attributes)),
      hasActionButton && !secondaryActions && action
    ),
    secondaryActions && import_react.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default["secondary-actions"], styles_css_default2["secondary-actions"], {
        [styles_css_default["with-paddings"]]: !disableSecondaryActionsPaddings,
        [styles_css_default.invalid]: invalid,
        [styles_css_default.warning]: warning
      }) },
      secondaryActions,
      import_react.default.createElement("div", { className: styles_css_default.buffer, onClick: () => {
        var _a2;
        return (_a2 = textareaRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      } }),
      hasActionButton && action
    )
  );
});
var internal_default2 = InternalPromptInput;

// ../node_modules/@cloudscape-design/components/prompt-input/index.js
var PromptInput = import_react2.default.forwardRef((_a, ref) => {
  var { autoComplete, autoFocus, disableBrowserAutocorrect, disableActionButton, spellcheck, readOnly, actionButtonIconName, minRows = 1, maxRows = 3 } = _a, props = __rest(_a, ["autoComplete", "autoFocus", "disableBrowserAutocorrect", "disableActionButton", "spellcheck", "readOnly", "actionButtonIconName", "minRows", "maxRows"]);
  const baseComponentProps = useBaseComponent("PromptInput", {
    props: {
      readOnly,
      autoComplete,
      autoFocus,
      disableBrowserAutocorrect,
      disableActionButton,
      spellcheck,
      actionButtonIconName,
      minRows,
      maxRows
    }
  });
  return import_react2.default.createElement(internal_default2, Object.assign({ readOnly, autoComplete, autoFocus, disableBrowserAutocorrect, disableActionButton, spellcheck, actionButtonIconName, minRows, maxRows }, props, baseComponentProps, { ref }));
});
applyDisplayName(PromptInput, "PromptInput");
var prompt_input_default = PromptInput;
export {
  prompt_input_default as default
};
//# sourceMappingURL=@cloudscape-design_components_prompt-input.js.map
