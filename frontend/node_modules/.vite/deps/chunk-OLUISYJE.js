import {
  InfoLinkLabelContext
} from "./chunk-KCXCA4I5.js";
import {
  KeyCode,
  TabTrap,
  Transition,
  checkSafeUrl,
  getFirstFocusable,
  getLastFocusable,
  useSingleTabStopNavigation
} from "./chunk-KFOOYN5R.js";
import {
  fireCancelableEvent,
  fireKeyboardEvent,
  fireNonCancelableEvent,
  isPlainLeftClick,
  useForwardFocus
} from "./chunk-VOJL5FZQ.js";
import {
  internal_default,
  useInternalI18n
} from "./chunk-MPPGLDEP.js";
import {
  useMobile
} from "./chunk-ZRGU2BWH.js";
import {
  getBreakpointValue
} from "./chunk-H4TDFOXZ.js";
import {
  getOverflowParentDimensions,
  getOverflowParents
} from "./chunk-G4E5S7N7.js";
import {
  DATA_ATTR_FUNNEL_VALUE,
  FunnelMetrics,
  getFunnelValueSelector,
  getSubStepAllSelector,
  getTextFromSelector,
  nodeBelongs,
  useFunnel,
  useFunnelStep,
  useFunnelSubStep
} from "./chunk-3YAZCWEI.js";
import {
  useMergeRefs
} from "./chunk-3AQDIJNT.js";
import {
  useUniqueId
} from "./chunk-UO4K3KY5.js";
import {
  ALWAYS_VISUAL_REFRESH,
  clsx_m_default,
  findUpUntil,
  getBaseProps,
  getLogicalBoundingClientRect,
  useCurrentMode,
  useDensityMode,
  useResizeObserver,
  useStableCallback,
  useVisualRefresh
} from "./chunk-TACQRHRS.js";
import {
  __rest
} from "./chunk-FA3WS4TG.js";
import {
  require_react_dom
} from "./chunk-IOW5GAHV.js";
import {
  require_react
} from "./chunk-NNXGX6WR.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// ../node_modules/@cloudscape-design/components/internal/components/visual-context/index.js
var import_react = __toESM(require_react());
var contextMatch = /awsui-context-([\w-]+)/;
function useVisualContext(elementRef) {
  const [value, setValue] = (0, import_react.useState)("");
  (0, import_react.useLayoutEffect)(() => {
    var _a;
    if (elementRef.current) {
      const contextParent = findUpUntil(elementRef.current, (node) => !!node.className.match(contextMatch));
      setValue((_a = contextParent === null || contextParent === void 0 ? void 0 : contextParent.className.match(contextMatch)[1]) !== null && _a !== void 0 ? _a : "");
    }
  }, [elementRef]);
  return value;
}
function getVisualContextClassname(contextName) {
  return `awsui-context-${contextName}`;
}
function VisualContext({ contextName, className, children }) {
  return import_react.default.createElement("div", { className: clsx_m_default(getVisualContextClassname(contextName), className) }, children);
}

// ../node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var import_react3 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// ../node_modules/@cloudscape-design/components/internal/generated/custom-css-properties/index.js
var customCSSPropertiesMap = {
  "maxContentWidth": "--awsui-max-content-width-g964ok",
  "minContentWidth": "--awsui-min-content-width-g964ok",
  "breadcrumbsGap": "--awsui-breadcrumbs-gap-g964ok",
  "contentGapLeft": "--awsui-content-gap-left-g964ok",
  "contentGapRight": "--awsui-content-gap-right-g964ok",
  "contentHeight": "--awsui-content-height-g964ok",
  "contentLayoutDefaultHorizontalPadding": "--awsui-content-layout-default-horizontal-padding-g964ok",
  "contentLayoutMaxContentWidth": "--awsui-content-layout-max-content-width-g964ok",
  "contentLayoutMainGap": "--awsui-content-layout-main-gap-g964ok",
  "defaultMaxContentWidth": "--awsui-default-max-content-width-g964ok",
  "defaultMinContentWidth": "--awsui-default-min-content-width-g964ok",
  "drawerSize": "--awsui-drawer-size-g964ok",
  "footerHeight": "--awsui-footer-height-g964ok",
  "headerGap": "--awsui-header-gap-g964ok",
  "headerHeight": "--awsui-header-height-g964ok",
  "layoutWidth": "--awsui-layout-width-g964ok",
  "mainGap": "--awsui-main-gap-g964ok",
  "mainOffsetLeft": "--awsui-main-offset-left-g964ok",
  "mainTemplateRows": "--awsui-main-template-rows-g964ok",
  "mobileBarHeight": "--awsui-mobile-bar-height-g964ok",
  "notificationsHeight": "--awsui-notifications-height-g964ok",
  "offsetTop": "--awsui-offset-top-g964ok",
  "overlapHeight": "--awsui-overlap-height-g964ok",
  "navigationWidth": "--awsui-navigation-width-g964ok",
  "splitPanelReportedHeaderSize": "--awsui-split-panel-reported-header-size-g964ok",
  "splitPanelReportedSize": "--awsui-split-panel-reported-size-g964ok",
  "splitPanelHeight": "--awsui-split-panel-height-g964ok",
  "splitPanelMinWidth": "--awsui-split-panel-min-width-g964ok",
  "splitPanelMaxWidth": "--awsui-split-panel-max-width-g964ok",
  "toolsMaxWidth": "--awsui-tools-max-width-g964ok",
  "toolsWidth": "--awsui-tools-width-g964ok",
  "toolsAnimationStartingOpacity": "--awsui-tools-animation-starting-opacity-g964ok",
  "contentScrollMargin": "--awsui-content-scroll-margin-g964ok",
  "flashbarStackDepth": "--awsui-flashbar-stack-depth-g964ok",
  "flashbarStackIndex": "--awsui-flashbar-stack-index-g964ok",
  "flashbarStickyBottomMargin": "--awsui-flashbar-sticky-bottom-margin-g964ok",
  "stackedNotificationsBottomMargin": "--awsui-stacked-notifications-bottom-margin-g964ok",
  "stackedNotificationsDefaultBottomMargin": "--awsui-stacked-notifications-default-bottom-margin-g964ok",
  "dropdownDefaultMaxWidth": "--awsui-dropdown-default-max-width-g964ok",
  "spinnerRotatorFrom": "--awsui-spinner-rotator-from-g964ok",
  "spinnerRotatorTo": "--awsui-spinner-rotator-to-g964ok",
  "spinnerLineLeftFrom": "--awsui-spinner-line-left-from-g964ok",
  "spinnerLineLeftTo": "--awsui-spinner-line-left-to-g964ok",
  "spinnerLineRightFrom": "--awsui-spinner-line-right-from-g964ok",
  "spinnerLineRightTo": "--awsui-spinner-line-right-to-g964ok",
  "sliderLabelCount": "--awsui-slider-label-count-g964ok",
  "sliderTickCount": "--awsui-slider-tick-count-g964ok",
  "sliderReferenceColumn": "--awsui-slider-reference-column-g964ok",
  "sliderNextReferenceColumn": "--awsui-slider-next-reference-column-g964ok",
  "sliderMaxStart": "--awsui-slider-max-start-g964ok",
  "sliderMinEnd": "--awsui-slider-min-end-g964ok",
  "sliderRangeInlineSize": "--awsui-slider-range-inline-size-g964ok",
  "sliderTooltipPosition": "--awsui-slider-tooltip-position-g964ok",
  "togglesLeftWidth": "--awsui-toggles-left-width-g964ok",
  "togglesRightWidth": "--awsui-toggles-right-width-g964ok",
  "promptInputMaxRows": "--awsui-prompt-input-max-rows-g964ok",
  "promptInputScrollHeight": "--awsui-prompt-input-scroll-height-g964ok"
};
var custom_css_properties_default = customCSSPropertiesMap;

// ../node_modules/@cloudscape-design/components/internal/hooks/use-portal-mode-classes/index.js
function usePortalModeClasses(ref) {
  const colorMode = useCurrentMode(ref);
  const densityMode = useDensityMode(ref);
  const context = useVisualContext(ref);
  const visualRefreshWithClass = useVisualRefresh() && !ALWAYS_VISUAL_REFRESH;
  return clsx_m_default({
    "awsui-polaris-dark-mode awsui-dark-mode": colorMode === "dark",
    "awsui-polaris-compact-mode awsui-compact-mode": densityMode === "compact",
    "awsui-visual-refresh": visualRefreshWithClass,
    [`awsui-context-${context}`]: context
  });
}

// ../node_modules/@cloudscape-design/components/internal/components/dropdown/context.js
var import_react2 = __toESM(require_react());
var DropdownContext = import_react2.default.createContext({
  position: "bottom-right"
});
function DropdownContextProvider({ children, position = "bottom-right" }) {
  return import_react2.default.createElement(DropdownContext.Provider, { value: { position } }, children);
}
function useDropdownContext() {
  return (0, import_react2.useContext)(DropdownContext);
}

// ../node_modules/@cloudscape-design/components/internal/components/dropdown/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/internal/components/dropdown/styles.scoped.css";
var styles_css_default = {
  "dropdown-content-wrapper": "awsui_dropdown-content-wrapper_qwoo0_pwcss_153",
  "awsui-motion-fade-in-dropdown": "awsui_awsui-motion-fade-in-dropdown_qwoo0_pwcss_1",
  "refresh": "awsui_refresh_qwoo0_pwcss_174",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_qwoo0_pwcss_1",
  "root": "awsui_root_qwoo0_pwcss_199",
  "interior": "awsui_interior_qwoo0_pwcss_232",
  "dropdown": "awsui_dropdown_qwoo0_pwcss_153",
  "use-portal": "awsui_use-portal_qwoo0_pwcss_242",
  "is-empty": "awsui_is-empty_qwoo0_pwcss_288",
  "dropdown-drop-up": "awsui_dropdown-drop-up_qwoo0_pwcss_295",
  "with-limited-width": "awsui_with-limited-width_qwoo0_pwcss_299",
  "dropdown-drop-left": "awsui_dropdown-drop-left_qwoo0_pwcss_302",
  "dropdown-drop-right": "awsui_dropdown-drop-right_qwoo0_pwcss_305",
  "occupy-entire-width": "awsui_occupy-entire-width_qwoo0_pwcss_308",
  "stretch-beyond-trigger-width": "awsui_stretch-beyond-trigger-width_qwoo0_pwcss_311",
  "hide-block-border": "awsui_hide-block-border_qwoo0_pwcss_318",
  "open": "awsui_open_qwoo0_pwcss_327",
  "nowrap": "awsui_nowrap_qwoo0_pwcss_336",
  "dropdown-content": "awsui_dropdown-content_qwoo0_pwcss_153",
  "stretch-trigger-height": "awsui_stretch-trigger-height_qwoo0_pwcss_347"
};

// ../node_modules/@cloudscape-design/components/internal/components/dropdown/dropdown-fit-handler.js
var AVAILABLE_SPACE_RESERVE_DEFAULT = 50;
var AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL = 19;
var AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL = 20;
var getClosestParentDimensions = (element) => {
  const parents = getOverflowParents(element).map((element2) => {
    const { blockSize, inlineSize, insetBlockStart, insetInlineStart } = getLogicalBoundingClientRect(element2);
    return {
      blockSize,
      inlineSize,
      insetBlockStart,
      insetInlineStart
    };
  });
  return parents.shift();
};
var defaultMaxDropdownWidth = getBreakpointValue("xxs");
var getAvailableSpace = ({ trigger, overflowParents, stretchWidth = false, stretchHeight = false, isMobile }) => {
  const availableSpaceReserveVertical = stretchHeight ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const availableSpaceReserveHorizontal = stretchWidth ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { insetBlockEnd: triggerBlockEnd, insetInlineStart: triggerInlineStart, insetInlineEnd: triggerInlineEnd } = getLogicalBoundingClientRect(trigger);
  return overflowParents.reduce(({ blockStart, blockEnd, inlineStart, inlineEnd }, overflowParent) => {
    const offsetTop = triggerBlockEnd - overflowParent.insetBlockStart;
    const currentBlockStart = offsetTop - trigger.offsetHeight - availableSpaceReserveVertical;
    const currentBlockEnd = overflowParent.blockSize - offsetTop - availableSpaceReserveVertical;
    const currentInlineStart = triggerInlineEnd - overflowParent.insetInlineStart - availableSpaceReserveHorizontal;
    const currentInlineEnd = overflowParent.insetInlineStart + overflowParent.inlineSize - triggerInlineStart - availableSpaceReserveHorizontal;
    return {
      blockStart: Math.min(blockStart, currentBlockStart),
      blockEnd: Math.min(blockEnd, currentBlockEnd),
      inlineStart: Math.min(inlineStart, currentInlineStart),
      inlineEnd: Math.min(inlineEnd, currentInlineEnd)
    };
  }, {
    blockStart: Number.MAX_VALUE,
    blockEnd: Number.MAX_VALUE,
    inlineStart: Number.MAX_VALUE,
    inlineEnd: Number.MAX_VALUE
  });
};
var getInteriorAvailableSpace = ({ trigger, overflowParents, isMobile }) => {
  const AVAILABLE_SPACE_RESERVE_VERTICAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const AVAILABLE_SPACE_RESERVE_HORIZONTAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { insetBlockEnd: triggerBlockEnd, insetBlockStart: triggerBlockStart, insetInlineStart: triggerInlineStart, insetInlineEnd: triggerInlineEnd } = getLogicalBoundingClientRect(trigger);
  return overflowParents.reduce(({ blockStart, blockEnd, inlineStart, inlineEnd }, overflowParent) => {
    const currentBlockStart = triggerBlockEnd - overflowParent.insetBlockStart - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentBlockEnd = overflowParent.blockSize - triggerBlockStart + overflowParent.insetBlockStart - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentInlineStart = triggerInlineStart - overflowParent.insetInlineStart - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    const currentInlineEnd = overflowParent.insetInlineStart + overflowParent.inlineSize - triggerInlineEnd - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    return {
      blockStart: Math.min(blockStart, currentBlockStart),
      blockEnd: Math.min(blockEnd, currentBlockEnd),
      inlineStart: Math.min(inlineStart, currentInlineStart),
      inlineEnd: Math.min(inlineEnd, currentInlineEnd)
    };
  }, {
    blockStart: Number.MAX_VALUE,
    blockEnd: Number.MAX_VALUE,
    inlineStart: Number.MAX_VALUE,
    inlineEnd: Number.MAX_VALUE
  });
};
var getWidths = ({ triggerElement, dropdownElement, desiredMinWidth, stretchBeyondTriggerWidth = false }) => {
  const { inlineSize: triggerInlineSize } = getLogicalBoundingClientRect(triggerElement);
  const minWidth = desiredMinWidth ? Math.min(triggerInlineSize, desiredMinWidth) : triggerInlineSize;
  const maxWidth = stretchBeyondTriggerWidth ? Math.max(defaultMaxDropdownWidth, triggerInlineSize) : Number.MAX_VALUE;
  const { inlineSize: requiredWidth } = getLogicalBoundingClientRect(dropdownElement);
  const idealWidth = Math.min(Math.max(requiredWidth, minWidth), maxWidth);
  return { idealWidth, minWidth, triggerInlineSize };
};
var hasEnoughSpaceToStretchBeyondTriggerWidth = ({ triggerElement, dropdownElement, desiredMinWidth, expandToViewport, stretchWidth, stretchHeight, isMobile }) => {
  const overflowParents = getOverflowParentDimensions({
    element: dropdownElement,
    excludeClosestParent: false,
    expandToViewport,
    canExpandOutsideViewport: stretchHeight
  });
  const { idealWidth } = getWidths({
    triggerElement,
    dropdownElement,
    desiredMinWidth,
    stretchBeyondTriggerWidth: true
  });
  const availableSpace = getAvailableSpace({
    trigger: triggerElement,
    overflowParents,
    stretchWidth,
    stretchHeight,
    isMobile
  });
  return idealWidth <= availableSpace.inlineStart || idealWidth <= availableSpace.inlineEnd;
};
var getDropdownPosition = ({ triggerElement, dropdownElement, overflowParents, minWidth: desiredMinWidth, preferCenter = false, stretchWidth = false, stretchHeight = false, isMobile = false, stretchBeyondTriggerWidth = false }) => {
  const availableSpace = getAvailableSpace({
    trigger: triggerElement,
    overflowParents,
    stretchWidth,
    stretchHeight,
    isMobile
  });
  const { idealWidth, minWidth, triggerInlineSize } = getWidths({
    triggerElement,
    dropdownElement,
    desiredMinWidth,
    stretchBeyondTriggerWidth
  });
  let dropInlineStart;
  let insetInlineStart = null;
  let inlineSize = idealWidth;
  if (idealWidth <= availableSpace.inlineEnd) {
    dropInlineStart = false;
  } else if (idealWidth <= availableSpace.inlineStart) {
    dropInlineStart = true;
  } else {
    dropInlineStart = availableSpace.inlineStart > availableSpace.inlineEnd;
    inlineSize = Math.max(availableSpace.inlineStart, availableSpace.inlineEnd, minWidth);
  }
  if (preferCenter) {
    const spillOver = (idealWidth - triggerInlineSize) / 2;
    const availableOutsideLeft = availableSpace.inlineStart - triggerInlineSize;
    const availableOutsideRight = availableSpace.inlineEnd - triggerInlineSize;
    const fitsInCenter = availableOutsideLeft >= spillOver && availableOutsideRight >= spillOver;
    if (fitsInCenter) {
      insetInlineStart = -spillOver;
    }
  }
  const dropBlockStart = availableSpace.blockEnd < dropdownElement.offsetHeight && availableSpace.blockStart > availableSpace.blockEnd;
  const availableHeight = dropBlockStart ? availableSpace.blockStart : availableSpace.blockEnd;
  const croppedHeight = Math.max(stretchHeight ? availableHeight : Math.floor(availableHeight / 31) * 31 + 16, 15);
  return {
    dropBlockStart,
    dropInlineStart,
    insetInlineStart: insetInlineStart === null ? "auto" : `${insetInlineStart}px`,
    blockSize: `${croppedHeight}px`,
    inlineSize: `${inlineSize}px`
  };
};
var getInteriorDropdownPosition = (trigger, dropdown, overflowParents, isMobile) => {
  const availableSpace = getInteriorAvailableSpace({ trigger, overflowParents, isMobile });
  const { insetBlockEnd: triggerBlockEnd, insetBlockStart: triggerBlockStart, inlineSize: triggerInlineSize } = getLogicalBoundingClientRect(trigger);
  const { insetBlockStart: parentDropdownBlockStart, blockSize: parentDropdownHeight } = getClosestParentDimensions(trigger);
  let dropInlineStart;
  let { inlineSize } = getLogicalBoundingClientRect(dropdown);
  const insetBlockStart = triggerBlockStart - parentDropdownBlockStart;
  if (inlineSize <= availableSpace.inlineEnd) {
    dropInlineStart = false;
  } else if (inlineSize <= availableSpace.inlineStart) {
    dropInlineStart = true;
  } else {
    dropInlineStart = availableSpace.inlineStart > availableSpace.inlineEnd;
    inlineSize = Math.max(availableSpace.inlineStart, availableSpace.inlineEnd);
  }
  const insetInlineStart = dropInlineStart ? 0 - inlineSize : triggerInlineSize;
  const dropBlockStart = availableSpace.blockEnd < dropdown.offsetHeight && availableSpace.blockStart > availableSpace.blockEnd;
  const insetBlockEnd = dropBlockStart ? parentDropdownBlockStart + parentDropdownHeight - triggerBlockEnd : 0;
  const availableHeight = dropBlockStart ? availableSpace.blockStart : availableSpace.blockEnd;
  const croppedHeight = Math.floor(availableHeight / 31) * 31 + 16;
  return {
    dropBlockStart,
    dropInlineStart,
    blockSize: `${croppedHeight}px`,
    inlineSize: `${inlineSize}px`,
    insetBlockStart: `${insetBlockStart}px`,
    insetBlockEnd: `${insetBlockEnd}px`,
    insetInlineStart: `${insetInlineStart}px`
  };
};
var calculatePosition = (dropdownElement, triggerElement, verticalContainerElement, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth, stretchBeyondTriggerWidth) => {
  verticalContainerElement.style.maxBlockSize = "";
  dropdownElement.style.inlineSize = "";
  dropdownElement.style.insetBlockStart = "";
  dropdownElement.style.insetBlockEnd = "";
  dropdownElement.style.insetInlineStart = "";
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-left"]);
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-right"]);
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-up"]);
  const overflowParents = getOverflowParentDimensions({
    element: dropdownElement,
    excludeClosestParent: interior,
    expandToViewport,
    canExpandOutsideViewport: stretchHeight
  });
  const position = interior ? getInteriorDropdownPosition(triggerElement, dropdownElement, overflowParents, isMobile) : getDropdownPosition({
    triggerElement,
    dropdownElement,
    overflowParents,
    minWidth,
    preferCenter,
    stretchWidth,
    stretchHeight,
    isMobile,
    stretchBeyondTriggerWidth
  });
  const triggerBox = getLogicalBoundingClientRect(triggerElement);
  return [position, triggerBox];
};

// ../node_modules/@cloudscape-design/components/internal/components/dropdown/dropdown-position.js
function applyDropdownPositionRelativeToViewport({ position, dropdownElement, triggerRect, isMobile }) {
  const useAbsolutePositioning = isMobile;
  const verticalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollTop : 0;
  const horizontalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollLeft : 0;
  dropdownElement.style.position = useAbsolutePositioning ? "absolute" : "fixed";
  if (position.dropBlockStart) {
    dropdownElement.style.insetBlockEnd = `calc(100% - ${verticalScrollOffset + triggerRect.insetBlockStart}px)`;
  } else {
    dropdownElement.style.insetBlockStart = `${verticalScrollOffset + triggerRect.insetBlockEnd}px`;
  }
  if (position.dropInlineStart) {
    dropdownElement.style.insetInlineStart = `calc(${horizontalScrollOffset + triggerRect.insetInlineEnd}px - ${position.inlineSize})`;
  } else {
    dropdownElement.style.insetInlineStart = `${horizontalScrollOffset + triggerRect.insetInlineStart}px`;
  }
}

// ../node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var DropdownContainer = ({ triggerRef, children, renderWithPortal, id, referrerId, open }) => {
  var _a, _b;
  if (!renderWithPortal) {
    return import_react3.default.createElement(import_react3.default.Fragment, null, children);
  }
  if (!open) {
    return null;
  }
  const currentDocument = (_b = (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.ownerDocument) !== null && _b !== void 0 ? _b : document;
  return (0, import_react_dom.createPortal)(import_react3.default.createElement("div", { id, "data-awsui-referrer-id": referrerId }, children), currentDocument.body);
};
var TransitionContent = ({ state, transitionRef, dropdownClasses, stretchWidth, interior, isRefresh, dropdownRef, verticalContainerRef, expandToViewport, stretchBeyondTriggerWidth, header, children, footer, position, open, onMouseDown, id, role, ariaLabelledby, ariaDescribedby }) => {
  const contentRef = useMergeRefs(dropdownRef, transitionRef);
  return import_react3.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default.dropdown, dropdownClasses, {
      [styles_css_default.open]: open,
      [styles_css_default["with-limited-width"]]: !stretchWidth,
      [styles_css_default["hide-block-border"]]: stretchWidth,
      [styles_css_default.interior]: interior,
      [styles_css_default.refresh]: isRefresh,
      [styles_css_default["use-portal"]]: expandToViewport && !interior,
      [styles_css_default["stretch-beyond-trigger-width"]]: stretchBeyondTriggerWidth
    }), ref: contentRef, id, role, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "data-open": open, "data-animating": state !== "exited", "aria-hidden": !open, style: stretchBeyondTriggerWidth ? { [custom_css_properties_default.dropdownDefaultMaxWidth]: `${defaultMaxDropdownWidth}px` } : {}, onMouseDown },
    import_react3.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default["dropdown-content-wrapper"], !header && !children && styles_css_default["is-empty"], isRefresh && styles_css_default.refresh) },
      import_react3.default.createElement(
        "div",
        { ref: verticalContainerRef, className: styles_css_default["dropdown-content"] },
        import_react3.default.createElement(
          DropdownContextProvider,
          { position },
          header,
          children,
          footer
        )
      )
    )
  );
};
var Dropdown = ({ children, trigger, open, onDropdownClose, onMouseDown, header, footer, dropdownId, stretchTriggerHeight = false, stretchWidth = true, stretchHeight = false, stretchToTriggerWidth = true, stretchBeyondTriggerWidth = false, expandToViewport = false, preferCenter = false, interior = false, minWidth, scrollable = true, loopFocus = expandToViewport, onFocus, onBlur, contentKey, dropdownContentId, dropdownContentRole, ariaLabelledby, ariaDescribedby }) => {
  const wrapperRef = (0, import_react3.useRef)(null);
  const triggerRef = (0, import_react3.useRef)(null);
  const dropdownRef = (0, import_react3.useRef)(null);
  const dropdownContainerRef = (0, import_react3.useRef)(null);
  const verticalContainerRef = (0, import_react3.useRef)(null);
  const fixedPosition = (0, import_react3.useRef)(null);
  const isRefresh = useVisualRefresh();
  const dropdownClasses = usePortalModeClasses(triggerRef);
  const [position, setPosition] = (0, import_react3.useState)("bottom-right");
  const isMobile = useMobile();
  const setDropdownPosition = (position2, triggerBox, target, verticalContainer) => {
    const entireWidth = !interior && stretchWidth;
    if (!stretchWidth) {
      verticalContainer.style.maxBlockSize = `${parseInt(position2.blockSize) + 1}px`;
    } else {
      verticalContainer.style.maxBlockSize = position2.blockSize;
    }
    if (entireWidth && !expandToViewport) {
      if (stretchToTriggerWidth) {
        target.classList.add(styles_css_default["occupy-entire-width"]);
      }
    } else {
      target.style.inlineSize = position2.inlineSize;
    }
    if (position2.dropBlockStart && !interior) {
      target.classList.add(styles_css_default["dropdown-drop-up"]);
      if (!expandToViewport) {
        target.style.insetBlockEnd = "100%";
      }
    } else {
      target.classList.remove(styles_css_default["dropdown-drop-up"]);
    }
    target.classList.add(position2.dropInlineStart ? styles_css_default["dropdown-drop-left"] : styles_css_default["dropdown-drop-right"]);
    if (position2.insetInlineStart && position2.insetInlineStart !== "auto") {
      target.style.insetInlineStart = position2.insetInlineStart;
    }
    if (expandToViewport && !interior) {
      applyDropdownPositionRelativeToViewport({
        position: position2,
        dropdownElement: target,
        triggerRect: triggerBox,
        isMobile
      });
      fixedPosition.current = position2;
      return;
    }
    if (interior && isInteriorPosition(position2)) {
      if (position2.dropBlockStart) {
        target.style.insetBlockEnd = position2.insetBlockEnd;
      } else {
        target.style.insetBlockStart = position2.insetBlockStart;
      }
      target.style.insetInlineStart = position2.insetInlineStart;
    }
    if (position2.dropBlockStart && position2.dropInlineStart) {
      setPosition("top-left");
    } else if (position2.dropBlockStart) {
      setPosition("top-right");
    } else if (position2.dropInlineStart) {
      setPosition("bottom-left");
    } else {
      setPosition("bottom-right");
    }
  };
  const isOutsideDropdown = (element) => (!wrapperRef.current || !nodeBelongs(wrapperRef.current, element)) && (!dropdownContainerRef.current || !nodeBelongs(dropdownContainerRef.current, element));
  const focusHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onFocus, event);
    }
  };
  const blurHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onBlur, event);
    }
  };
  const fixStretching = () => {
    const classNameToRemove = styles_css_default["stretch-beyond-trigger-width"];
    if (open && stretchBeyondTriggerWidth && dropdownRef.current && triggerRef.current && dropdownRef.current.classList.contains(classNameToRemove) && !hasEnoughSpaceToStretchBeyondTriggerWidth({
      triggerElement: triggerRef.current,
      dropdownElement: dropdownRef.current,
      desiredMinWidth: minWidth,
      expandToViewport,
      stretchWidth,
      stretchHeight,
      isMobile
    })) {
      dropdownRef.current.classList.remove(classNameToRemove);
    }
  };
  useResizeObserver(() => dropdownRef.current, fixStretching);
  (0, import_react3.useLayoutEffect)(() => {
    const onDropdownOpen = () => {
      if (open && dropdownRef.current && triggerRef.current && verticalContainerRef.current) {
        if (scrollable) {
          dropdownRef.current.classList.add(styles_css_default.nowrap);
        }
        setDropdownPosition(...calculatePosition(dropdownRef.current, triggerRef.current, verticalContainerRef.current, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth, stretchBeyondTriggerWidth), dropdownRef.current, verticalContainerRef.current);
        if (scrollable) {
          dropdownRef.current.classList.remove(styles_css_default.nowrap);
        }
      }
    };
    onDropdownOpen();
    if (open) {
      window.addEventListener("scroll", onDropdownOpen);
      const timeoutId = setTimeout(() => {
        window.removeEventListener("scroll", onDropdownOpen);
      }, 500);
      return () => {
        clearTimeout(timeoutId);
        window.removeEventListener("scroll", onDropdownOpen);
      };
    }
  }, [open, dropdownRef, triggerRef, verticalContainerRef, interior, stretchWidth, isMobile, contentKey]);
  (0, import_react3.useEffect)(() => {
    if (!open) {
      return;
    }
    const clickListener = (event) => {
      const target = event.composedPath ? event.composedPath()[0] : event.target;
      if (!nodeBelongs(dropdownRef.current, target) && !nodeBelongs(triggerRef.current, target)) {
        fireNonCancelableEvent(onDropdownClose);
      }
    };
    window.addEventListener("click", clickListener, true);
    return () => {
      window.removeEventListener("click", clickListener, true);
    };
  }, [open, onDropdownClose]);
  (0, import_react3.useLayoutEffect)(() => {
    if (!expandToViewport || !open) {
      return;
    }
    const updateDropdownPosition = () => {
      if (triggerRef.current && dropdownRef.current && verticalContainerRef.current && fixedPosition.current) {
        applyDropdownPositionRelativeToViewport({
          position: fixedPosition.current,
          dropdownElement: dropdownRef.current,
          triggerRect: getLogicalBoundingClientRect(triggerRef.current),
          isMobile
        });
      }
    };
    updateDropdownPosition();
    const controller = new AbortController();
    window.addEventListener("scroll", updateDropdownPosition, { capture: true, signal: controller.signal });
    window.addEventListener("resize", updateDropdownPosition, { capture: true, signal: controller.signal });
    return () => {
      controller.abort();
    };
  }, [open, expandToViewport, isMobile]);
  const referrerId = useUniqueId();
  return import_react3.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default.root, interior && styles_css_default.interior, stretchTriggerHeight && styles_css_default["stretch-trigger-height"]), ref: wrapperRef, onFocus: focusHandler, onBlur: blurHandler },
    import_react3.default.createElement("div", { id: referrerId, className: clsx_m_default(stretchTriggerHeight && styles_css_default["stretch-trigger-height"]), ref: triggerRef }, trigger),
    import_react3.default.createElement(TabTrap, { focusNextCallback: () => {
      var _a;
      return dropdownRef.current && ((_a = getFirstFocusable(dropdownRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
    }, disabled: !open || !loopFocus }),
    import_react3.default.createElement(
      DropdownContainer,
      { triggerRef, renderWithPortal: expandToViewport && !interior, id: dropdownId, referrerId, open },
      import_react3.default.createElement(Transition, { in: open !== null && open !== void 0 ? open : false, exit: false }, (state, ref) => import_react3.default.createElement(
        "div",
        { ref: dropdownContainerRef },
        import_react3.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a;
          return triggerRef.current && ((_a = getLastFocusable(triggerRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
        }, disabled: !open || !loopFocus }),
        import_react3.default.createElement(TransitionContent, { state, transitionRef: ref, dropdownClasses, open, stretchWidth, interior, header, expandToViewport, stretchBeyondTriggerWidth, footer, onMouseDown, isRefresh, dropdownRef, verticalContainerRef, position, id: dropdownContentId, role: dropdownContentRole, ariaLabelledby, ariaDescribedby }, children),
        import_react3.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a;
          return triggerRef.current && ((_a = getFirstFocusable(triggerRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
        }, disabled: !open || !loopFocus })
      ))
    )
  );
};
var isInteriorPosition = (position) => position.insetBlockEnd !== void 0;
var dropdown_default = Dropdown;

// ../node_modules/@cloudscape-design/components/link/internal.js
var import_react5 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/internal/context/link-default-variant-context.js
var import_react4 = __toESM(require_react());
var defaultValue = {
  defaultVariant: "secondary"
};
var LinkDefaultVariantContext = (0, import_react4.createContext)(defaultValue);

// ../node_modules/@cloudscape-design/components/link/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/link/styles.scoped.css";
var styles_css_default2 = {
  "link": "awsui_link_4c84z_1q0zg_145",
  "variant-secondary": "awsui_variant-secondary_4c84z_1q0zg_211",
  "variant-primary": "awsui_variant-primary_4c84z_1q0zg_246",
  "variant-info": "awsui_variant-info_4c84z_1q0zg_279",
  "variant-value-large": "awsui_variant-value-large_4c84z_1q0zg_314",
  "variant-top-navigation": "awsui_variant-top-navigation_4c84z_1q0zg_346",
  "variant-recovery": "awsui_variant-recovery_4c84z_1q0zg_379",
  "button": "awsui_button_4c84z_1q0zg_412",
  "color-inverted": "awsui_color-inverted_4c84z_1q0zg_447",
  "font-size-body-s": "awsui_font-size-body-s_4c84z_1q0zg_468",
  "font-size-body-m": "awsui_font-size-body-m_4c84z_1q0zg_475",
  "font-size-heading-xs": "awsui_font-size-heading-xs_4c84z_1q0zg_481",
  "font-size-heading-s": "awsui_font-size-heading-s_4c84z_1q0zg_487",
  "font-size-heading-m": "awsui_font-size-heading-m_4c84z_1q0zg_494",
  "font-size-heading-l": "awsui_font-size-heading-l_4c84z_1q0zg_501",
  "font-size-heading-xl": "awsui_font-size-heading-xl_4c84z_1q0zg_508",
  "font-size-display-l": "awsui_font-size-display-l_4c84z_1q0zg_515",
  "font-size-inherit": "awsui_font-size-inherit_4c84z_1q0zg_522",
  "icon-wrapper": "awsui_icon-wrapper_4c84z_1q0zg_530",
  "icon": "awsui_icon_4c84z_1q0zg_530"
};

// ../node_modules/@cloudscape-design/components/link/internal.js
var InternalLink = import_react5.default.forwardRef((_a, ref) => {
  var { variant: providedVariant, fontSize = "body-m", color = "normal", external = false, target, href, rel, ariaLabel, externalIconAriaLabel, onFollow, onClick, children, __internalRootRef = null } = _a, props = __rest(_a, ["variant", "fontSize", "color", "external", "target", "href", "rel", "ariaLabel", "externalIconAriaLabel", "onFollow", "onClick", "children", "__internalRootRef"]);
  checkSafeUrl("Link", href);
  const isButton = !href;
  const { defaultVariant } = (0, import_react5.useContext)(LinkDefaultVariantContext);
  const variant = providedVariant || defaultVariant;
  const specialStyles = ["top-navigation", "link", "recovery"];
  const hasSpecialStyle = specialStyles.indexOf(variant) > -1;
  const i18n = useInternalI18n("link");
  const baseProps = getBaseProps(props);
  const anchorTarget = target !== null && target !== void 0 ? target : external ? "_blank" : void 0;
  const anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === "_blank" ? "noopener noreferrer" : void 0;
  const uniqueId = useUniqueId("link");
  const linkId = useUniqueId("link-self");
  const infoId = useUniqueId("link-info");
  const infoLinkLabelFromContext = (0, import_react5.useContext)(InfoLinkLabelContext);
  const { funnelIdentifier, funnelInteractionId } = useFunnel();
  const { stepIdentifier, stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepIdentifier, subStepSelector, subStepNameSelector } = useFunnelSubStep();
  const fireFunnelEvent = (funnelInteractionId2) => {
    if (variant === "info") {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      FunnelMetrics.helpPanelInteracted({
        funnelIdentifier,
        funnelInteractionId: funnelInteractionId2,
        stepIdentifier,
        stepNumber,
        stepName,
        subStepIdentifier,
        stepNameSelector,
        subStepSelector,
        subStepName,
        subStepNameSelector,
        elementSelector: getFunnelValueSelector(uniqueId),
        subStepAllSelector: getSubStepAllSelector()
      });
    } else if (external) {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      FunnelMetrics.externalLinkInteracted({
        funnelIdentifier,
        funnelInteractionId: funnelInteractionId2,
        stepIdentifier,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepIdentifier,
        subStepSelector,
        subStepName,
        subStepNameSelector,
        elementSelector: getFunnelValueSelector(uniqueId),
        subStepAllSelector: getSubStepAllSelector()
      });
    }
  };
  const fireFollowEvent = (event) => {
    if (funnelInteractionId) {
      fireFunnelEvent(funnelInteractionId);
    }
    fireCancelableEvent(onFollow, { href, external, target: anchorTarget }, event);
  };
  const fireClickEvent = (event) => {
    const { altKey, ctrlKey, metaKey, shiftKey } = event;
    const button = "button" in event ? event.button : 0;
    fireNonCancelableEvent(onClick, { altKey, button, ctrlKey, metaKey, shiftKey });
  };
  const handleLinkClick = (event) => {
    if (isPlainLeftClick(event)) {
      fireFollowEvent(event);
    }
    fireClickEvent(event);
  };
  const handleButtonClick = (event) => {
    fireFollowEvent(event);
    fireClickEvent(event);
  };
  const handleButtonKeyDown = (event) => {
    if (event.keyCode === KeyCode.space || event.keyCode === KeyCode.enter) {
      event.preventDefault();
      fireFollowEvent(event);
      fireClickEvent(event);
    }
  };
  const linkRef = (0, import_react5.useRef)(null);
  const isVisualRefresh = useVisualRefresh();
  useForwardFocus(ref, linkRef);
  const applyButtonStyles = isButton && isVisualRefresh && !hasSpecialStyle;
  const sharedProps = Object.assign(Object.assign({ id: linkId }, baseProps), {
    // https://github.com/microsoft/TypeScript/issues/36659
    ref: useMergeRefs(linkRef, __internalRootRef),
    className: clsx_m_default(styles_css_default2.link, baseProps.className, applyButtonStyles ? styles_css_default2.button : null, styles_css_default2[getVariantStyle(variant)], styles_css_default2[getFontSizeStyle(variant, fontSize)], styles_css_default2[getColorStyle(variant, color)]),
    "aria-label": ariaLabel,
    "aria-labelledby": void 0,
    [DATA_ATTR_FUNNEL_VALUE]: uniqueId
  });
  if (variant === "info" && infoLinkLabelFromContext && !ariaLabel) {
    sharedProps["aria-labelledby"] = `${sharedProps.id} ${infoId} ${infoLinkLabelFromContext}`;
  }
  const renderedExternalIconAriaLabel = i18n("externalIconAriaLabel", externalIconAriaLabel);
  const content = import_react5.default.createElement(
    import_react5.default.Fragment,
    null,
    children,
    external && import_react5.default.createElement(
      "span",
      { className: styles_css_default2["icon-wrapper"] },
      " ",
      import_react5.default.createElement(
        "span",
        { className: styles_css_default2.icon, "aria-label": renderedExternalIconAriaLabel, role: renderedExternalIconAriaLabel ? "img" : void 0 },
        import_react5.default.createElement(internal_default, { name: "external", size: "inherit" })
      )
    ),
    variant === "info" && import_react5.default.createElement("span", { hidden: true, id: infoId }, ":")
  );
  const { tabIndex } = useSingleTabStopNavigation(linkRef, { tabIndex: isButton ? 0 : void 0 });
  if (isButton) {
    return import_react5.default.createElement("a", Object.assign({}, sharedProps, { role: "button", tabIndex, onKeyDown: handleButtonKeyDown, onClick: handleButtonClick }), content);
  }
  return (
    // we dynamically set proper rel in the code above
    // eslint-disable-next-line react/jsx-no-target-blank
    import_react5.default.createElement("a", Object.assign({}, sharedProps, { tabIndex, target: anchorTarget, rel: anchorRel, href, onClick: handleLinkClick }), content)
  );
});
function getVariantStyle(variant) {
  return `variant-${variant.replace(/^awsui-/, "")}`;
}
function getFontSizeStyle(variant, fontSize) {
  switch (variant) {
    case "info":
      return "font-size-body-s";
    case "awsui-value-large":
      return "font-size-display-l";
    default:
      return `font-size-${fontSize}`;
  }
}
function getColorStyle(variant, color) {
  return `color-${variant === "info" ? "normal" : color}`;
}
var internal_default2 = InternalLink;

// ../node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var import_react6 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/internal/components/options-list/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/internal/components/options-list/styles.scoped.css";
var styles_css_default3 = {
  "options-list": "awsui_options-list_19gcf_1fo58_145",
  "options-list-embedded": "awsui_options-list-embedded_19gcf_1fo58_192",
  "decrease-block-margin": "awsui_decrease-block-margin_19gcf_1fo58_199"
};

// ../node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var BOTTOM_TRIGGER_OFFSET = 80;
var getItemIndex = (containerRef, event) => {
  const target = findUpUntil(event.target, (element) => element === containerRef.current || !!element.dataset.mouseTarget);
  const mouseTarget = target === null || target === void 0 ? void 0 : target.dataset.mouseTarget;
  return mouseTarget ? parseInt(mouseTarget) : -1;
};
var OptionsList = (_a, ref) => {
  var { open, statusType, children, nativeAttributes = {}, onKeyDown, onBlur, onFocus, onLoadMore, onMouseUp, onMouseMove, position = "relative", role = "listbox", decreaseBlockMargin = false, ariaLabel, ariaLabelledby, ariaDescribedby, embedded, stickyItemBlockSize } = _a, restProps = __rest(_a, ["open", "statusType", "children", "nativeAttributes", "onKeyDown", "onBlur", "onFocus", "onLoadMore", "onMouseUp", "onMouseMove", "position", "role", "decreaseBlockMargin", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "embedded", "stickyItemBlockSize"]);
  const baseProps = getBaseProps(restProps);
  const menuRef = (0, import_react6.useRef)(null);
  const handleScroll = useStableCallback(() => {
    const scrollContainer = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current;
    if (scrollContainer) {
      const bottomEdgePosition = scrollContainer.scrollTop + scrollContainer.clientHeight;
      const remainingScrollHeight = scrollContainer.scrollHeight - bottomEdgePosition;
      if (remainingScrollHeight < BOTTOM_TRIGGER_OFFSET) {
        fireNonCancelableEvent(onLoadMore);
      }
    }
  });
  (0, import_react6.useEffect)(() => {
    if (open && statusType === "pending") {
      handleScroll();
    }
  }, [open, statusType, handleScroll]);
  const className = clsx_m_default(styles_css_default3["options-list"], {
    [styles_css_default3["decrease-block-margin"]]: decreaseBlockMargin,
    [styles_css_default3["options-list-embedded"]]: embedded
  });
  const mergedRef = useMergeRefs(ref, menuRef);
  return import_react6.default.createElement("ul", Object.assign({}, baseProps, nativeAttributes, { className, ref: mergedRef, style: { position, scrollPaddingBlockStart: stickyItemBlockSize !== null && stickyItemBlockSize !== void 0 ? stickyItemBlockSize : void 0 }, role, onScroll: handleScroll, onKeyDown: (event) => fireKeyboardEvent(onKeyDown, event), onMouseMove: (event) => onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(getItemIndex(menuRef, event)), onMouseUp: (event) => onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(getItemIndex(menuRef, event)), onBlur: (event) => fireNonCancelableEvent(onBlur, { relatedTarget: event.relatedTarget }), onFocus: () => fireNonCancelableEvent(onFocus), tabIndex: embedded ? 0 : -1, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }), open && children);
};
var options_list_default = import_react6.default.forwardRef(OptionsList);

// ../node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-open-state.js
var import_react7 = __toESM(require_react());
var useOpenState = ({ onOpen, onClose, defaultOpen = false }) => {
  const [isOpen, setIsOpen] = (0, import_react7.useState)(defaultOpen);
  const [openedWithKeyboard, setOpenedWithKeyboard] = (0, import_react7.useState)(false);
  const openDropdown = (isKeyboard) => {
    if (!isOpen) {
      setIsOpen(true);
      setOpenedWithKeyboard(!!isKeyboard);
      onOpen === null || onOpen === void 0 ? void 0 : onOpen();
    }
  };
  const closeDropdown = () => {
    if (isOpen) {
      setIsOpen(false);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  };
  const toggleDropdown = () => {
    if (isOpen) {
      closeDropdown();
    } else {
      openDropdown(false);
    }
  };
  return { isOpen, openDropdown, closeDropdown, toggleDropdown, openedWithKeyboard };
};

export {
  getVisualContextClassname,
  VisualContext,
  usePortalModeClasses,
  useDropdownContext,
  dropdown_default,
  defaultValue,
  LinkDefaultVariantContext,
  internal_default2 as internal_default,
  options_list_default,
  useOpenState
};
//# sourceMappingURL=chunk-OLUISYJE.js.map
