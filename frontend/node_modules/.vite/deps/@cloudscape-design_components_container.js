import {
  getExternalProps
} from "./chunk-X7ISPO4A.js";
import {
  InternalContainerAsSubstep
} from "./chunk-UO43OFVZ.js";
import "./chunk-JIFODY3J.js";
import "./chunk-ZRGU2BWH.js";
import "./chunk-H4TDFOXZ.js";
import "./chunk-LSG22TNR.js";
import "./chunk-G4E5S7N7.js";
import "./chunk-XQ7LOIJ7.js";
import {
  FunnelSubStepContext,
  getSubStepNameSelector,
  getSubStepSelector,
  nodeBelongs,
  useFunnel,
  useFunnelStep
} from "./chunk-3YAZCWEI.js";
import "./chunk-3AQDIJNT.js";
import {
  getAnalyticsMetadataAttribute,
  useUniqueId
} from "./chunk-UO4K3KY5.js";
import {
  applyDisplayName,
  getAnalyticsMetadataProps,
  useBaseComponent
} from "./chunk-TACQRHRS.js";
import {
  __awaiter,
  __rest
} from "./chunk-FA3WS4TG.js";
import "./chunk-IOW5GAHV.js";
import {
  require_react
} from "./chunk-NNXGX6WR.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// ../node_modules/@cloudscape-design/components/container/index.js
var import_react2 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/internal/analytics/components/analytics-funnel.js
var import_react = __toESM(require_react());
var AnalyticsFunnelSubStep = ({ children, subStepIdentifier, subStepErrorContext }) => {
  const subStepId = useUniqueId("substep");
  const subStepSelector = getSubStepSelector(subStepId);
  const subStepNameSelector = getSubStepNameSelector(subStepId);
  const subStepRef = (0, import_react.useRef)(null);
  const { subStepCount, onStepChange } = useFunnelStep();
  const mousePressed = (0, import_react.useRef)(false);
  const isFocusedSubStep = (0, import_react.useRef)(false);
  const focusCleanupFunction = (0, import_react.useRef)(void 0);
  const { funnelState, funnelInteractionId } = useFunnel();
  const { stepNumber, stepNameSelector } = useFunnelStep();
  const newContext = {
    subStepIdentifier,
    subStepErrorContext,
    subStepSelector,
    subStepNameSelector,
    subStepId,
    subStepRef,
    mousePressed,
    isFocusedSubStep,
    focusCleanupFunction,
    isNestedSubStep: false
  };
  const inheritedContext = Object.assign(Object.assign({}, (0, import_react.useContext)(FunnelSubStepContext)), { isNestedSubStep: true });
  const isNested = Boolean(inheritedContext.subStepId);
  (0, import_react.useEffect)(() => {
    if (!isNested) {
      subStepCount.current++;
      onStepChange();
      return () => {
        subStepCount.current--;
        onStepChange();
      };
    }
  }, [isNested, subStepCount, onStepChange]);
  const context = isNested ? inheritedContext : newContext;
  (0, import_react.useEffect)(() => {
    if (isNested || !subStepRef.current) {
      return;
    }
    const onMouseDown = () => mousePressed.current = true;
    const onMouseUp = () => __awaiter(void 0, void 0, void 0, function* () {
      var _a;
      mousePressed.current = false;
      if (!isFocusedSubStep.current) {
        return;
      }
      yield new Promise((r) => setTimeout(r, 1));
      if (!subStepRef.current || !document.activeElement || !nodeBelongs(subStepRef.current, document.activeElement)) {
        isFocusedSubStep.current = false;
        (_a = focusCleanupFunction.current) === null || _a === void 0 ? void 0 : _a.call(focusCleanupFunction);
      }
    });
    const controller = new AbortController();
    window.addEventListener("mousedown", onMouseDown, { signal: controller.signal });
    window.addEventListener("mouseup", onMouseUp, { signal: controller.signal });
    return () => {
      controller.abort();
    };
  }, [
    funnelInteractionId,
    funnelState,
    stepNameSelector,
    stepNumber,
    subStepNameSelector,
    subStepSelector,
    focusCleanupFunction,
    isNested,
    subStepRef
  ]);
  return import_react.default.createElement(FunnelSubStepContext.Provider, { value: context }, typeof children === "function" ? children(context) : children);
};

// ../node_modules/@cloudscape-design/components/container/index.js
function Container(_a) {
  var { variant = "default", disableHeaderPaddings = false, disableContentPaddings = false, fitHeight = false } = _a, props = __rest(_a, ["variant", "disableHeaderPaddings", "disableContentPaddings", "fitHeight"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props);
  const baseComponentProps = useBaseComponent("Container", {
    props: {
      disableContentPaddings,
      disableHeaderPaddings,
      fitHeight,
      variant
    },
    metadata: {
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier)
    }
  }, analyticsMetadata);
  const externalProps = getExternalProps(props);
  const analyticsComponentMetadata = {
    name: "awsui.Container",
    label: { root: "self" }
  };
  return import_react2.default.createElement(
    AnalyticsFunnelSubStep,
    { subStepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, subStepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext },
    import_react2.default.createElement(InternalContainerAsSubstep, Object.assign({ variant, disableContentPaddings, disableHeaderPaddings, fitHeight }, props, externalProps, baseComponentProps, getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata })))
  );
}
applyDisplayName(Container, "Container");
export {
  Container as default
};
//# sourceMappingURL=@cloudscape-design_components_container.js.map
