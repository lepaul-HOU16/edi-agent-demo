import {
  StatusIndicator,
  checkbox_icon_default,
  internal_default as internal_default5,
  internal_default2 as internal_default6,
  usePrevious
} from "./chunk-KUXAND3S.js";
import {
  InternalBox,
  internal_default as internal_default7,
  spinWhenOpen
} from "./chunk-Z3CDKIOS.js";
import {
  LinkDefaultVariantContext,
  defaultValue as defaultValue2,
  getVisualContextClassname,
  internal_default as internal_default4,
  usePortalModeClasses
} from "./chunk-OLUISYJE.js";
import {
  AbstractSwitch
} from "./chunk-XEQW7XHV.js";
import {
  InternalFormField
} from "./chunk-LQIVWGCH.js";
import {
  flattenChildren
} from "./chunk-DJZ6PCYE.js";
import {
  InfoLinkLabelContext,
  joinStrings
} from "./chunk-KCXCA4I5.js";
import {
  useContainerBreakpoints
} from "./chunk-MZOGKGDN.js";
import {
  useContainerQuery
} from "./chunk-B3SZGNHM.js";
import "./chunk-7IEBUIP7.js";
import {
  ButtonContext,
  InternalButton,
  KeyCode,
  PopoverBody,
  PopoverContainer,
  Portal,
  SingleTabStopNavigationContext,
  SingleTabStopNavigationProvider,
  Tooltip,
  arrow_default,
  checkSafeUrl,
  defaultValue,
  focus_lock_default,
  getAllFocusables,
  internal_default as internal_default3,
  styles_css_default,
  useDOMAttribute,
  useEffectOnUpdate,
  useHiddenDescription,
  usePerformanceMarks,
  useSingleTabStopNavigation
} from "./chunk-KFOOYN5R.js";
import {
  _assertThisInitialized,
  _setPrototypeOf
} from "./chunk-WAJJAPY2.js";
import "./chunk-BPNZDXD5.js";
import "./chunk-BOBTJSWI.js";
import "./chunk-QUGP2XCS.js";
import {
  fireCancelableEvent,
  fireNonCancelableEvent,
  isPlainLeftClick,
  useForwardFocus
} from "./chunk-VOJL5FZQ.js";
import {
  internal_default,
  internal_default2,
  useInternalI18n
} from "./chunk-MPPGLDEP.js";
import {
  isDevelopment
} from "./chunk-CCBYTID7.js";
import {
  FormFieldContext,
  useFormFieldContext
} from "./chunk-X6YNYP2P.js";
import {
  InternalContainer,
  StickyHeaderContext,
  global_vars_default,
  useContainerHeader
} from "./chunk-UO43OFVZ.js";
import {
  useDebounceCallback
} from "./chunk-JIFODY3J.js";
import {
  useMobile
} from "./chunk-ZRGU2BWH.js";
import "./chunk-H4TDFOXZ.js";
import "./chunk-LSG22TNR.js";
import {
  getOverflowParents,
  scrollElementIntoView
} from "./chunk-G4E5S7N7.js";
import {
  ModalContext
} from "./chunk-XQ7LOIJ7.js";
import {
  ComponentMetrics,
  DATA_ATTR_FUNNEL_KEY,
  DATA_ATTR_RESOURCE_TYPE,
  FUNNEL_KEY_FUNNEL_NAME,
  FUNNEL_KEY_SUBSTEP_NAME,
  FunnelNameSelectorContext,
  PerformanceMetrics,
  getContainingBlock,
  isHTMLElement,
  isSVGElement,
  nodeBelongs,
  useFunnel,
  useFunnelSubStep
} from "./chunk-3YAZCWEI.js";
import {
  useMergeRefs
} from "./chunk-3AQDIJNT.js";
import {
  copyAnalyticsMetadataAttribute,
  getAnalyticsLabelAttribute,
  getAnalyticsMetadataAttribute,
  useRandomId,
  useUniqueId
} from "./chunk-UO4K3KY5.js";
import {
  ResizeObserver,
  applyDisplayName,
  clsx_m_default,
  createSingletonHandler,
  findUpUntil,
  getAnalyticsMetadataProps,
  getBaseProps,
  getGlobalFlag,
  getIsRtl,
  getLogicalBoundingClientRect,
  getLogicalPageX,
  getScrollInlineStart,
  useBaseComponent,
  useResizeObserver,
  useStableCallback,
  useVisualRefresh,
  warnOnce
} from "./chunk-TACQRHRS.js";
import {
  __awaiter,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __rest
} from "./chunk-FA3WS4TG.js";
import {
  require_react_dom
} from "./chunk-IOW5GAHV.js";
import {
  require_react
} from "./chunk-NNXGX6WR.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// ../node_modules/@cloudscape-design/components/s3-resource-selector/index.js
var import_react65 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/index.js
var import_react3 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/search-input.js
var import_react = __toESM(require_react());
var SearchInput = import_react.default.forwardRef((props, ref) => {
  const formFieldContext = useFormFieldContext(props);
  return import_react.default.createElement(internal_default5, Object.assign({ type: "search" }, props, formFieldContext, { ref }));
});

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/use-versions-fetch.js
var import_react2 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/internal/utils/promises.js
var PromiseCancelledSignal = class {
};
function makeCancellable(promise) {
  let cancelled = false;
  const wrapped = promise.then((value) => {
    if (cancelled) {
      throw new PromiseCancelledSignal();
    }
    return value;
  }, (err) => {
    if (cancelled) {
      throw new PromiseCancelledSignal();
    }
    throw err;
  });
  return {
    promise: wrapped,
    cancel: () => {
      cancelled = true;
    },
    isCancelled: () => cancelled
  };
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/validation.js
var SCHEME = "s3://";
var BUCKET_FIRST_CHAR = /^[a-z0-9]{1}/;
var CAPITAL_LETTER = /[A-Z]/;
var DNS_NAME = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;
function checkBucketNameLength(bucketName) {
  return 3 <= bucketName.length && bucketName.length <= 63;
}
function extractBucketName(uri) {
  const [bucketName, ...rest] = uri.replace(SCHEME, "").split("/");
  return [bucketName, rest.join("/")];
}
function validate(uri) {
  if (uri === "") {
    return void 0;
  }
  if (uri.slice(0, SCHEME.length) !== SCHEME) {
    return "validationPathMustBegin";
  }
  const [bucketName] = extractBucketName(uri);
  if (!BUCKET_FIRST_CHAR.test(bucketName)) {
    return "validationBucketLowerCase";
  }
  if (CAPITAL_LETTER.test(bucketName)) {
    return "validationBucketMustNotContain";
  }
  if (!checkBucketNameLength(bucketName)) {
    return "validationBucketLength";
  }
  if (!DNS_NAME.test(bucketName)) {
    return "validationBucketMustComplyDns";
  }
  return void 0;
}
function getErrorText(i18n, i18nStrings, errorCode) {
  return errorCode ? i18n(`i18nStrings.${errorCode}`, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings[errorCode]) : void 0;
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/use-versions-fetch.js
function useVersionsFetch(fetchVersions) {
  const [loading, setLoading] = (0, import_react2.useState)(false);
  const [lastFetchedValue, setLastFetched] = (0, import_react2.useState)("");
  const [versions, setVersions] = (0, import_react2.useState)([]);
  const loadVersions = (uri) => {
    if (uri === lastFetchedValue) {
      return;
    }
    setLastFetched(uri);
    const errorCode = validate(uri);
    const [bucketName, prefix] = extractBucketName(uri);
    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === "/") {
      return;
    }
    setLoading(true);
    const result = makeCancellable(fetchVersions(bucketName, prefix));
    result.promise.then((versions2) => {
      setLoading(false);
      setVersions(versions2.map((version) => ({
        value: version.VersionId,
        label: version.LastModified
      })));
    }, (err) => {
      if (!(err instanceof PromiseCancelledSignal)) {
        setLoading(false);
      }
    });
    return result;
  };
  return {
    loading,
    versions,
    resetVersions: () => setVersions([]),
    // this function is a dependency of useEffect
    loadVersions: useStableCallback(loadVersions)
  };
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/styles.scoped.css";
var styles_css_default2 = {
  "root": "awsui_root_1vtzr_vw06v_9",
  "view-button": "awsui_view-button_1vtzr_vw06v_13",
  "browse-button": "awsui_browse-button_1vtzr_vw06v_17",
  "layout": "awsui_layout_1vtzr_vw06v_21",
  "layout-uri": "awsui_layout-uri_1vtzr_vw06v_33",
  "layout-version": "awsui_layout-version_1vtzr_vw06v_37",
  "layout-divider": "awsui_layout-divider_1vtzr_vw06v_42"
};

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/index.js
var S3InContext = import_react3.default.forwardRef(({ i18nStrings, inputPlaceholder, resource, viewHref, invalid, inputAriaDescribedby, selectableItemsTypes, fetchVersions, onChange, onBrowse }, ref) => {
  const i18n = useInternalI18n("s3-resource-selector");
  const isInputBlurredRef = (0, import_react3.useRef)(true);
  const [isInputTouched, setInputTouched] = (0, import_react3.useState)(false);
  const { versions, loading, loadVersions, resetVersions } = useVersionsFetch(fetchVersions);
  const inputRef = (0, import_react3.useRef)(null);
  useForwardFocus(ref, inputRef);
  const uri = resource.uri;
  const supportsVersions = selectableItemsTypes && selectableItemsTypes.indexOf("versions") > -1;
  const selectedVersion = versions.filter((version) => version.value === resource.versionId)[0] || null;
  function handleUriChange(event) {
    const uri2 = event.detail.value;
    const errorCode = isInputTouched ? validate(uri2) : void 0;
    resetVersions();
    onChange({ uri: uri2 }, getErrorText(i18n, i18nStrings, errorCode));
  }
  function handleUriBlur() {
    isInputBlurredRef.current = true;
    setInputTouched(true);
    const errorCode = validate(resource.uri);
    onChange(resource, getErrorText(i18n, i18nStrings, errorCode));
    if (supportsVersions) {
      loadVersions(resource.uri);
    }
  }
  (0, import_react3.useEffect)(() => {
    var _a;
    if (!isInputBlurredRef.current || !supportsVersions) {
      return;
    }
    const { cancel } = (_a = loadVersions(uri)) !== null && _a !== void 0 ? _a : {};
    return cancel;
  }, [uri, supportsVersions, loadVersions]);
  return import_react3.default.createElement(
    "div",
    { className: styles_css_default2.root },
    import_react3.default.createElement(
      "div",
      { className: styles_css_default2.layout },
      import_react3.default.createElement(
        InternalFormField,
        { className: styles_css_default2["layout-uri"], label: i18n("i18nStrings.inContextUriLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextUriLabel), stretch: true },
        import_react3.default.createElement(SearchInput, { ref: inputRef, value: uri, ariaDescribedby: inputAriaDescribedby, clearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextInputClearAriaLabel, placeholder: inputPlaceholder !== null && inputPlaceholder !== void 0 ? inputPlaceholder : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextInputPlaceholder, onChange: handleUriChange, invalid, onFocus: () => isInputBlurredRef.current = false, onBlur: handleUriBlur })
      ),
      supportsVersions && import_react3.default.createElement(
        InternalFormField,
        { className: styles_css_default2["layout-version"], label: i18n("i18nStrings.inContextVersionSelectLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextVersionSelectLabel), stretch: true },
        import_react3.default.createElement(internal_default6, { selectedOption: selectedVersion, placeholder: i18n("i18nStrings.inContextSelectPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextSelectPlaceholder), disabled: versions.length === 0, options: versions, onChange: (event) => onChange(Object.assign(Object.assign({}, resource), { versionId: event.detail.selectedOption.value }), void 0), invalid: false })
      ),
      import_react3.default.createElement(
        "div",
        null,
        import_react3.default.createElement(InternalButton, { className: styles_css_default2["view-button"], disabled: !viewHref, href: viewHref, target: "_blank", iconName: "external", iconAlign: "right", formAction: "none", ariaLabel: i18n("i18nStrings.inContextViewButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextViewButtonAriaLabel) }, i18n("i18nStrings.inContextViewButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextViewButton))
      ),
      import_react3.default.createElement("div", { className: styles_css_default2["layout-divider"] }),
      import_react3.default.createElement(
        "div",
        null,
        import_react3.default.createElement(InternalButton, { className: styles_css_default2["browse-button"], disabled: loading, formAction: "none", onClick: onBrowse }, i18n("i18nStrings.inContextBrowseButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextBrowseButton))
      )
    ),
    import_react3.default.createElement(internal_default2, { assertive: true }, loading && import_react3.default.createElement(
      InternalBox,
      { margin: { top: "s" } },
      import_react3.default.createElement(StatusIndicator, { type: "loading" }, i18n("i18nStrings.inContextLoadingText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextLoadingText))
    ))
  );
});

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/index.js
var import_react64 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/breadcrumb-group/implementation.js
var import_react9 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/internal/widgets/index.js
var import_react4 = __toESM(require_react());
function createWidgetizedComponent(Implementation, Skeleton) {
  return (Loader) => {
    return (props) => {
      const isRefresh = useVisualRefresh();
      if (isRefresh && getGlobalFlag("appLayoutWidget") && Loader) {
        return import_react4.default.createElement(Loader, Object.assign({ Skeleton }, props));
      }
      return import_react4.default.createElement(Implementation, Object.assign({}, props));
    };
  };
}

// ../node_modules/@cloudscape-design/components/breadcrumb-group/all-items-dropdown.js
var import_react5 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/breadcrumb-group/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/breadcrumb-group/styles.scoped.css";
var styles_css_default3 = {
  "breadcrumb-group": "awsui_breadcrumb-group_d19fg_1p3cd_145",
  "breadcrumb-group-list": "awsui_breadcrumb-group-list_d19fg_1p3cd_180",
  "ghost": "awsui_ghost_d19fg_1p3cd_191",
  "item": "awsui_item_d19fg_1p3cd_196",
  "ghost-item": "awsui_ghost-item_d19fg_1p3cd_197",
  "ellipsis": "awsui_ellipsis_d19fg_1p3cd_198",
  "hide": "awsui_hide_d19fg_1p3cd_209",
  "visible": "awsui_visible_d19fg_1p3cd_215",
  "icon": "awsui_icon_d19fg_1p3cd_219",
  "breadcrumbs-skeleton": "awsui_breadcrumbs-skeleton_d19fg_1p3cd_225",
  "collapsed-button": "awsui_collapsed-button_d19fg_1p3cd_229",
  "button-icon": "awsui_button-icon_d19fg_1p3cd_311",
  "button-icon-open": "awsui_button-icon-open_d19fg_1p3cd_325",
  "hidden": "awsui_hidden_d19fg_1p3cd_329"
};

// ../node_modules/@cloudscape-design/components/breadcrumb-group/all-items-dropdown.js
var metadataTypeAttribute = {
  [DATA_ATTR_RESOURCE_TYPE]: "true"
};
var AllItemsDropdown = ({ items, onItemClick, onItemFollow }) => {
  var _a;
  return import_react5.default.createElement(
    import_react5.default.Fragment,
    null,
    import_react5.default.createElement(internal_default7, { items: items.map((item, index) => {
      const isCurrentBreadcrumb = index === items.length - 1;
      return {
        id: index.toString(),
        text: item.text,
        href: isCurrentBreadcrumb ? void 0 : item.href,
        isCurrentBreadcrumb
      };
    }), customTriggerBuilder: getDropdownTrigger((_a = items[items.length - 1]) === null || _a === void 0 ? void 0 : _a.text), linkStyle: true, fullWidth: true, onItemClick, onItemFollow, analyticsMetadataTransformer: (metadata) => {
      var _a2, _b;
      if ((_a2 = metadata.detail) === null || _a2 === void 0 ? void 0 : _a2.id) {
        delete metadata.detail.id;
      }
      if ((_b = metadata.detail) === null || _b === void 0 ? void 0 : _b.position) {
        metadata.detail.position = `${parseInt(metadata.detail.position, 10) + 1}`;
      }
      return metadata;
    } }),
    items.length > 1 && import_react5.default.createElement("span", Object.assign({ className: styles_css_default3.hidden }, metadataTypeAttribute), items[1].text)
  );
};
var getDropdownTrigger = (currentPage) => ({ ariaLabel, triggerRef, testUtilsClass, isOpen, onClick }) => {
  const metadataAttributes = {
    [DATA_ATTR_FUNNEL_KEY]: FUNNEL_KEY_FUNNEL_NAME
  };
  return import_react5.default.createElement(
    "button",
    Object.assign({ ref: triggerRef }, metadataAttributes, { className: clsx_m_default(styles_css_default3["collapsed-button"], testUtilsClass), onClick: (event) => {
      event.preventDefault();
      onClick();
    }, "aria-expanded": isOpen, "aria-haspopup": true, "aria-label": ariaLabel, formAction: "none" }),
    import_react5.default.createElement(internal_default, { name: "caret-down-filled", className: spinWhenOpen(styles_css_default3, "button-icon", isOpen) }),
    import_react5.default.createElement("span", null, currentPage)
  );
};

// ../node_modules/@cloudscape-design/components/breadcrumb-group/item/item.js
var import_react7 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/breadcrumb-group/utils.js
var getEventDetail = (item) => ({
  item,
  text: item.text,
  href: item.href
});
var MIN_BREADCRUMB_WIDTH = 70;
var ELLIPSIS_WIDTH = 50;
var getItemsDisplayProperties = (itemsWidths, navWidth) => {
  const widthsWithFinalCollapsed = [...itemsWidths];
  widthsWithFinalCollapsed[itemsWidths.length - 1] = Math.min(itemsWidths[itemsWidths.length - 1], MIN_BREADCRUMB_WIDTH);
  return {
    collapsed: computeNumberOfCollapsedItems(widthsWithFinalCollapsed, navWidth)
  };
};
var computeNumberOfCollapsedItems = (itemWidths, navWidth) => {
  if (typeof navWidth !== "number") {
    return 0;
  }
  let usedWidth = itemWidths.reduce((acc, width) => acc + width, 0);
  let collapsedItems = 0;
  while (collapsedItems < itemWidths.length - 1) {
    if (usedWidth <= navWidth) {
      break;
    }
    collapsedItems += 1;
    usedWidth = usedWidth - itemWidths[collapsedItems];
    if (collapsedItems === 1) {
      usedWidth += ELLIPSIS_WIDTH;
    }
  }
  return collapsedItems;
};

// ../node_modules/@cloudscape-design/components/breadcrumb-group/item/funnel.js
var import_react6 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/breadcrumb-group/analytics-metadata/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/breadcrumb-group/analytics-metadata/styles.scoped.css";
var styles_css_default4 = {
  "breadcrumb-item": "awsui_breadcrumb-item_1c68o_b6unx_5"
};

// ../node_modules/@cloudscape-design/components/breadcrumb-group/item/funnel.js
var FunnelBreadcrumbItem = import_react6.default.forwardRef(({ className, text, itemIndex, totalCount, disableAnalytics }, ref) => {
  const funnelAttributes = {};
  if (!disableAnalytics) {
    if (itemIndex === totalCount - 1) {
      funnelAttributes[DATA_ATTR_FUNNEL_KEY] = FUNNEL_KEY_FUNNEL_NAME;
    }
    if (itemIndex === 1) {
      funnelAttributes[DATA_ATTR_RESOURCE_TYPE] = "true";
    }
  }
  return import_react6.default.createElement("span", Object.assign({}, funnelAttributes, { className: clsx_m_default(className, !disableAnalytics && styles_css_default4["breadcrumb-item"]), ref }), text);
});

// ../node_modules/@cloudscape-design/components/breadcrumb-group/item/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/breadcrumb-group/item/styles.scoped.css";
var styles_css_default5 = {
  "link": "awsui_link_1kosq_x3lvk_145",
  "breadcrumb": "awsui_breadcrumb_1kosq_x3lvk_149",
  "ghost-breadcrumb": "awsui_ghost-breadcrumb_1kosq_x3lvk_150",
  "icon": "awsui_icon_1kosq_x3lvk_153",
  "anchor": "awsui_anchor_1kosq_x3lvk_159",
  "text": "awsui_text_1kosq_x3lvk_206",
  "last": "awsui_last_1kosq_x3lvk_225"
};

// ../node_modules/@cloudscape-design/components/breadcrumb-group/item/item.js
var BreadcrumbItemWithPopover = ({ item, isLast, anchorAttributes, itemAttributes, children }) => {
  const [showTooltip, setShowTooltip] = (0, import_react7.useState)(false);
  const textRef = (0, import_react7.useRef)(null);
  return import_react7.default.createElement(
    Item,
    Object.assign({ ref: textRef, isLast, onFocus: () => {
      setShowTooltip(true);
    }, onBlur: () => setShowTooltip(false), onMouseEnter: () => {
      setShowTooltip(true);
    }, onMouseLeave: () => setShowTooltip(false), anchorAttributes }, itemAttributes),
    children,
    showTooltip && import_react7.default.createElement(Tooltip, { trackRef: textRef, value: item.text, size: "medium", onDismiss: () => setShowTooltip(false) })
  );
};
var Item = import_react7.default.forwardRef((_a, ref) => {
  var { anchorAttributes, children, isLast } = _a, itemAttributes = __rest(_a, ["anchorAttributes", "children", "isLast"]);
  return isLast ? import_react7.default.createElement("span", Object.assign({ ref, className: styles_css_default5.anchor }, itemAttributes), children) : import_react7.default.createElement("a", Object.assign({ ref, className: styles_css_default5.anchor }, itemAttributes, anchorAttributes), children);
});
function BreadcrumbItem({ item, itemIndex, totalCount, onClick, onFollow, isGhost = false, isTruncated = false }) {
  const isLast = itemIndex === totalCount - 1;
  const preventDefault = (event) => event.preventDefault();
  const onClickHandler = (event) => {
    if (isPlainLeftClick(event)) {
      fireCancelableEvent(onFollow, getEventDetail(item), event);
    }
    fireCancelableEvent(onClick, getEventDetail(item), event);
  };
  const anchorAttributes = {
    href: item.href || "#",
    onClick: isLast ? preventDefault : onClickHandler,
    tabIndex: 0
  };
  const itemAttributes = {};
  if (isGhost) {
    anchorAttributes.tabIndex = -1;
  }
  if (isLast && !isGhost) {
    itemAttributes["aria-current"] = "page";
    itemAttributes["aria-disabled"] = true;
    itemAttributes.tabIndex = 0;
    itemAttributes.role = "link";
  }
  const breadcrumbItem = import_react7.default.createElement(FunnelBreadcrumbItem, { className: styles_css_default5.text, itemIndex, totalCount, text: item.text, disableAnalytics: isGhost });
  return import_react7.default.createElement(
    "div",
    { className: clsx_m_default(!isGhost && styles_css_default5.breadcrumb, isGhost && styles_css_default5["ghost-breadcrumb"], isLast && styles_css_default5.last) },
    isTruncated && !isGhost ? import_react7.default.createElement(BreadcrumbItemWithPopover, { item, isLast, anchorAttributes, itemAttributes }, breadcrumbItem) : import_react7.default.createElement(Item, Object.assign({ isLast, anchorAttributes }, itemAttributes), breadcrumbItem),
    !isLast ? import_react7.default.createElement(
      "span",
      { className: styles_css_default5.icon },
      import_react7.default.createElement(internal_default, { name: "angle-right" })
    ) : null
  );
}

// ../node_modules/@cloudscape-design/components/breadcrumb-group/skeleton.js
var import_react8 = __toESM(require_react());
var BreadcrumbGroupSkeleton = import_react8.default.forwardRef(({ items }, ref) => import_react8.default.createElement("div", { ref, className: styles_css_default3["breadcrumbs-skeleton"] }, items.map((item, index) => import_react8.default.createElement(FunnelBreadcrumbItem, { itemIndex: index, totalCount: items.length, text: item.text, key: index }))));

// ../node_modules/@cloudscape-design/components/breadcrumb-group/implementation.js
var DEFAULT_EXPAND_ARIA_LABEL = "Show path";
var getEllipsisDropdownTrigger = ({ ariaLabel, triggerRef, testUtilsClass, isOpen, onClick }) => {
  return import_react9.default.createElement(InternalButton, { ref: triggerRef, className: testUtilsClass, onClick: (event) => {
    event.preventDefault();
    onClick();
  }, ariaExpanded: isOpen, "aria-haspopup": true, ariaLabel, variant: "breadcrumb-group", formAction: "none" }, "...");
};
var EllipsisDropdown = ({ ariaLabel, dropdownItems, onDropdownItemClick, onDropdownItemFollow, visible }) => {
  var _a;
  const i18n = useInternalI18n("breadcrumb-group");
  return import_react9.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default3.ellipsis, visible && styles_css_default3.visible) },
    import_react9.default.createElement(internal_default7, { ariaLabel: (_a = i18n("expandAriaLabel", ariaLabel)) !== null && _a !== void 0 ? _a : DEFAULT_EXPAND_ARIA_LABEL, items: dropdownItems, onItemClick: onDropdownItemClick, onItemFollow: onDropdownItemFollow, customTriggerBuilder: getEllipsisDropdownTrigger, linkStyle: true, analyticsMetadataTransformer: (metadata) => {
      var _a2, _b;
      if ((_a2 = metadata.detail) === null || _a2 === void 0 ? void 0 : _a2.id) {
        delete metadata.detail.id;
      }
      if ((_b = metadata.detail) === null || _b === void 0 ? void 0 : _b.position) {
        metadata.detail.position = `${parseInt(metadata.detail.position, 10) + 1}`;
      }
      return metadata;
    } }),
    import_react9.default.createElement(
      "span",
      { className: styles_css_default3.icon },
      import_react9.default.createElement(internal_default, { name: "angle-right" })
    )
  );
};
var areArrayEqual = (first, second) => {
  if (first.length !== second.length) {
    return false;
  }
  return first.every((item, index) => item === second[index]);
};
function BreadcrumbGroupImplementation(_a) {
  var { items = [], ariaLabel, expandAriaLabel, onClick, onFollow, __internalRootRef, __injectAnalyticsComponentMetadata } = _a, props = __rest(_a, ["items", "ariaLabel", "expandAriaLabel", "onClick", "onFollow", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  for (const item of items) {
    checkSafeUrl("BreadcrumbGroup", item.href);
  }
  const baseProps = getBaseProps(props);
  const [navWidth, navRef] = useContainerQuery((rect) => rect.borderBoxWidth);
  const mergedRef = useMergeRefs(navRef, __internalRootRef);
  const itemsRefs = (0, import_react9.useRef)({ ghost: {}, real: {} });
  const setBreadcrumb = (type, index, node) => {
    if (node) {
      itemsRefs.current[type][index] = node;
    } else {
      delete itemsRefs.current[type][index];
    }
  };
  const [itemsWidths, setItemsWidths] = (0, import_react9.useState)({ ghost: [], real: [] });
  (0, import_react9.useEffect)(() => {
    if (itemsRefs.current) {
      const newItemsWidths = { ghost: [], real: [] };
      for (const node of Object.values(itemsRefs.current.ghost)) {
        const width = getLogicalBoundingClientRect(node).inlineSize;
        newItemsWidths.ghost.push(width);
      }
      for (const node of Object.values(itemsRefs.current.real)) {
        const width = getLogicalBoundingClientRect(node).inlineSize;
        newItemsWidths.real.push(width);
      }
      setItemsWidths((oldWidths) => {
        if (!areArrayEqual(newItemsWidths.ghost, oldWidths.ghost) || !areArrayEqual(newItemsWidths.real, oldWidths.real)) {
          return newItemsWidths;
        } else {
          return oldWidths;
        }
      });
    }
  }, [items, navWidth]);
  const { collapsed } = getItemsDisplayProperties(itemsWidths.ghost, navWidth);
  let breadcrumbItems = items.map((item, index) => {
    const isLast = index === items.length - 1;
    const isDisplayed = index === 0 || index > collapsed;
    const clickAnalyticsMetadata = {
      action: "click",
      detail: {
        position: `${index + 1}`,
        label: `.${styles_css_default4["breadcrumb-item"]}`,
        href: item.href || ""
      }
    };
    return import_react9.default.createElement(
      "li",
      Object.assign({ className: clsx_m_default(styles_css_default3.item, !isDisplayed && styles_css_default3.hide), key: index }, isLast ? {} : getAnalyticsMetadataAttribute(clickAnalyticsMetadata), { ref: (node) => setBreadcrumb("real", `${index}`, node) }),
      import_react9.default.createElement(BreadcrumbItem, { item, onClick, onFollow, itemIndex: index, totalCount: items.length, isTruncated: itemsWidths.ghost[index] - itemsWidths.real[index] > 0 })
    );
  });
  const hiddenBreadcrumbItems = items.map((item, index) => import_react9.default.createElement(
    "li",
    { className: styles_css_default3["ghost-item"], key: index, ref: (node) => setBreadcrumb("ghost", `${index}`, node) },
    import_react9.default.createElement(BreadcrumbItem, { item, itemIndex: index, totalCount: items.length, isGhost: true })
  ));
  const getEventItem = (e) => {
    const { id } = e.detail;
    return items[parseInt(id)];
  };
  if (breadcrumbItems.length >= 2) {
    const dropdownItems = items.slice(1, 1 + collapsed).map((item, index) => ({
      id: (index + 1).toString(),
      text: item.text,
      href: item.href || "#"
    }));
    breadcrumbItems = [
      breadcrumbItems[0],
      import_react9.default.createElement(EllipsisDropdown, { key: "ellipsis", visible: collapsed > 0, ariaLabel: expandAriaLabel, dropdownItems, onDropdownItemClick: (e) => fireCancelableEvent(onClick, getEventDetail(getEventItem(e)), e), onDropdownItemFollow: (e) => fireCancelableEvent(onFollow, getEventDetail(getEventItem(e)), e) }),
      ...breadcrumbItems.slice(1)
    ];
  }
  const componentAnalyticsMetadata = {
    name: "awsui.BreadcrumbGroup",
    label: { root: "self" }
  };
  return import_react9.default.createElement(
    "nav",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default3["breadcrumb-group"], baseProps.className), "aria-label": ariaLabel || void 0, ref: mergedRef }, __injectAnalyticsComponentMetadata ? Object.assign({}, getAnalyticsMetadataAttribute({
      component: componentAnalyticsMetadata
    })) : {}),
    collapsed > 0 && collapsed === items.length - 1 ? import_react9.default.createElement(AllItemsDropdown, { items, onItemClick: (e) => e.detail.id !== (items.length - 1).toString() && fireCancelableEvent(onClick, getEventDetail(getEventItem(e)), e), onItemFollow: (e) => e.detail.id !== (items.length - 1).toString() && fireCancelableEvent(onFollow, getEventDetail(getEventItem(e)), e) }) : import_react9.default.createElement("ol", { className: styles_css_default3["breadcrumb-group-list"] }, breadcrumbItems),
    import_react9.default.createElement("ol", { className: clsx_m_default(styles_css_default3["breadcrumb-group-list"], styles_css_default3.ghost), "aria-hidden": true, tabIndex: -1 }, hiddenBreadcrumbItems)
  );
}
var createWidgetizedBreadcrumbGroup = createWidgetizedComponent(BreadcrumbGroupImplementation, BreadcrumbGroupSkeleton);

// ../node_modules/@cloudscape-design/components/modal/internal.js
var import_react14 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/header/internal.js
var import_react11 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/internal/context/collection-label-context.js
var import_react10 = __toESM(require_react());
var CollectionLabelContext = (0, import_react10.createContext)({});

// ../node_modules/@cloudscape-design/components/header/analytics-metadata/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/header/analytics-metadata/styles.scoped.css";
var styles_css_default6 = {
  "heading-text": "awsui_heading-text_105ke_268sp_5"
};

// ../node_modules/@cloudscape-design/components/header/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/header/styles.scoped.css";
var styles_css_default7 = {
  "root": "awsui_root_2qdw9_1rn64_181",
  "refresh": "awsui_refresh_2qdw9_1rn64_217",
  "root-no-actions": "awsui_root-no-actions_2qdw9_1rn64_217",
  "root-variant-h2": "awsui_root-variant-h2_2qdw9_1rn64_220",
  "root-variant-h3": "awsui_root-variant-h3_2qdw9_1rn64_220",
  "root-has-description": "awsui_root-has-description_2qdw9_1rn64_220",
  "root-variant-h1": "awsui_root-variant-h1_2qdw9_1rn64_229",
  "main": "awsui_main_2qdw9_1rn64_239",
  "no-wrap": "awsui_no-wrap_2qdw9_1rn64_249",
  "main-variant-h1": "awsui_main-variant-h1_2qdw9_1rn64_255",
  "actions": "awsui_actions_2qdw9_1rn64_263",
  "actions-centered": "awsui_actions-centered_2qdw9_1rn64_268",
  "actions-variant-h1": "awsui_actions-variant-h1_2qdw9_1rn64_271",
  "actions-variant-h2": "awsui_actions-variant-h2_2qdw9_1rn64_275",
  "actions-variant-h3": "awsui_actions-variant-h3_2qdw9_1rn64_279",
  "title": "awsui_title_2qdw9_1rn64_295",
  "title-variant-h1": "awsui_title-variant-h1_2qdw9_1rn64_300",
  "title-variant-h2": "awsui_title-variant-h2_2qdw9_1rn64_307",
  "title-variant-h3": "awsui_title-variant-h3_2qdw9_1rn64_313",
  "virtual-space": "awsui_virtual-space_2qdw9_1rn64_334",
  "info": "awsui_info_2qdw9_1rn64_340",
  "description": "awsui_description_2qdw9_1rn64_344",
  "description-variant-h1": "awsui_description-variant-h1_2qdw9_1rn64_351",
  "description-variant-h2": "awsui_description-variant-h2_2qdw9_1rn64_355",
  "description-variant-h3": "awsui_description-variant-h3_2qdw9_1rn64_362",
  "heading": "awsui_heading_2qdw9_1rn64_371",
  "heading-variant-h1": "awsui_heading-variant-h1_2qdw9_1rn64_382",
  "heading-variant-h2": "awsui_heading-variant-h2_2qdw9_1rn64_387",
  "heading-variant-h3": "awsui_heading-variant-h3_2qdw9_1rn64_392",
  "heading-text": "awsui_heading-text_2qdw9_1rn64_398",
  "heading-text-variant-h1": "awsui_heading-text-variant-h1_2qdw9_1rn64_401",
  "heading-text-variant-h2": "awsui_heading-text-variant-h2_2qdw9_1rn64_409",
  "heading-text-variant-h3": "awsui_heading-text-variant-h3_2qdw9_1rn64_417",
  "counter": "awsui_counter_2qdw9_1rn64_426"
};

// ../node_modules/@cloudscape-design/components/header/internal.js
function InternalHeader(_a) {
  var { variant, headingTagOverride, children, actions, counter, description, info, __internalRootRef = null, __disableActionsWrapping, __headingTagRef, __headingTagTabIndex } = _a, restProps = __rest(_a, ["variant", "headingTagOverride", "children", "actions", "counter", "description", "info", "__internalRootRef", "__disableActionsWrapping", "__headingTagRef", "__headingTagTabIndex"]);
  const isMobile = useMobile();
  const HeadingTag = headingTagOverride !== null && headingTagOverride !== void 0 ? headingTagOverride : variant === "awsui-h1-sticky" ? "h1" : variant;
  const { isStuck } = (0, import_react11.useContext)(StickyHeaderContext);
  const baseProps = getBaseProps(restProps);
  const isRefresh = useVisualRefresh();
  const assignHeaderId = (0, import_react11.useContext)(CollectionLabelContext).assignId;
  const isInContainer = useContainerHeader();
  const headingId = useUniqueId("heading");
  if (assignHeaderId !== void 0) {
    assignHeaderId(headingId);
  }
  const dynamicVariant = !isMobile && isStuck ? "h2" : "h1";
  const variantOverride = variant === "awsui-h1-sticky" ? isRefresh ? dynamicVariant : "h2" : variant;
  return import_react11.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default7.root, baseProps.className, styles_css_default7[`root-variant-${variantOverride}`], isRefresh && styles_css_default7.refresh, !actions && [styles_css_default7[`root-no-actions`]], description && [styles_css_default7[`root-has-description`]]), ref: __internalRootRef }),
    import_react11.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default7.main, styles_css_default7[`main-variant-${variantOverride}`], isRefresh && styles_css_default7.refresh, __disableActionsWrapping && [styles_css_default7["no-wrap"]]) },
      import_react11.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default7.title, styles_css_default7[`title-variant-${variantOverride}`], isRefresh && styles_css_default7.refresh) },
        import_react11.default.createElement(
          HeadingTag,
          Object.assign({ className: clsx_m_default(styles_css_default7.heading, styles_css_default7[`heading-variant-${variantOverride}`]), ref: __headingTagRef, tabIndex: __headingTagTabIndex }, getAnalyticsLabelAttribute(`.${styles_css_default6["heading-text"]}`)),
          import_react11.default.createElement("span", Object.assign({}, isInContainer ? { [DATA_ATTR_FUNNEL_KEY]: FUNNEL_KEY_SUBSTEP_NAME } : {}, { className: clsx_m_default(styles_css_default7["heading-text"], styles_css_default6["heading-text"], styles_css_default7[`heading-text-variant-${variantOverride}`]), id: headingId }), children),
          counter !== void 0 && import_react11.default.createElement(
            "span",
            { className: styles_css_default7.counter },
            " ",
            counter
          )
        ),
        info && import_react11.default.createElement(
          InfoLinkLabelContext.Provider,
          { value: headingId },
          import_react11.default.createElement("span", { className: styles_css_default7["virtual-space"] }, "  "),
          import_react11.default.createElement("span", { className: styles_css_default7.info }, info)
        )
      ),
      actions && import_react11.default.createElement("div", { className: clsx_m_default(styles_css_default7.actions, styles_css_default7[`actions-variant-${variantOverride}`], isRefresh && styles_css_default7.refresh, !__disableActionsWrapping && [styles_css_default7["actions-centered"]]) }, actions)
    ),
    import_react11.default.createElement(Description, { variantOverride }, description)
  );
}
function Description({ children, variantOverride }) {
  const isRefresh = useVisualRefresh();
  return children && import_react11.default.createElement("p", { className: clsx_m_default(styles_css_default7.description, styles_css_default7[`description-variant-${variantOverride}`], isRefresh && styles_css_default7.refresh) }, children) || null;
}

// ../node_modules/@cloudscape-design/components/internal/context/reset-contexts-for-modal.js
var import_react12 = __toESM(require_react());
var ResetContextsForModal = ({ children }) => import_react12.default.createElement(
  ButtonContext.Provider,
  { value: { onClick: () => {
  } } },
  import_react12.default.createElement(
    CollectionLabelContext.Provider,
    { value: { assignId: () => {
    } } },
    import_react12.default.createElement(
      FormFieldContext.Provider,
      { value: {} },
      import_react12.default.createElement(
        InfoLinkLabelContext.Provider,
        { value: "" },
        import_react12.default.createElement(
          LinkDefaultVariantContext.Provider,
          { value: defaultValue2 },
          import_react12.default.createElement(SingleTabStopNavigationContext.Provider, { value: defaultValue }, children)
        )
      )
    )
  )
);
var reset_contexts_for_modal_default = ResetContextsForModal;

// ../node_modules/@cloudscape-design/components/internal/hooks/use-intersection-observer/index.js
var import_react13 = __toESM(require_react());
function useIntersectionObserver({ initialState = false } = {}) {
  const observerRef = (0, import_react13.useRef)(null);
  const [isIntersecting, setIsIntersecting] = (0, import_react13.useState)(initialState);
  const ref = (0, import_react13.useCallback)((targetElement) => {
    if (typeof IntersectionObserver === "undefined") {
      return;
    }
    if (observerRef.current) {
      observerRef.current.disconnect();
    }
    if (targetElement) {
      observerRef.current = new IntersectionObserver(([entry]) => setIsIntersecting(entry.isIntersecting));
      observerRef.current.observe(targetElement);
    }
  }, []);
  return { ref, isIntersecting };
}

// ../node_modules/@cloudscape-design/components/internal/utils/calculate-once.js
function calculateOnce(callback) {
  let result = void 0;
  return () => {
    if (result === void 0) {
      result = callback();
    }
    return result;
  };
}

// ../node_modules/@cloudscape-design/components/internal/utils/browser-scrollbar-size.js
var browserScrollbarSize = calculateOnce(() => {
  if (typeof document === "undefined") {
    return { width: 0, height: 0 };
  }
  const scrollDiv = document.createElement("div");
  scrollDiv.style.overflow = "scroll";
  scrollDiv.style.height = "100px";
  scrollDiv.style.width = "100px";
  scrollDiv.style.position = "absolute";
  scrollDiv.style.top = "-9999px";
  scrollDiv.style.left = "-9999px";
  document.body.appendChild(scrollDiv);
  const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  const height = scrollDiv.offsetHeight - scrollDiv.clientHeight;
  document.body.removeChild(scrollDiv);
  return { width, height };
});

// ../node_modules/@cloudscape-design/components/modal/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/modal/styles.scoped.css";
var styles_css_default8 = {
  "dialog": "awsui_dialog_1d2i7_miaej_169",
  "modal-slide-up": "awsui_modal-slide-up_1d2i7_miaej_1",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_1d2i7_miaej_1",
  "refresh": "awsui_refresh_1d2i7_miaej_192",
  "awsui-motion-scale-popup": "awsui_awsui-motion-scale-popup_1d2i7_miaej_1",
  "root": "awsui_root_1d2i7_miaej_225",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_1d2i7_miaej_1",
  "hidden": "awsui_hidden_1d2i7_miaej_302",
  "focus-lock": "awsui_focus-lock_1d2i7_miaej_306",
  "small": "awsui_small_1d2i7_miaej_326",
  "medium": "awsui_medium_1d2i7_miaej_329",
  "large": "awsui_large_1d2i7_miaej_332",
  "max": "awsui_max_1d2i7_miaej_335",
  "breakpoint-xs": "awsui_breakpoint-xs_1d2i7_miaej_335",
  "container": "awsui_container_1d2i7_miaej_341",
  "content": "awsui_content_1d2i7_miaej_382",
  "no-paddings": "awsui_no-paddings_1d2i7_miaej_387",
  "header": "awsui_header_1d2i7_miaej_392",
  "header--text": "awsui_header--text_1d2i7_miaej_404",
  "footer": "awsui_footer_1d2i7_miaej_408",
  "footer--stuck": "awsui_footer--stuck_1d2i7_miaej_417",
  "dismiss-control": "awsui_dismiss-control_1d2i7_miaej_429",
  "modal-open": "awsui_modal-open_1d2i7_miaej_433"
};

// ../node_modules/@cloudscape-design/components/modal/body-scroll.js
var initialBodyPaddingRightStyle = void 0;
function disableBodyScrolling() {
  setBodyScrollbarPadding();
  document.body.classList.add(styles_css_default8["modal-open"]);
}
function enableBodyScrolling() {
  document.body.classList.remove(styles_css_default8["modal-open"]);
  restoreBodyScrollbarPadding();
}
function setBodyScrollbarPadding() {
  if (bodyHasScrollbar()) {
    initialBodyPaddingRightStyle = document.body.style.paddingRight;
    const initialBodyPaddingRight = computedBodyPaddingRightPixels();
    const scrollbarWidth = browserScrollbarSize().width;
    const newBodyPaddingRight = initialBodyPaddingRight + scrollbarWidth;
    document.body.style.paddingRight = newBodyPaddingRight + "px";
  }
}
function computedBodyPaddingRightPixels() {
  return parseInt(window.getComputedStyle(document.body).paddingRight, 10);
}
function restoreBodyScrollbarPadding() {
  if (initialBodyPaddingRightStyle) {
    document.body.style.setProperty("padding-right", initialBodyPaddingRightStyle);
  } else {
    document.body.style.removeProperty("padding-right");
  }
  initialBodyPaddingRightStyle = void 0;
}
function bodyHasScrollbar() {
  return document.body.clientWidth < window.innerWidth;
}

// ../node_modules/@cloudscape-design/components/modal/analytics-metadata/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/modal/analytics-metadata/styles.scoped.css";
var styles_css_default9 = {
  "header": "awsui_header_15dxs_1ns0c_5"
};

// ../node_modules/@cloudscape-design/components/modal/internal.js
function InternalModal(_a) {
  var { modalRoot, getModalRoot, removeModalRoot } = _a, rest = __rest(_a, ["modalRoot", "getModalRoot", "removeModalRoot"]);
  return import_react14.default.createElement(
    Portal,
    { container: modalRoot, getContainer: getModalRoot, removeContainer: removeModalRoot },
    import_react14.default.createElement(PortaledModal, Object.assign({}, rest))
  );
}
function PortaledModal(_a) {
  var _b;
  var { size, visible, header, children, footer, disableContentPaddings, onButtonClick = () => {
  }, onDismiss, __internalRootRef = null, __injectAnalyticsComponentMetadata, __funnelProps, __funnelStepProps, __subStepRef, __subStepFunnelProps, referrerId } = _a, rest = __rest(_a, ["size", "visible", "header", "children", "footer", "disableContentPaddings", "onButtonClick", "onDismiss", "__internalRootRef", "__injectAnalyticsComponentMetadata", "__funnelProps", "__funnelStepProps", "__subStepRef", "__subStepFunnelProps", "referrerId"]);
  const instanceUniqueId = useUniqueId();
  const headerId = `${rest.id || instanceUniqueId}-header`;
  const lastMouseDownElementRef = (0, import_react14.useRef)(null);
  const [breakpoint, breakpointsRef] = useContainerBreakpoints(["xs"]);
  const i18n = useInternalI18n("modal");
  const closeAriaLabel = i18n("closeAriaLabel", rest.closeAriaLabel);
  const refObject = (0, import_react14.useRef)(null);
  const mergedRef = useMergeRefs(breakpointsRef, refObject, __internalRootRef);
  const isRefresh = useVisualRefresh();
  const baseProps = getBaseProps(rest);
  const analyticsComponentMetadata = {
    name: "awsui.Modal",
    label: `.${styles_css_default9.header} h2`
  };
  const metadataAttribute = __injectAnalyticsComponentMetadata ? getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata }) : {};
  const loadStartTime = (0, import_react14.useRef)(0);
  const loadCompleteTime = (0, import_react14.useRef)(0);
  const componentLoadingCount = (0, import_react14.useRef)(0);
  const performanceMetricLogged = (0, import_react14.useRef)(false);
  (0, import_react14.useEffect)(() => {
    return () => {
      enableBodyScrolling();
    };
  }, []);
  const resetModalPerformanceData = () => {
    loadStartTime.current = performance.now();
    loadCompleteTime.current = 0;
    performanceMetricLogged.current = false;
  };
  const emitTimeToContentReadyInModal = (loadCompleteTime2) => {
    var _a2;
    if (componentLoadingCount.current === 0 && loadStartTime.current && loadStartTime.current !== 0 && !performanceMetricLogged.current) {
      const timeToContentReadyInModal = loadCompleteTime2 - loadStartTime.current;
      PerformanceMetrics.modalPerformanceData({
        timeToContentReadyInModal,
        instanceIdentifier: instanceUniqueId,
        componentIdentifier: ((_a2 = headerRef.current) === null || _a2 === void 0 ? void 0 : _a2.textContent) || ""
      });
      performanceMetricLogged.current = true;
    }
  };
  const MODAL_READY_TIMEOUT = 100;
  (0, import_react14.useEffect)(() => {
    if (visible) {
      disableBodyScrolling();
      resetModalPerformanceData();
      setTimeout(() => {
        emitTimeToContentReadyInModal(loadStartTime.current);
      }, MODAL_READY_TIMEOUT);
    } else {
      enableBodyScrolling();
    }
  }, [visible]);
  (0, import_react14.useEffect)(() => {
    if (visible && refObject.current) {
      refObject.current.scrollTop = 0;
    }
  }, [visible]);
  const dismiss = (reason) => fireNonCancelableEvent(onDismiss, { reason });
  const onOverlayMouseDown = (event) => {
    lastMouseDownElementRef.current = event.target;
  };
  const onOverlayClick = (event) => {
    const overlay = refObject.current;
    const lastClicked = lastMouseDownElementRef.current;
    if (event.target === overlay && lastClicked === overlay) {
      dismiss("overlay");
    }
  };
  const onCloseButtonClick = () => dismiss("closeButton");
  const escKeyHandler = (event) => {
    if (event.keyCode === KeyCode.escape) {
      dismiss("keyboard");
    }
  };
  const { ref: stickySentinelRef, isIntersecting: footerStuck } = useIntersectionObserver();
  const [footerHeight, footerRef] = useContainerQuery((rect) => rect.borderBoxHeight);
  const headerRef = (0, import_react14.useRef)(null);
  const { subStepRef } = useFunnelSubStep();
  return import_react14.default.createElement(
    FunnelNameSelectorContext.Provider,
    { value: `.${styles_css_default8["header--text"]}` },
    import_react14.default.createElement(
      reset_contexts_for_modal_default,
      null,
      import_react14.default.createElement(
        ModalContext.Provider,
        { value: {
          isInModal: true,
          componentLoadingCount,
          emitTimeToContentReadyInModal
        } },
        import_react14.default.createElement(
          "div",
          Object.assign({}, baseProps, __funnelProps, __funnelStepProps, { className: clsx_m_default(styles_css_default8.root, { [styles_css_default8.hidden]: !visible }, baseProps.className, isRefresh && styles_css_default8.refresh), role: "dialog", "aria-labelledby": headerId, onMouseDown: onOverlayMouseDown, onClick: onOverlayClick, ref: mergedRef, style: footerHeight ? { scrollPaddingBottom: footerHeight } : void 0, "data-awsui-referrer-id": ((_b = subStepRef.current) === null || _b === void 0 ? void 0 : _b.id) || referrerId }),
          import_react14.default.createElement(
            focus_lock_default,
            { disabled: !visible, autoFocus: true, restoreFocus: true, className: styles_css_default8["focus-lock"] },
            import_react14.default.createElement(
              "div",
              Object.assign({ className: clsx_m_default(styles_css_default8.dialog, styles_css_default8[size], styles_css_default8[`breakpoint-${breakpoint}`], isRefresh && styles_css_default8.refresh), onKeyDown: escKeyHandler }, metadataAttribute),
              import_react14.default.createElement(
                "div",
                { className: styles_css_default8.container },
                import_react14.default.createElement(
                  "div",
                  { className: clsx_m_default(styles_css_default8.header, styles_css_default9.header) },
                  import_react14.default.createElement(
                    InternalHeader,
                    { variant: "h2", __disableActionsWrapping: true, actions: import_react14.default.createElement(
                      "div",
                      Object.assign({}, getAnalyticsMetadataAttribute({
                        action: "dismiss"
                      })),
                      import_react14.default.createElement(InternalButton, { ariaLabel: closeAriaLabel, className: styles_css_default8["dismiss-control"], variant: "modal-dismiss", iconName: "close", formAction: "none", onClick: onCloseButtonClick })
                    ) },
                    import_react14.default.createElement("span", { ref: headerRef, id: headerId, className: styles_css_default8["header--text"] }, header)
                  )
                ),
                import_react14.default.createElement(
                  "div",
                  Object.assign({ ref: __subStepRef }, __subStepFunnelProps, { className: clsx_m_default(styles_css_default8.content, { [styles_css_default8["no-paddings"]]: disableContentPaddings }) }),
                  children,
                  import_react14.default.createElement("div", { ref: stickySentinelRef })
                ),
                footer && import_react14.default.createElement(
                  ButtonContext.Provider,
                  { value: { onClick: onButtonClick } },
                  import_react14.default.createElement("div", { ref: footerRef, className: clsx_m_default(styles_css_default8.footer, footerStuck && styles_css_default8["footer--stuck"]) }, footer)
                )
              )
            )
          )
        )
      )
    )
  );
}

// ../node_modules/@cloudscape-design/components/space-between/internal.js
var import_react15 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/space-between/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/space-between/styles.scoped.css";
var styles_css_default10 = {
  "root": "awsui_root_18582_sv1am_145",
  "child": "awsui_child_18582_sv1am_149",
  "horizontal": "awsui_horizontal_18582_sv1am_160",
  "horizontal-xxxs": "awsui_horizontal-xxxs_18582_sv1am_164",
  "horizontal-xxs": "awsui_horizontal-xxs_18582_sv1am_167",
  "horizontal-xs": "awsui_horizontal-xs_18582_sv1am_170",
  "horizontal-s": "awsui_horizontal-s_18582_sv1am_173",
  "horizontal-m": "awsui_horizontal-m_18582_sv1am_176",
  "horizontal-l": "awsui_horizontal-l_18582_sv1am_179",
  "horizontal-xl": "awsui_horizontal-xl_18582_sv1am_182",
  "horizontal-xxl": "awsui_horizontal-xxl_18582_sv1am_185",
  "vertical": "awsui_vertical_18582_sv1am_192",
  "vertical-xxxs": "awsui_vertical-xxxs_18582_sv1am_195",
  "vertical-xxs": "awsui_vertical-xxs_18582_sv1am_198",
  "vertical-xs": "awsui_vertical-xs_18582_sv1am_201",
  "vertical-s": "awsui_vertical-s_18582_sv1am_204",
  "vertical-m": "awsui_vertical-m_18582_sv1am_207",
  "vertical-l": "awsui_vertical-l_18582_sv1am_210",
  "vertical-xl": "awsui_vertical-xl_18582_sv1am_213",
  "vertical-xxl": "awsui_vertical-xxl_18582_sv1am_216",
  "align-center": "awsui_align-center_18582_sv1am_220",
  "align-start": "awsui_align-start_18582_sv1am_224",
  "align-end": "awsui_align-end_18582_sv1am_228"
};

// ../node_modules/@cloudscape-design/components/space-between/internal.js
var InternalSpaceBetween = (0, import_react15.forwardRef)((_a, ref) => {
  var { direction = "vertical", size, children, alignItems, __internalRootRef } = _a, props = __rest(_a, ["direction", "size", "children", "alignItems", "__internalRootRef"]);
  const mergedRef = useMergeRefs(ref, __internalRootRef);
  const baseProps = getBaseProps(props);
  const flattenedChildren = flattenChildren(children);
  return import_react15.default.createElement("div", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default10.root, styles_css_default10[direction], styles_css_default10[`${direction}-${size}`], alignItems && styles_css_default10[`align-${alignItems}`]), ref: mergedRef }), flattenedChildren.map((child) => {
    const key = typeof child === "object" ? child.key : void 0;
    return import_react15.default.createElement("div", { key, className: styles_css_default10.child }, child);
  }));
});
var internal_default8 = InternalSpaceBetween;

// ../node_modules/@cloudscape-design/components/s3-resource-selector/utils.js
function joinObjectPath(segments) {
  return segments.reduce((prev, next) => {
    if (prev && prev[prev.length - 1] !== "/") {
      prev = prev + "/";
    }
    return prev + next;
  }, "");
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/buckets-table.js
var import_react61 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/basic-table.js
var import_react60 = __toESM(require_react());

// ../node_modules/@cloudscape-design/collection-hooks/mjs/use-collection.js
var import_react17 = __toESM(require_react(), 1);

// ../node_modules/@cloudscape-design/collection-hooks/mjs/operations/filter.js
function defaultFilteringFunction(item, filteringText, filteringFields) {
  if (filteringText.length === 0) {
    return true;
  }
  filteringFields = filteringFields || Object.keys(item);
  const lowFilteringText = filteringText.toLowerCase();
  return filteringFields.some((key) => {
    const value = item[key];
    if (value && typeof value === "object") {
      return false;
    }
    return String(value).toLowerCase().indexOf(lowFilteringText) > -1;
  });
}
function createFilterPredicate(filtering, filteringText = "") {
  var _a;
  if (!filtering) {
    return null;
  }
  const filteringFunction = (_a = filtering.filteringFunction) !== null && _a !== void 0 ? _a : defaultFilteringFunction;
  return (item) => filteringFunction(item, filteringText, filtering.fields);
}

// ../node_modules/@cloudscape-design/collection-hooks/mjs/date-utils/parse-iso-date.js
function parseIsoDate(isoDate) {
  if (typeof isoDate === "string") {
    if (isoDate.includes("T")) {
      return new Date(isoDate);
    } else {
      return /* @__PURE__ */ new Date(isoDate + "T00:00:00");
    }
  }
  return /* @__PURE__ */ new Date(NaN);
}

// ../node_modules/@cloudscape-design/collection-hooks/mjs/date-utils/compare-dates.js
function compareDates(date, dateToCompare) {
  if (date instanceof Date && typeof dateToCompare === "string") {
    return startOfDay(date).getTime() - startOfDay(parseIsoDate(dateToCompare)).getTime();
  }
  return NaN;
}
function compareTimestamps(date, dateToCompare) {
  if (date instanceof Date && typeof dateToCompare === "string") {
    return date.getTime() - parseIsoDate(dateToCompare).getTime();
  }
  return NaN;
}
function startOfDay(date) {
  const copy = new Date(date.getTime());
  copy.setHours(0, 0, 0, 0);
  return copy;
}

// ../node_modules/@cloudscape-design/collection-hooks/mjs/logging.js
var isDevelopment2 = true;
var messageCache = /* @__PURE__ */ new Set();
function warnOnce2(message) {
  if (isDevelopment2) {
    const warning = `[AwsUi] collection-hooks ${message}`;
    if (!messageCache.has(warning)) {
      messageCache.add(warning);
      console.warn(warning);
    }
  }
}

// ../node_modules/@cloudscape-design/collection-hooks/mjs/operations/property-filter.js
var filterUsingOperator = (itemValue, { tokenValue, operator: { operator, match: match2, tokenType } }) => {
  if (match2 === "date" || match2 === "datetime") {
    return matchDateValue({ tokenValue, itemValue, operator, match: match2 });
  } else if (typeof match2 === "function") {
    return match2(itemValue, tokenValue);
  } else if (match2) {
    throw new Error("Unsupported `operator.match` type given.");
  }
  return matchPrimitiveValue({ tokenValue, itemValue, operator, tokenType });
};
function matchDateValue({ tokenValue, itemValue, operator, match: match2 }) {
  const comparator = match2 === "date" ? compareDates : compareTimestamps;
  const comparisonResult = comparator(itemValue, tokenValue);
  switch (operator) {
    case "<":
      return comparisonResult < 0;
    case "<=":
      return comparisonResult <= 0;
    case ">":
      return comparisonResult > 0;
    case ">=":
      return comparisonResult >= 0;
    case "=":
      return comparisonResult === 0;
    case "!=":
      return comparisonResult !== 0;
    default:
      warnOnce2(`Unsupported operator "${operator}" given for match="${match2}".`);
      return false;
  }
}
function matchPrimitiveValue({ tokenValue, itemValue, operator, tokenType }) {
  if (tokenType === "enum") {
    if (!tokenValue || !Array.isArray(tokenValue)) {
      warnOnce2('The token value must be an array when tokenType=="enum".');
      return false;
    }
    switch (operator) {
      case "=":
        return tokenValue && tokenValue.includes(itemValue);
      case "!=":
        return !tokenValue || !tokenValue.includes(itemValue);
      default:
        warnOnce2(`Unsupported operator "${operator}" given for tokenType=="enum".`);
        return false;
    }
  }
  switch (operator) {
    case "<":
      return itemValue < tokenValue;
    case "<=":
      return itemValue <= tokenValue;
    case ">":
      return itemValue > tokenValue;
    case ">=":
      return itemValue >= tokenValue;
    case "=":
      return itemValue == tokenValue;
    case "!=":
      return itemValue != tokenValue;
    case ":":
      return (itemValue + "").toLowerCase().indexOf((tokenValue + "").toLowerCase()) > -1;
    case "!:":
      return (itemValue + "").toLowerCase().indexOf((tokenValue + "").toLowerCase()) === -1;
    case "^":
      return (itemValue + "").toLowerCase().startsWith((tokenValue + "").toLowerCase());
    case "!^":
      return !(itemValue + "").toLowerCase().startsWith((tokenValue + "").toLowerCase());
    // The unsupported operators result in an exception being thrown.
    // The exception can be avoided if using the match function.
    default:
      throw new Error("Unsupported operator given.");
  }
}
function freeTextFilter(tokenValue, item, operator, filteringPropertiesMap) {
  const isNegation = operator.startsWith("!");
  return Object.keys(filteringPropertiesMap)[isNegation ? "every" : "some"]((propertyKey) => {
    const { operators } = filteringPropertiesMap[propertyKey];
    const propertyOperator = operators[operator];
    if (!propertyOperator) {
      return isNegation;
    }
    return filterUsingOperator(item[propertyKey], { tokenValue, operator: propertyOperator });
  });
}
function filterByToken(token, item, filteringPropertiesMap) {
  if (token.propertyKey) {
    if (!(token.propertyKey in filteringPropertiesMap) || !(token.operator in filteringPropertiesMap[token.propertyKey].operators)) {
      return false;
    }
    const property = filteringPropertiesMap[token.propertyKey];
    const operator = property.operators[token.operator];
    const itemValue = (operator === null || operator === void 0 ? void 0 : operator.match) ? item[token.propertyKey] : fixupFalsyValues(item[token.propertyKey]);
    return filterUsingOperator(itemValue, {
      tokenValue: token.value,
      operator: operator !== null && operator !== void 0 ? operator : { operator: token.operator }
    });
  }
  return freeTextFilter(token.value, item, token.operator, filteringPropertiesMap);
}
function defaultFilteringFunction2(filteringPropertiesMap) {
  return (item, query) => {
    var _a;
    function evaluate(tokenOrGroup) {
      if ("operation" in tokenOrGroup) {
        let result = tokenOrGroup.operation === "and" ? true : !tokenOrGroup.tokens.length;
        for (const group of tokenOrGroup.tokens) {
          result = tokenOrGroup.operation === "and" ? result && evaluate(group) : result || evaluate(group);
        }
        return result;
      } else {
        return filterByToken(tokenOrGroup, item, filteringPropertiesMap);
      }
    }
    return evaluate({
      operation: query.operation,
      tokens: (_a = query.tokenGroups) !== null && _a !== void 0 ? _a : query.tokens
    });
  };
}
function createPropertyFilterPredicate(propertyFiltering, query = { tokens: [], operation: "and" }) {
  if (!propertyFiltering) {
    return null;
  }
  const filteringPropertiesMap = propertyFiltering.filteringProperties.reduce((acc, { key, operators, defaultOperator }) => {
    const operatorMap = { [defaultOperator !== null && defaultOperator !== void 0 ? defaultOperator : "="]: { operator: defaultOperator !== null && defaultOperator !== void 0 ? defaultOperator : "=" } };
    operators === null || operators === void 0 ? void 0 : operators.forEach((op) => {
      if (typeof op === "string") {
        operatorMap[op] = { operator: op };
      } else {
        operatorMap[op.operator] = { operator: op.operator, match: op.match, tokenType: op.tokenType };
      }
    });
    acc[key] = { operators: operatorMap };
    return acc;
  }, {});
  const filteringFunction = propertyFiltering.filteringFunction || defaultFilteringFunction2(filteringPropertiesMap);
  return (item) => filteringFunction(item, query);
}
var fixupFalsyValues = (value) => {
  if (typeof value === "boolean") {
    return value + "";
  }
  if (value || value === 0) {
    return value;
  }
  return "";
};

// ../node_modules/@cloudscape-design/collection-hooks/mjs/operations/sort.js
function getSorter(sortingField) {
  if (!sortingField) {
    return null;
  }
  return (row1, row2) => {
    var _a, _b;
    const value1 = (_a = row1[sortingField]) !== null && _a !== void 0 ? _a : "";
    const value2 = (_b = row2[sortingField]) !== null && _b !== void 0 ? _b : "";
    if (typeof value1 === "string" && typeof value2 === "string") {
      return value1.localeCompare(value2);
    }
    return value1 < value2 ? -1 : value1 == value2 ? 0 : 1;
  };
}
function createComparator(sorting, state) {
  var _a;
  if (!sorting || !state) {
    return null;
  }
  const direction = state.isDescending ? -1 : 1;
  const comparator = (_a = state.sortingColumn.sortingComparator) !== null && _a !== void 0 ? _a : getSorter(state.sortingColumn.sortingField);
  return comparator ? (a, b) => comparator(a, b) * direction : null;
}

// ../node_modules/@cloudscape-design/collection-hooks/mjs/operations/pagination.js
var DEFAULT_PAGE_SIZE = 10;
function createPageProps(pagination, currentPageIndex, items) {
  var _a;
  if (!pagination) {
    return null;
  }
  const pageSize = (_a = pagination.pageSize) !== null && _a !== void 0 ? _a : DEFAULT_PAGE_SIZE;
  const pagesCount = Math.ceil(items.length / pageSize);
  let pageIndex = currentPageIndex !== null && currentPageIndex !== void 0 ? currentPageIndex : 1;
  if (pageIndex < 1 || pageIndex > pagesCount && !pagination.allowPageOutOfRange || Number.isNaN(pageIndex)) {
    pageIndex = 1;
  }
  return { pageSize, pagesCount, pageIndex };
}

// ../node_modules/@cloudscape-design/collection-hooks/mjs/operations/items-tree.js
var ItemsTree = class {
  constructor(items, treeProps) {
    var _a;
    this.size = 0;
    this.hasNesting = false;
    this.roots = new Array();
    this.idToChildren = /* @__PURE__ */ new Map();
    this.filter = (predicate) => {
      if (!this.hasNesting) {
        this.items = this.items.filter(predicate);
        this.size = this.items.length;
      } else {
        this.filterTree(predicate);
      }
      return this;
    };
    this.sort = (comparator) => {
      if (!this.hasNesting) {
        this.items = this.items.slice().sort(comparator);
      } else {
        this.sortTree(comparator);
      }
      return this;
    };
    this.getChildren = (item) => {
      var _a2;
      return (_a2 = this.treeProps && this.idToChildren.get(this.treeProps.getId(item))) !== null && _a2 !== void 0 ? _a2 : [];
    };
    this.getItems = () => {
      if (this.hasNesting) {
        return this.roots;
      }
      return this.items;
    };
    this.getSize = () => {
      return this.size;
    };
    this.filterTree = (predicate) => {
      const filterNode = (item) => {
        const children = this.getChildren(item);
        const filteredChildren = children.filter(filterNode);
        this.size -= children.length - filteredChildren.length;
        this.setChildren(item, filteredChildren);
        return predicate(item) || filteredChildren.length > 0;
      };
      const roots = this.roots;
      this.roots = this.roots.filter(filterNode);
      this.size -= roots.length - this.roots.length;
    };
    this.sortTree = (comparator) => {
      const sortLevel = (items2) => {
        items2.sort(comparator);
        for (const item of items2) {
          sortLevel(this.getChildren(item));
        }
      };
      sortLevel(this.roots);
    };
    this.size = items.length;
    this.items = items;
    this.treeProps = treeProps;
    if (!treeProps) {
      return;
    }
    for (const item of items) {
      const parentId = treeProps.getParentId(item);
      if (parentId === null) {
        this.roots.push(item);
      } else {
        const children = (_a = this.idToChildren.get(parentId)) !== null && _a !== void 0 ? _a : [];
        children.push(item);
        this.idToChildren.set(parentId, children);
        this.hasNesting = true;
      }
    }
    const traverse = (item, level = 1) => {
      var _a2;
      for (const child of (_a2 = this.idToChildren.get(treeProps.getId(item))) !== null && _a2 !== void 0 ? _a2 : []) {
        traverse(child, level + 1);
      }
    };
    this.roots.forEach((root) => traverse(root));
  }
  setChildren(item, children) {
    if (this.treeProps) {
      this.idToChildren.set(this.treeProps.getId(item), children);
    }
  }
};

// ../node_modules/@cloudscape-design/collection-hooks/mjs/operations/compose-filters.js
function composeFilters(...predicates) {
  return predicates.some(Boolean) ? (item) => {
    for (const predicate of predicates) {
      if (predicate && !predicate(item)) {
        return false;
      }
    }
    return true;
  } : null;
}

// ../node_modules/@cloudscape-design/collection-hooks/mjs/operations/index.js
function processItems(items, { filteringText, sortingState, currentPageIndex, propertyFilteringQuery }, { filtering, sorting, pagination, propertyFiltering, expandableRows }) {
  const itemsTree = new ItemsTree(items, expandableRows);
  const filterPredicate = composeFilters(createPropertyFilterPredicate(propertyFiltering, propertyFilteringQuery), createFilterPredicate(filtering, filteringText));
  if (filterPredicate) {
    itemsTree.filter(filterPredicate);
  }
  const comparator = createComparator(sorting, sortingState);
  if (comparator) {
    itemsTree.sort(comparator);
  }
  const allPageItems = itemsTree.getItems();
  const filteredItemsCount = filterPredicate ? itemsTree.getSize() : void 0;
  const pageProps = createPageProps(pagination, currentPageIndex, allPageItems);
  if (pageProps) {
    return {
      items: allPageItems.slice((pageProps.pageIndex - 1) * pageProps.pageSize, pageProps.pageIndex * pageProps.pageSize),
      allPageItems,
      filteredItemsCount,
      pagesCount: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pagesCount,
      actualPageIndex: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pageIndex,
      itemsTree
    };
  }
  return {
    items: allPageItems,
    allPageItems,
    filteredItemsCount,
    pagesCount: void 0,
    actualPageIndex: void 0,
    itemsTree
  };
}
var getTrackableValue = (trackBy, item) => {
  if (!trackBy) {
    return item;
  }
  if (typeof trackBy === "function") {
    return trackBy(item);
  }
  return item[trackBy];
};
var processSelectedItems = (items, selectedItems, trackBy) => {
  const selectedSet = /* @__PURE__ */ new Set();
  selectedItems.forEach((item) => selectedSet.add(getTrackableValue(trackBy, item)));
  return items.filter((item) => selectedSet.has(getTrackableValue(trackBy, item)));
};
var itemsAreEqual = (items1, items2, trackBy) => {
  if (items1.length !== items2.length) {
    return false;
  }
  const set1 = /* @__PURE__ */ new Set();
  items1.forEach((item) => set1.add(getTrackableValue(trackBy, item)));
  return items2.every((item) => set1.has(getTrackableValue(trackBy, item)));
};

// ../node_modules/@cloudscape-design/collection-hooks/mjs/utils.js
function collectionReducer(state, action) {
  const newState = Object.assign({}, state);
  switch (action.type) {
    case "selection":
      newState.selectedItems = action.selectedItems;
      break;
    case "expansion":
      newState.expandedItems = action.expandedItems;
      break;
    case "filtering":
      newState.currentPageIndex = 1;
      newState.filteringText = action.filteringText;
      break;
    case "sorting":
      newState.currentPageIndex = 1;
      newState.sortingState = action.sortingState;
      break;
    case "pagination":
      newState.currentPageIndex = action.pageIndex;
      break;
    case "property-filtering":
      newState.currentPageIndex = 1;
      newState.propertyFilteringQuery = action.query;
      break;
  }
  return newState;
}
function createActions({ dispatch, collectionRef }) {
  return {
    setFiltering(filteringText) {
      var _a;
      dispatch({ type: "filtering", filteringText });
      (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.scrollToTop();
    },
    setSorting(state) {
      var _a;
      dispatch({ type: "sorting", sortingState: state });
      (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.scrollToTop();
    },
    setCurrentPage(pageIndex) {
      var _a;
      dispatch({ type: "pagination", pageIndex });
      (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.scrollToTop();
    },
    setSelectedItems(selectedItems) {
      dispatch({ type: "selection", selectedItems });
    },
    setPropertyFiltering(query) {
      var _a;
      dispatch({ type: "property-filtering", query });
      (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.scrollToTop();
    },
    setExpandedItems(expandedItems) {
      dispatch({ type: "expansion", expandedItems });
    }
  };
}
function createSyncProps(options, { filteringText, sortingState, selectedItems, expandedItems, currentPageIndex, propertyFilteringQuery }, actions, collectionRef, { pagesCount, actualPageIndex, allItems, allPageItems, itemsTree }) {
  var _a, _b, _c, _d, _e;
  let empty = options.filtering ? allItems.length ? options.filtering.noMatch : options.filtering.empty : null;
  empty = options.propertyFiltering ? allItems.length ? options.propertyFiltering.noMatch : options.propertyFiltering.empty : empty;
  const filteringOptions = options.propertyFiltering ? options.propertyFiltering.filteringProperties.reduce((acc, property) => {
    Object.keys(allItems.reduce((acc2, item) => {
      acc2["" + fixupFalsyValues(item[property.key])] = true;
      return acc2;
    }, {})).forEach((value) => {
      if (value !== "") {
        acc.push({
          propertyKey: property.key,
          value
        });
      }
    });
    return acc;
  }, []) : [];
  return {
    collectionProps: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ empty }, options.sorting ? {
      onSortingChange: ({ detail }) => {
        actions.setSorting(detail);
      },
      sortingColumn: sortingState === null || sortingState === void 0 ? void 0 : sortingState.sortingColumn,
      sortingDescending: sortingState === null || sortingState === void 0 ? void 0 : sortingState.isDescending
    } : {}), options.expandableRows ? {
      expandableRows: {
        getItemChildren(item) {
          return itemsTree.getChildren(item);
        },
        isItemExpandable(item) {
          return itemsTree.getChildren(item).length > 0;
        },
        expandedItems,
        onExpandableItemToggle: ({ detail: { item, expanded } }) => {
          const getId = options.expandableRows.getId;
          if (expanded) {
            for (const stateItem of expandedItems) {
              if (getId(stateItem) === getId(item)) {
                return;
              }
            }
            actions.setExpandedItems([...expandedItems, item]);
          } else {
            actions.setExpandedItems(expandedItems.filter((stateItem) => getId(stateItem) !== getId(item)));
          }
        }
      },
      // The trackBy property is used to match expanded items by ID and not by object reference.
      // The property can be overridden by the explicitly provided selection.trackBy.
      // If that is the case, we assume both selection.trackBy and expandableRows.getId have the same result.
      // If not, the expandable state won't be matched correctly by the table.
      trackBy: options.expandableRows.getId
    } : {}), options.selection ? {
      onSelectionChange: ({ detail: { selectedItems: selectedItems2 } }) => {
        actions.setSelectedItems(selectedItems2);
      },
      selectedItems,
      trackBy: (_a = options.selection.trackBy) !== null && _a !== void 0 ? _a : (_b = options.expandableRows) === null || _b === void 0 ? void 0 : _b.getId
    } : {}), { ref: collectionRef, firstIndex: 1, totalItemsCount: allPageItems.length }), ((_c = options.pagination) === null || _c === void 0 ? void 0 : _c.pageSize) ? {
      firstIndex: ((actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex) - 1) * options.pagination.pageSize + 1
    } : {}),
    filterProps: {
      filteringText,
      onChange: ({ detail: { filteringText: filteringText2 } }) => {
        actions.setFiltering(filteringText2);
      }
    },
    propertyFilterProps: {
      query: propertyFilteringQuery,
      onChange: ({ detail: query }) => {
        actions.setPropertyFiltering(query);
      },
      filteringProperties: ((_d = options.propertyFiltering) === null || _d === void 0 ? void 0 : _d.filteringProperties) || [],
      filteringOptions,
      freeTextFiltering: (_e = options.propertyFiltering) === null || _e === void 0 ? void 0 : _e.freeTextFiltering
    },
    paginationProps: {
      currentPageIndex: actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex,
      // pagesCount is always calculated when options.pagination is present
      pagesCount,
      onChange: ({ detail: { currentPageIndex: currentPageIndex2 } }) => {
        actions.setCurrentPage(currentPageIndex2);
      }
    }
  };
}

// ../node_modules/@cloudscape-design/collection-hooks/mjs/use-collection-state.js
var import_react16 = __toESM(require_react(), 1);
function useCollectionState(options, collectionRef) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
  const [state, dispatch] = (0, import_react16.useReducer)(collectionReducer, {
    selectedItems: (_b = (_a = options.selection) === null || _a === void 0 ? void 0 : _a.defaultSelectedItems) !== null && _b !== void 0 ? _b : [],
    expandedItems: (_d = (_c = options.expandableRows) === null || _c === void 0 ? void 0 : _c.defaultExpandedItems) !== null && _d !== void 0 ? _d : [],
    sortingState: (_e = options.sorting) === null || _e === void 0 ? void 0 : _e.defaultState,
    currentPageIndex: (_g = (_f = options.pagination) === null || _f === void 0 ? void 0 : _f.defaultPage) !== null && _g !== void 0 ? _g : 1,
    filteringText: (_j = (_h = options.filtering) === null || _h === void 0 ? void 0 : _h.defaultFilteringText) !== null && _j !== void 0 ? _j : "",
    propertyFilteringQuery: (_l = (_k = options.propertyFiltering) === null || _k === void 0 ? void 0 : _k.defaultQuery) !== null && _l !== void 0 ? _l : { tokens: [], operation: "and" }
  });
  const actions = (0, import_react16.useMemo)(() => createActions({ dispatch, collectionRef }), [dispatch, collectionRef]);
  return [state, actions];
}

// ../node_modules/@cloudscape-design/collection-hooks/mjs/use-collection.js
function useCollection(allItems, options) {
  const collectionRef = (0, import_react17.useRef)(null);
  const [state, actions] = useCollectionState(options, collectionRef);
  const { items, allPageItems, pagesCount, filteredItemsCount, actualPageIndex, itemsTree } = processItems(allItems, state, options);
  const expandedItemsSet = /* @__PURE__ */ new Set();
  if (options.expandableRows) {
    for (const item of state.expandedItems) {
      expandedItemsSet.add(options.expandableRows.getId(item));
    }
  }
  let visibleItems = items;
  if (options.expandableRows) {
    const flatItems = new Array();
    const getId = options.expandableRows.getId;
    const traverse = (items2) => {
      for (const item of items2) {
        flatItems.push(item);
        if (expandedItemsSet.has(getId(item))) {
          traverse(itemsTree.getChildren(item));
        }
      }
    };
    traverse(items);
    visibleItems = flatItems;
  }
  if (options.selection && !options.selection.keepSelection) {
    const newSelectedItems = processSelectedItems(visibleItems, state.selectedItems, options.selection.trackBy);
    if (!itemsAreEqual(newSelectedItems, state.selectedItems, options.selection.trackBy)) {
      actions.setSelectedItems(newSelectedItems);
    }
  }
  if (options.expandableRows) {
    const newExpandedItems = visibleItems.filter((item) => expandedItemsSet.has(options.expandableRows.getId(item)));
    if (!itemsAreEqual(newExpandedItems, state.expandedItems, options.expandableRows.getId)) {
      actions.setExpandedItems(newExpandedItems);
    }
  }
  return Object.assign({
    items,
    allPageItems,
    filteredItemsCount,
    actions
  }, createSyncProps(options, state, actions, collectionRef, {
    actualPageIndex,
    pagesCount,
    allItems,
    allPageItems,
    itemsTree
  }));
}

// ../node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// ../node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// ../node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// ../node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}

// ../node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// ../node_modules/date-fns/esm/constants/index.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;

// ../node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// ../node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// ../node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// ../node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// ../node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// ../node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// ../node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// ../node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// ../node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}

// ../node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// ../node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// ../node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};

// ../node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// ../node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};

// ../node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// ../node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// ../node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};

// ../node_modules/date-fns/esm/formatDistanceStrict/index.js
var MILLISECONDS_IN_MINUTE = 1e3 * 60;
var MINUTES_IN_DAY = 60 * 24;
var MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
var MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;

// ../node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js
var MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1e3;

// ../node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t, "prototype", {
    writable: false
  }), e && _setPrototypeOf(t, e);
}

// ../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
    return t2.__proto__ || Object.getPrototypeOf(t2);
  }, _getPrototypeOf(t);
}

// ../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t;
  })();
}

// ../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(t, e) {
  if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}

// ../node_modules/@babel/runtime/helpers/esm/createSuper.js
function _createSuper(t) {
  var r = _isNativeReflectConstruct();
  return function() {
    var e, o = _getPrototypeOf(t);
    if (r) {
      var s = _getPrototypeOf(this).constructor;
      e = Reflect.construct(o, arguments, s);
    } else e = o.apply(this, arguments);
    return _possibleConstructorReturn(this, e);
  };
}

// ../node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}

// ../node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

// ../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

// ../node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: false
  }), e;
}

// ../node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}

// ../node_modules/date-fns/esm/parse/_lib/Setter.js
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate2(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate2(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = /* @__PURE__ */ new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);

// ../node_modules/date-fns/esm/parse/_lib/Parser.js
var Parser = function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run(dateString, token, match2, options) {
      var result = this.parse(dateString, token, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate2(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();

// ../node_modules/date-fns/esm/parse/_lib/parsers/EraParser.js
var EraParser = function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        // AD, BC
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        // A, B
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        // Anno Domini, Before Christ
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/constants.js
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

// ../node_modules/date-fns/esm/parse/_lib/utils.js
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// ../node_modules/date-fns/esm/parse/_lib/parsers/YearParser.js
var YearParser = function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekYearParser.js
var LocalWeekYearParser = function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekYearParser.js
var ISOWeekYearParser = function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = /* @__PURE__ */ new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/ExtendedYearParser.js
var ExtendedYearParser = function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/QuarterParser.js
var QuarterParser = function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        // 1, 2, 3, 4
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        // 1st, 2nd, 3rd, 4th
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        // Q1, Q2, Q3, Q4
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // 1st quarter, 2nd quarter, ...
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/StandAloneQuarterParser.js
var StandAloneQuarterParser = function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        // 1, 2, 3, 4
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        // 1st, 2nd, 3rd, 4th
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        // Q1, Q2, Q3, Q4
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // 1st quarter, 2nd quarter, ...
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/MonthParser.js
var MonthParser = function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        // 1, 2, ..., 12
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        // 01, 02, ..., 12
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        // 1st, 2nd, ..., 12th
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        // Jan, Feb, ..., Dec
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // J, F, ..., D
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // January, February, ..., December
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/StandAloneMonthParser.js
var StandAloneMonthParser = function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        // 1, 2, ..., 12
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        // 01, 02, ..., 12
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        // 1st, 2nd, ..., 12th
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        // Jan, Feb, ..., Dec
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // J, F, ..., D
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // January, February, ..., December
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);

// ../node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// ../node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekParser.js
var LocalWeekParser = function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);

// ../node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// ../node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekParser.js
var ISOWeekParser = function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/DateParser.js
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate2(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear2) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/DayOfYearParser.js
var DayOfYearParser = function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate2(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      if (isLeapYear2) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);

// ../node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// ../node_modules/date-fns/esm/parse/_lib/parsers/DayParser.js
var DayParser = function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        // Tue
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // T
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // Tu
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // Tuesday
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/LocalDayParser.js
var LocalDayParser = function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        // 3
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        // 3rd
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        // Tue
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // T
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // Tu
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // Tuesday
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/StandAloneLocalDayParser.js
var StandAloneLocalDayParser = function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        // 3
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        // 3rd
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        // Tue
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // T
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // Tu
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // Tuesday
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);

// ../node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// ../node_modules/date-fns/esm/parse/_lib/parsers/ISODayParser.js
var ISODayParser = function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        // 2
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        // 2nd
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        // Tue
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        // T
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        // Tu
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        // Tuesday
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/AMPMParser.js
var AMPMParser = function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/AMPMMidnightParser.js
var AMPMMidnightParser = function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/DayPeriodParser.js
var DayPeriodParser = function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/Hour1to12Parser.js
var Hour1to12Parser = function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/Hour0to23Parser.js
var Hour0to23Parser = function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/Hour0To11Parser.js
var Hour0To11Parser = function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/Hour1To24Parser.js
var Hour1To24Parser = function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/MinuteParser.js
var MinuteParser = function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/SecondParser.js
var SecondParser = function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate2(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/FractionOfSecondParser.js
var FractionOfSecondParser = function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneWithZParser.js
var ISOTimezoneWithZParser = function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneParser.js
var ISOTimezoneParser = function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/TimestampSecondsParser.js
var TimestampSecondsParser = function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/TimestampMillisecondsParser.js
var TimestampMillisecondsParser = function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);

// ../node_modules/date-fns/esm/parse/_lib/parsers/index.js
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// ../node_modules/date-fns/esm/parseISO/index.js
function parseISO(argument, options) {
  var _options$additionalDi;
  requiredArgs(1, arguments);
  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date;
  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date || isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var timestamp = date.getTime();
  var time = 0;
  var offset;
  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);
    if (isNaN(offset)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time);
    var result = /* @__PURE__ */ new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time + offset);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear(dateString, additionalDigits) {
  var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex);
  if (!captures) return {
    year: NaN,
    restDateString: ""
  };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null) return /* @__PURE__ */ new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures) return /* @__PURE__ */ new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = /* @__PURE__ */ new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures) return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z") return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures) return 0;
  var sign = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = /* @__PURE__ */ new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex2(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex2(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex2(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}

// ../node_modules/@cloudscape-design/components/internal/utils/date-time/format-time-offset.js
function formatTimeOffsetLocalized(isoDate, offsetInMinutes) {
  offsetInMinutes = defaultToLocal(isoDate, offsetInMinutes);
  if (offsetInMinutes === 0) {
    return "(UTC)";
  }
  const { hours, minutes } = getMinutesAndHours(offsetInMinutes);
  const sign = offsetInMinutes < 0 ? "-" : "+";
  const formattedMinutes = minutes === 0 ? "" : `:${minutes}`;
  const formattedOffset = `(UTC${sign}${hours}${formattedMinutes})`;
  return formattedOffset;
}
function defaultToLocal(isoDate, offsetInMinutes) {
  return offsetInMinutes !== null && offsetInMinutes !== void 0 ? offsetInMinutes : 0 - new Date(isoDate).getTimezoneOffset();
}
function getMinutesAndHours(minutes) {
  return { hours: Math.floor(Math.abs(minutes) / 60), minutes: Math.abs(minutes % 60) };
}

// ../node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-localized.js
function formatDateLocalized({ date: isoDate, hideTimeOffset, isDateOnly, isMonthOnly, timeOffset, locale }) {
  let date = parseISO(isoDate);
  if (!isValid(date)) {
    date = new Date(isoDate);
  }
  if (isMonthOnly) {
    const formattedMonthDate = new Intl.DateTimeFormat(locale, {
      month: "long",
      year: "numeric"
    }).format(date);
    return formattedMonthDate;
  }
  const formattedDate = new Intl.DateTimeFormat(locale, {
    month: "long",
    year: "numeric",
    day: "numeric"
  }).format(date);
  if (isDateOnly) {
    return formattedDate;
  }
  const formattedTime = new Intl.DateTimeFormat(locale, {
    hour: "2-digit",
    hourCycle: "h23",
    minute: "2-digit",
    second: "2-digit"
  }).format(date);
  const formattedDateTime = formattedDate + getDateTimeSeparator(locale) + formattedTime;
  if (hideTimeOffset) {
    return formattedDateTime;
  }
  const formattedTimeOffset = formatTimeOffsetLocalized(isoDate, timeOffset);
  return formattedDateTime + " " + formattedTimeOffset;
}
var languagesWithoutDateTimeSeparator = ["ja", "zh-CN", "zh-TW"];
function getDateTimeSeparator(locale) {
  return locale && languagesWithoutDateTimeSeparator.includes(locale) ? " " : ", ";
}

// ../node_modules/@cloudscape-design/components/pagination/internal.js
var import_react19 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/internal/context/table-component-context.js
var import_react18 = __toESM(require_react());
var TableComponentsContext = (0, import_react18.createContext)(null);
var TableComponentsContextProvider = TableComponentsContext.Provider;
var useTableComponentsContext = () => {
  const tableComponentContext = (0, import_react18.useContext)(TableComponentsContext);
  return tableComponentContext;
};

// ../node_modules/@cloudscape-design/components/pagination/utils.js
function range(from, to) {
  const result = [];
  for (let i = from; i <= to; i++) {
    result.push(i);
  }
  return result;
}
function getPaginationState(currentPageIndex, totalPagesCount, isOpenEnd) {
  const numberOfControls = 7;
  const leftDelta = Math.floor(numberOfControls / 2);
  let rightDelta = leftDelta;
  const lowerLimit = 2;
  let upperLimit = totalPagesCount - 1;
  if (isOpenEnd) {
    rightDelta++;
    upperLimit = totalPagesCount + 1;
  }
  let leftIndex = currentPageIndex - leftDelta;
  let rightIndex = currentPageIndex + rightDelta;
  if (leftIndex < lowerLimit) {
    rightIndex += lowerLimit - leftIndex;
    leftIndex = lowerLimit;
  }
  if (rightIndex > upperLimit) {
    leftIndex -= rightIndex - upperLimit;
    rightIndex = upperLimit;
  }
  leftIndex = Math.max(leftIndex, 2);
  rightIndex = Math.min(rightIndex, upperLimit);
  const leftDots = leftIndex > 2;
  const rightDots = isOpenEnd || rightIndex < upperLimit;
  if (leftDots) {
    leftIndex++;
  }
  if (rightDots) {
    rightIndex--;
  }
  return { leftDots, rightDots, leftIndex, rightIndex };
}

// ../node_modules/@cloudscape-design/components/pagination/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/pagination/styles.scoped.css";
var styles_css_default11 = {
  "root": "awsui_root_fvjdu_nfftc_145",
  "button": "awsui_button_fvjdu_nfftc_185",
  "dots": "awsui_dots_fvjdu_nfftc_186",
  "button-disabled": "awsui_button-disabled_fvjdu_nfftc_214",
  "arrow": "awsui_arrow_fvjdu_nfftc_219",
  "page-number": "awsui_page-number_fvjdu_nfftc_229",
  "button-current": "awsui_button-current_fvjdu_nfftc_235",
  "page-item": "awsui_page-item_fvjdu_nfftc_252",
  "root-disabled": "awsui_root-disabled_fvjdu_nfftc_270"
};

// ../node_modules/@cloudscape-design/components/pagination/internal.js
var defaultAriaLabels = {
  nextPageLabel: "",
  paginationLabel: "",
  previousPageLabel: "",
  pageLabel: (pageNumber) => `${pageNumber}`
};
function PageButton(_a) {
  var { className, ariaLabel, disabled, pageIndex, isCurrent = false, children, onClick } = _a, rest = __rest(_a, ["className", "ariaLabel", "disabled", "pageIndex", "isCurrent", "children", "onClick"]);
  function handleClick(event) {
    event.preventDefault();
    onClick(pageIndex);
  }
  return import_react19.default.createElement(
    "li",
    Object.assign({ className: styles_css_default11["page-item"] }, copyAnalyticsMetadataAttribute(rest)),
    import_react19.default.createElement("button", Object.assign({ className: clsx_m_default(className, styles_css_default11.button, disabled && styles_css_default11["button-disabled"], isCurrent && styles_css_default11["button-current"]), type: "button", "aria-label": ariaLabel, disabled, onClick: handleClick, "aria-current": isCurrent }, disabled ? {} : getAnalyticsMetadataAttribute({
      action: "click",
      detail: {
        label: { root: "self" }
      }
    })), children)
  );
}
function PageNumber(_a) {
  var { pageIndex } = _a, rest = __rest(_a, ["pageIndex"]);
  return import_react19.default.createElement(PageButton, Object.assign({ className: styles_css_default11["page-number"], pageIndex }, rest, rest.disabled ? {} : getAnalyticsMetadataAttribute({
    detail: {
      position: `${pageIndex}`
    }
  })), pageIndex);
}
function InternalPagination(_a) {
  var _b, _c, _d, _e;
  var { openEnd, currentPageIndex, ariaLabels, pagesCount, disabled, onChange, onNextPageClick, onPreviousPageClick, __internalRootRef = null } = _a, rest = __rest(_a, ["openEnd", "currentPageIndex", "ariaLabels", "pagesCount", "disabled", "onChange", "onNextPageClick", "onPreviousPageClick", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const { leftDots, leftIndex, rightIndex, rightDots } = getPaginationState(currentPageIndex, pagesCount, openEnd);
  const i18n = useInternalI18n("pagination");
  const paginationLabel = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.paginationLabel;
  const nextPageLabel = (_b = i18n("ariaLabels.nextPageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.nextPageLabel)) !== null && _b !== void 0 ? _b : defaultAriaLabels.nextPageLabel;
  const previousPageLabel = (_c = i18n("ariaLabels.previousPageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.previousPageLabel)) !== null && _c !== void 0 ? _c : defaultAriaLabels.previousPageLabel;
  const pageNumberLabelFn = (_d = i18n("ariaLabels.pageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.pageLabel, (format2) => (pageNumber) => format2({ pageNumber }))) !== null && _d !== void 0 ? _d : defaultAriaLabels.pageLabel;
  function handlePrevPageClick(requestedPageIndex) {
    handlePageClick(requestedPageIndex);
    fireNonCancelableEvent(onPreviousPageClick, {
      requestedPageAvailable: true,
      requestedPageIndex
    });
  }
  function handleNextPageClick(requestedPageIndex) {
    handlePageClick(requestedPageIndex);
    fireNonCancelableEvent(onNextPageClick, {
      requestedPageAvailable: currentPageIndex < pagesCount,
      requestedPageIndex
    });
  }
  function handlePageClick(requestedPageIndex) {
    fireNonCancelableEvent(onChange, { currentPageIndex: requestedPageIndex });
  }
  const previousButtonDisabled = disabled || currentPageIndex === 1;
  const nextButtonDisabled = disabled || !openEnd && (pagesCount === 0 || currentPageIndex === pagesCount);
  const tableComponentContext = useTableComponentsContext();
  if ((_e = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.paginationRef) === null || _e === void 0 ? void 0 : _e.current) {
    tableComponentContext.paginationRef.current.currentPageIndex = currentPageIndex;
    tableComponentContext.paginationRef.current.totalPageCount = pagesCount;
  }
  return import_react19.default.createElement(
    "ul",
    Object.assign({ "aria-label": paginationLabel }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default11.root, disabled && styles_css_default11["root-disabled"]), ref: __internalRootRef }),
    import_react19.default.createElement(
      PageButton,
      Object.assign({ className: styles_css_default11.arrow, pageIndex: currentPageIndex - 1, ariaLabel: previousPageLabel !== null && previousPageLabel !== void 0 ? previousPageLabel : defaultAriaLabels.nextPageLabel, disabled: previousButtonDisabled, onClick: handlePrevPageClick }, previousButtonDisabled ? {} : getAnalyticsMetadataAttribute({
        detail: {
          position: "prev"
        }
      })),
      import_react19.default.createElement(internal_default, { name: "angle-left", variant: disabled ? "disabled" : "normal" })
    ),
    import_react19.default.createElement(PageNumber, { pageIndex: 1, isCurrent: currentPageIndex === 1, disabled, ariaLabel: pageNumberLabelFn(1), onClick: handlePageClick }),
    leftDots && import_react19.default.createElement("li", { className: styles_css_default11.dots }, "..."),
    range(leftIndex, rightIndex).map((pageIndex) => import_react19.default.createElement(PageNumber, { key: pageIndex, isCurrent: currentPageIndex === pageIndex, pageIndex, disabled, ariaLabel: pageNumberLabelFn(pageIndex), onClick: handlePageClick })),
    rightDots && import_react19.default.createElement("li", { className: styles_css_default11.dots }, "..."),
    !openEnd && pagesCount > 1 && import_react19.default.createElement(PageNumber, { isCurrent: currentPageIndex === pagesCount, pageIndex: pagesCount, disabled, ariaLabel: pageNumberLabelFn(pagesCount), onClick: handlePageClick }),
    import_react19.default.createElement(
      PageButton,
      Object.assign({ className: styles_css_default11.arrow, pageIndex: currentPageIndex + 1, ariaLabel: nextPageLabel !== null && nextPageLabel !== void 0 ? nextPageLabel : defaultAriaLabels.nextPageLabel, disabled: nextButtonDisabled, onClick: handleNextPageClick }, nextButtonDisabled ? {} : getAnalyticsMetadataAttribute({
        detail: {
          position: "next"
        }
      })),
      import_react19.default.createElement(internal_default, { name: "angle-right", variant: disabled ? "disabled" : "normal" })
    )
  );
}

// ../node_modules/@cloudscape-design/components/table/internal.js
var import_react55 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/internal/hooks/use-mouse-down-target.js
var import_react20 = __toESM(require_react());
var useEventListenersSingleton = createSingletonHandler((setTarget) => {
  function handleMouseDown(event) {
    setTarget(event.target);
  }
  function handleKeyDown() {
    setTarget(null);
  }
  const controller = new AbortController();
  window.addEventListener("mousedown", handleMouseDown, { signal: controller.signal });
  window.addEventListener("keydown", handleKeyDown, { signal: controller.signal });
  return () => {
    controller.abort();
  };
});
function useMouseDownTarget() {
  const mouseDownTargetRef = (0, import_react20.useRef)(null);
  useEventListenersSingleton((target) => {
    mouseDownTargetRef.current = target;
  });
  return () => mouseDownTargetRef.current;
}

// ../node_modules/@cloudscape-design/components/internal/hooks/use-scroll-sync/index.js
var import_react21 = __toESM(require_react());
function useScrollSync(refs) {
  const activeElement = (0, import_react21.useRef)(null);
  return (event) => {
    const targetElement = event.currentTarget;
    if (targetElement && (activeElement.current === null || activeElement.current === targetElement)) {
      requestAnimationFrame(() => {
        activeElement.current = targetElement;
        refs.forEach((ref) => {
          const element = ref.current;
          if (element && element !== targetElement) {
            element.scrollLeft = targetElement.scrollLeft;
          }
        });
        requestAnimationFrame(() => {
          activeElement.current = null;
        });
      });
    }
  };
}

// ../node_modules/@cloudscape-design/components/internal/hooks/use-table-interaction-metrics/index.js
var import_react22 = __toESM(require_react());
var USER_ACTION_TIME_LIMIT = 1e3;
function useTableInteractionMetrics({ elementRef, itemCount, instanceIdentifier, getComponentIdentifier, getComponentConfiguration, loading = false, interactionMetadata }) {
  const taskInteractionId = useRandomId();
  const tableInteractionAttributes = useDOMAttribute(elementRef, "data-analytics-task-interaction-id", taskInteractionId);
  const { isInFunnel } = useFunnel();
  const lastUserAction = (0, import_react22.useRef)(null);
  const capturedUserAction = (0, import_react22.useRef)(null);
  const loadingStartTime = (0, import_react22.useRef)(null);
  const metadata = (0, import_react22.useRef)({ itemCount, getComponentIdentifier, getComponentConfiguration, interactionMetadata });
  metadata.current = { itemCount, getComponentIdentifier, getComponentConfiguration, interactionMetadata };
  (0, import_react22.useEffect)(() => {
    if (isInFunnel) {
      return;
    }
    ComponentMetrics.componentMounted({
      taskInteractionId,
      componentName: "table",
      componentConfiguration: metadata.current.getComponentConfiguration()
    });
  }, [taskInteractionId, isInFunnel]);
  (0, import_react22.useEffect)(() => {
    if (loading) {
      loadingStartTime.current = performance.now();
      if (lastUserAction.current && lastUserAction.current.time > performance.now() - USER_ACTION_TIME_LIMIT) {
        capturedUserAction.current = lastUserAction.current.name;
      } else {
        capturedUserAction.current = null;
      }
    }
  }, [loading]);
  useEffectOnUpdate(() => {
    var _a, _b;
    if (!loading && loadingStartTime.current !== null) {
      const loadingDuration = performance.now() - loadingStartTime.current;
      loadingStartTime.current = null;
      PerformanceMetrics.tableInteraction({
        userAction: (_a = capturedUserAction.current) !== null && _a !== void 0 ? _a : "",
        interactionTime: Math.round(loadingDuration),
        interactionMetadata: metadata.current.interactionMetadata(),
        componentIdentifier: metadata.current.getComponentIdentifier(),
        instanceIdentifier,
        noOfResourcesInTable: metadata.current.itemCount
      });
      if (!isInFunnel) {
        ComponentMetrics.componentUpdated({
          taskInteractionId,
          componentName: "table",
          actionType: (_b = capturedUserAction.current) !== null && _b !== void 0 ? _b : "",
          componentConfiguration: metadata.current.getComponentConfiguration()
        });
      }
    }
  }, [instanceIdentifier, loading, taskInteractionId, isInFunnel]);
  return {
    tableInteractionAttributes,
    setLastUserAction: (name) => void (lastUserAction.current = { name, time: performance.now() })
  };
}

// ../node_modules/@cloudscape-design/components/table/body-cell/index.js
var import_react32 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/body-cell/disabled-inline-editor.js
var import_react30 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/body-cell/click-away.js
var import_react23 = __toESM(require_react());
function useClickAway(onClick) {
  const awayRef = (0, import_react23.useRef)(null);
  const onClickStable = useStableCallback(onClick);
  (0, import_react23.useEffect)(() => {
    function handleClick(event) {
      if (!nodeBelongs(awayRef.current, event.target)) {
        onClickStable();
      }
    }
    document.addEventListener("click", handleClick, { capture: true });
    return () => document.removeEventListener("click", handleClick, { capture: true });
  }, [onClickStable]);
  return awayRef;
}

// ../node_modules/@cloudscape-design/components/table/body-cell/td-element.js
var import_react29 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/expandable-rows/expand-toggle-button.js
var import_react24 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/expandable-rows/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/table/expandable-rows/styles.scoped.css";
var styles_css_default12 = {
  "expand-toggle-icon": "awsui_expand-toggle-icon_1ss49_18ouf_153",
  "expand-toggle-icon-expanded": "awsui_expand-toggle-icon-expanded_1ss49_18ouf_174",
  "expand-toggle": "awsui_expand-toggle_1ss49_18ouf_153"
};

// ../node_modules/@cloudscape-design/components/table/expandable-rows/expand-toggle-button.js
function ExpandToggleButton({ isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel }) {
  const buttonRef = (0, import_react24.useRef)(null);
  const { tabIndex } = useSingleTabStopNavigation(buttonRef);
  return import_react24.default.createElement(
    "button",
    { type: "button", ref: buttonRef, tabIndex, "aria-label": isExpanded ? collapseButtonLabel : expandButtonLabel, "aria-expanded": isExpanded, className: styles_css_default12["expand-toggle"], onClick: onExpandableItemToggle },
    import_react24.default.createElement(internal_default, { size: "small", name: "caret-down-filled", className: clsx_m_default(styles_css_default12["expand-toggle-icon"], isExpanded && styles_css_default12["expand-toggle-icon-expanded"]) })
  );
}

// ../node_modules/@cloudscape-design/components/table/sticky-columns/use-sticky-columns.js
var import_react26 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/area-chart/async-store/index.js
var import_react25 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var AsyncStore = class {
  constructor(state) {
    this._listeners = [];
    this._state = state;
  }
  get() {
    return this._state;
  }
  set(cb) {
    const prevState = this._state;
    const newState = cb(prevState);
    this._state = newState;
    (0, import_react_dom.unstable_batchedUpdates)(() => {
      for (const [selector, listener] of this._listeners) {
        if (selector(prevState) !== selector(newState)) {
          listener(newState, prevState);
        }
      }
    });
  }
  subscribe(selector, listener) {
    this._listeners.push([selector, listener]);
    return () => this.unsubscribe(listener);
  }
  unsubscribe(listener) {
    for (let index = 0; index < this._listeners.length; index++) {
      const [, storedListener] = this._listeners[index];
      if (storedListener === listener) {
        this._listeners.splice(index, 1);
        break;
      }
    }
  }
};

// ../node_modules/@cloudscape-design/components/table/sticky-columns/utils.js
function isCellStatesEqual(s1, s2) {
  if (s1 && s2) {
    return s1.padInlineStart === s2.padInlineStart && s1.lastInsetInlineStart === s2.lastInsetInlineStart && s1.lastInsetInlineEnd === s2.lastInsetInlineEnd && s1.offset.insetInlineStart === s2.offset.insetInlineStart && s1.offset.insetInlineEnd === s2.offset.insetInlineEnd;
  }
  return s1 === s2;
}
function isWrapperStatesEqual(s1, s2) {
  return s1.scrollPaddingInlineStart === s2.scrollPaddingInlineStart && s1.scrollPaddingInlineEnd === s2.scrollPaddingInlineEnd;
}
function updateCellOffsets(cells, props) {
  var _a, _b, _c, _d;
  const totalColumns = props.visibleColumns.length;
  const firstColumnsWidths = [];
  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsFirst); i++) {
    const element = cells.get(props.visibleColumns[i]);
    const cellWidth = element ? getLogicalBoundingClientRect(element).inlineSize : 0;
    firstColumnsWidths[i] = ((_a = firstColumnsWidths[i - 1]) !== null && _a !== void 0 ? _a : 0) + cellWidth;
  }
  const lastColumnsWidths = [];
  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsLast); i++) {
    const element = cells.get(props.visibleColumns[totalColumns - 1 - i]);
    const cellWidth = element ? getLogicalBoundingClientRect(element).inlineSize : 0;
    lastColumnsWidths[i] = ((_b = lastColumnsWidths[i - 1]) !== null && _b !== void 0 ? _b : 0) + cellWidth;
  }
  const stickyWidthInlineStart = (_c = firstColumnsWidths[props.stickyColumnsFirst - 1]) !== null && _c !== void 0 ? _c : 0;
  const stickyWidthInlineEnd = (_d = lastColumnsWidths[props.stickyColumnsLast - 1]) !== null && _d !== void 0 ? _d : 0;
  const offsets = props.visibleColumns.reduce((map, columnId, columnIndex) => {
    var _a2, _b2;
    return map.set(columnId, {
      first: (_a2 = firstColumnsWidths[columnIndex - 1]) !== null && _a2 !== void 0 ? _a2 : 0,
      last: (_b2 = lastColumnsWidths[totalColumns - 1 - columnIndex - 1]) !== null && _b2 !== void 0 ? _b2 : 0
    });
  }, /* @__PURE__ */ new Map());
  return { offsets, stickyWidthInlineStart, stickyWidthInlineEnd };
}

// ../node_modules/@cloudscape-design/components/table/sticky-columns/use-sticky-columns.js
var MINIMUM_SCROLLABLE_SPACE = 148;
function useStickyColumns({ visibleColumns, stickyColumnsFirst, stickyColumnsLast }) {
  const store = (0, import_react26.useMemo)(() => new StickyColumnsStore(), []);
  const wrapperRef = (0, import_react26.useRef)(null);
  const tableRef = (0, import_react26.useRef)(null);
  const cellsRef = (0, import_react26.useRef)(/* @__PURE__ */ new Map());
  const hasStickyColumns = stickyColumnsFirst + stickyColumnsLast > 0;
  const updateStickyStyles = useStableCallback(() => {
    if (wrapperRef.current && tableRef.current) {
      store.updateCellStyles({
        wrapper: wrapperRef.current,
        table: tableRef.current,
        cells: cellsRef.current,
        visibleColumns,
        stickyColumnsFirst,
        stickyColumnsLast
      });
    }
  });
  useResizeObserver(wrapperRef, updateStickyStyles);
  useResizeObserver(tableRef, updateStickyStyles);
  (0, import_react26.useEffect)(() => {
    if (wrapperRef.current && tableRef.current) {
      store.updateCellStyles({
        wrapper: wrapperRef.current,
        table: tableRef.current,
        cells: cellsRef.current,
        visibleColumns,
        stickyColumnsFirst,
        stickyColumnsLast
      });
    }
  }, [store, stickyColumnsFirst, stickyColumnsLast, visibleColumns]);
  (0, import_react26.useEffect)(() => {
    if (!hasStickyColumns) {
      return;
    }
    const selector = (state) => state.wrapperState;
    const updateWrapperStyles = (state, prev) => {
      if (isWrapperStatesEqual(state, prev)) {
        return;
      }
      if (wrapperRef.current) {
        wrapperRef.current.style.scrollPaddingInlineStart = state.scrollPaddingInlineStart + "px";
        wrapperRef.current.style.scrollPaddingInlineEnd = state.scrollPaddingInlineEnd + "px";
      }
    };
    const unsubscribe = store.subscribe(selector, (newState, prevState) => updateWrapperStyles(selector(newState), selector(prevState)));
    return unsubscribe;
  }, [store, hasStickyColumns]);
  const setWrapper = (0, import_react26.useCallback)((node) => {
    if (wrapperRef.current) {
      wrapperRef.current.removeEventListener("scroll", updateStickyStyles);
    }
    if (node && hasStickyColumns) {
      node.addEventListener("scroll", updateStickyStyles);
    }
    wrapperRef.current = node;
  }, [hasStickyColumns, updateStickyStyles]);
  const setTable = (0, import_react26.useCallback)((node) => {
    tableRef.current = node;
  }, []);
  const setCell = (0, import_react26.useCallback)((columnId, node) => {
    if (node) {
      cellsRef.current.set(columnId, node);
    } else {
      cellsRef.current.delete(columnId);
    }
  }, []);
  return {
    store,
    style: {
      // Provide wrapper styles as props so that a re-render won't cause invalidation.
      wrapper: hasStickyColumns ? Object.assign({}, store.get().wrapperState) : void 0
    },
    refs: { wrapper: setWrapper, table: setTable, cell: setCell }
  };
}
function useStickyCellStyles({ stickyColumns, columnId, getClassName }) {
  var _a;
  const setCell = stickyColumns.refs.cell;
  const unsubscribeRef = (0, import_react26.useRef)(null);
  const refCallback = (0, import_react26.useCallback)(
    (cellElement) => {
      if (unsubscribeRef.current) {
        unsubscribeRef.current();
      }
      setCell(columnId, cellElement);
      const selector = (state) => {
        var _a2;
        return (_a2 = state.cellState.get(columnId)) !== null && _a2 !== void 0 ? _a2 : null;
      };
      const updateCellStyles = (state, prev) => {
        if (isCellStatesEqual(state, prev)) {
          return;
        }
        const className = getClassName(state);
        if (cellElement) {
          Object.keys(className).forEach((key) => {
            if (className[key]) {
              cellElement.classList.add(key);
            } else {
              cellElement.classList.remove(key);
            }
          });
          cellElement.style.insetInlineStart = (state === null || state === void 0 ? void 0 : state.offset.insetInlineStart) !== void 0 ? `${state.offset.insetInlineStart}px` : "";
          cellElement.style.insetInlineEnd = (state === null || state === void 0 ? void 0 : state.offset.insetInlineEnd) !== void 0 ? `${state.offset.insetInlineEnd}px` : "";
        }
      };
      if (cellElement) {
        unsubscribeRef.current = stickyColumns.store.subscribe(selector, (newState, prevState) => {
          updateCellStyles(selector(newState), selector(prevState));
        });
      }
    },
    // getClassName is expected to be pure
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [columnId, setCell, stickyColumns.store]
  );
  const cellStyles = stickyColumns.store.get().cellState.get(columnId);
  return {
    ref: refCallback,
    className: cellStyles ? clsx_m_default(getClassName(cellStyles)) : void 0,
    style: (_a = cellStyles === null || cellStyles === void 0 ? void 0 : cellStyles.offset) !== null && _a !== void 0 ? _a : void 0
  };
}
var StickyColumnsStore = class extends AsyncStore {
  constructor() {
    super({ cellState: /* @__PURE__ */ new Map(), wrapperState: { scrollPaddingInlineStart: 0, scrollPaddingInlineEnd: 0 } });
    this.cellOffsets = {
      offsets: /* @__PURE__ */ new Map(),
      stickyWidthInlineStart: 0,
      stickyWidthInlineEnd: 0
    };
    this.isStuckToTheInlineStart = false;
    this.isStuckToTheInlineEnd = false;
    this.padInlineStart = false;
    this.generateCellStyles = (props) => {
      const isEnabled = this.isEnabled(props);
      const lastLeftStickyColumnIndex = props.stickyColumnsFirst - 1;
      const lastRightStickyColumnIndex = props.visibleColumns.length - props.stickyColumnsLast;
      return props.visibleColumns.reduce((acc, columnId, index) => {
        var _a, _b, _c, _d;
        let stickySide = "non-sticky";
        if (index < props.stickyColumnsFirst) {
          stickySide = "inline-start";
        } else if (index >= props.visibleColumns.length - props.stickyColumnsLast) {
          stickySide = "inline-end";
        }
        if (!isEnabled || stickySide === "non-sticky") {
          return acc;
        }
        const isFirstColumn = index === 0;
        const stickyColumnOffsetLeft = (_b = (_a = this.cellOffsets.offsets.get(columnId)) === null || _a === void 0 ? void 0 : _a.first) !== null && _b !== void 0 ? _b : 0;
        const stickyColumnOffsetRight = (_d = (_c = this.cellOffsets.offsets.get(columnId)) === null || _c === void 0 ? void 0 : _c.last) !== null && _d !== void 0 ? _d : 0;
        acc.set(columnId, {
          padInlineStart: isFirstColumn && this.padInlineStart,
          lastInsetInlineStart: this.isStuckToTheInlineStart && lastLeftStickyColumnIndex === index,
          lastInsetInlineEnd: this.isStuckToTheInlineEnd && lastRightStickyColumnIndex === index,
          offset: {
            insetInlineStart: stickySide === "inline-start" ? stickyColumnOffsetLeft : void 0,
            insetInlineEnd: stickySide === "inline-end" ? stickyColumnOffsetRight : void 0
          }
        });
        return acc;
      }, /* @__PURE__ */ new Map());
    };
    this.updateCellOffsets = (props) => {
      this.cellOffsets = updateCellOffsets(props.cells, props);
    };
    this.isEnabled = (props) => {
      const noStickyColumns = props.stickyColumnsFirst + props.stickyColumnsLast === 0;
      if (noStickyColumns) {
        return false;
      }
      const wrapperWidth = getLogicalBoundingClientRect(props.wrapper).inlineSize;
      const tableWidth = getLogicalBoundingClientRect(props.table).inlineSize;
      const isWrapperScrollable = tableWidth > wrapperWidth;
      if (!isWrapperScrollable) {
        return false;
      }
      const totalStickySpace = this.cellOffsets.stickyWidthInlineStart + this.cellOffsets.stickyWidthInlineEnd;
      const tablePaddingLeft = parseFloat(getComputedStyle(props.table).paddingLeft) || 0;
      const tablePaddingRight = parseFloat(getComputedStyle(props.table).paddingRight) || 0;
      const hasEnoughScrollableSpace = totalStickySpace + MINIMUM_SCROLLABLE_SPACE + tablePaddingLeft + tablePaddingRight < wrapperWidth;
      if (!hasEnoughScrollableSpace) {
        return false;
      }
      return true;
    };
  }
  updateCellStyles(props) {
    const hasStickyColumns = props.stickyColumnsFirst + props.stickyColumnsLast > 0;
    const hadStickyColumns = this.cellOffsets.offsets.size > 0;
    if (hasStickyColumns || hadStickyColumns) {
      this.updateScroll(props);
      this.updateCellOffsets(props);
      this.set(() => ({
        cellState: this.generateCellStyles(props),
        wrapperState: {
          scrollPaddingInlineStart: this.cellOffsets.stickyWidthInlineStart,
          scrollPaddingInlineEnd: this.cellOffsets.stickyWidthInlineEnd
        }
      }));
    }
  }
  updateScroll(props) {
    const wrapperScrollInlineStart = getScrollInlineStart(props.wrapper);
    const wrapperScrollWidth = props.wrapper.scrollWidth;
    const wrapperClientWidth = props.wrapper.clientWidth;
    const tablePaddingInlineStart = parseFloat(getComputedStyle(props.table).paddingInlineStart) || 0;
    const tablePaddingInlineEnd = parseFloat(getComputedStyle(props.table).paddingInlineEnd) || 0;
    this.isStuckToTheInlineStart = wrapperScrollInlineStart > tablePaddingInlineStart;
    this.isStuckToTheInlineEnd = Math.ceil(wrapperScrollInlineStart) < wrapperScrollWidth - wrapperClientWidth - tablePaddingInlineEnd;
    this.padInlineStart = tablePaddingInlineStart !== 0 && this.isStuckToTheInlineStart;
  }
};

// ../node_modules/@cloudscape-design/components/table/table-role/table-role-helper.js
var stateToAriaSort = {
  sortable: "none",
  ascending: "ascending",
  descending: "descending"
};
var getAriaSort = (sortingState) => stateToAriaSort[sortingState];
function getTableRoleProps(options) {
  const nativeProps = {};
  nativeProps.role = options.tableRole === "grid-default" ? "grid" : options.tableRole;
  nativeProps["aria-label"] = options.ariaLabel;
  nativeProps["aria-labelledby"] = options.ariaLabelledby;
  nativeProps["aria-rowcount"] = typeof options.totalItemsCount === "number" ? options.totalItemsCount + 1 : -1;
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colcount"] = options.totalColumnsCount;
  }
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps.tabIndex = -1;
  }
  return nativeProps;
}
function getTableWrapperRoleProps(options) {
  const nativeProps = {};
  if (options.isScrollable) {
    nativeProps.role = "region";
    nativeProps.tabIndex = 0;
    nativeProps["aria-label"] = options.ariaLabel;
    nativeProps["aria-labelledby"] = options.ariaLabelledby;
  }
  return nativeProps;
}
function getTableHeaderRowRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "grid-default" || options.tableRole === "treegrid") {
    nativeProps["aria-rowindex"] = 1;
  }
  return nativeProps;
}
function getTableRowRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-rowindex"] = (options.firstIndex || 1) + options.rowIndex + 1;
  } else if (options.firstIndex !== void 0) {
    nativeProps["aria-rowindex"] = options.firstIndex + options.rowIndex + 1;
  }
  if (options.tableRole === "treegrid" && options.level && options.level !== 0) {
    nativeProps["aria-level"] = options.level;
  }
  if (options.tableRole === "treegrid" && options.setSize) {
    nativeProps["aria-setsize"] = options.setSize;
  }
  if (options.tableRole === "treegrid" && options.posInSet) {
    nativeProps["aria-posinset"] = options.posInSet;
  }
  return nativeProps;
}
function getTableColHeaderRoleProps(options) {
  const nativeProps = {};
  nativeProps.scope = "col";
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colindex"] = options.colIndex + 1;
  }
  if (options.sortingStatus) {
    nativeProps["aria-sort"] = getAriaSort(options.sortingStatus);
  }
  return nativeProps;
}
function getTableCellRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colindex"] = options.colIndex + 1;
  }
  if (options.isRowHeader) {
    nativeProps.scope = "row";
  }
  return nativeProps;
}

// ../node_modules/@cloudscape-design/components/table/table-role/grid-navigation.js
var import_react27 = __toESM(require_react());
var import_react28 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/internal/utils/handle-key.js
function isEventLike(event) {
  return isHTMLElement(event.currentTarget) || isSVGElement(event.currentTarget);
}
function handleKey(event, { onActivate, onBlockEnd, onBlockStart, onDefault, onEnd, onEscape, onHome, onInlineEnd, onInlineStart, onPageDown, onPageUp }) {
  switch (event.keyCode) {
    case KeyCode.down:
      onBlockEnd === null || onBlockEnd === void 0 ? void 0 : onBlockEnd();
      break;
    case KeyCode.end:
      onEnd === null || onEnd === void 0 ? void 0 : onEnd();
      break;
    case KeyCode.enter:
    case KeyCode.space:
      onActivate === null || onActivate === void 0 ? void 0 : onActivate();
      break;
    case KeyCode.escape:
      onEscape === null || onEscape === void 0 ? void 0 : onEscape();
      break;
    case KeyCode.home:
      onHome === null || onHome === void 0 ? void 0 : onHome();
      break;
    case KeyCode.left:
      getIsRtl(event.currentTarget) ? onInlineEnd === null || onInlineEnd === void 0 ? void 0 : onInlineEnd() : onInlineStart === null || onInlineStart === void 0 ? void 0 : onInlineStart();
      break;
    case KeyCode.pageDown:
      onPageDown === null || onPageDown === void 0 ? void 0 : onPageDown();
      break;
    case KeyCode.pageUp:
      onPageUp === null || onPageUp === void 0 ? void 0 : onPageUp();
      break;
    case KeyCode.right:
      getIsRtl(event.currentTarget) ? onInlineStart === null || onInlineStart === void 0 ? void 0 : onInlineStart() : onInlineEnd === null || onInlineEnd === void 0 ? void 0 : onInlineEnd();
      break;
    case KeyCode.up:
      onBlockStart === null || onBlockStart === void 0 ? void 0 : onBlockStart();
      break;
    default:
      onDefault === null || onDefault === void 0 ? void 0 : onDefault();
      break;
  }
}

// ../node_modules/@cloudscape-design/components/table/table-role/utils.js
function getClosestCell(element) {
  return element.closest("td,th");
}
function isElementDisabled(element) {
  if (element instanceof HTMLInputElement || element instanceof HTMLButtonElement) {
    return element.disabled;
  }
  return false;
}
function defaultIsSuppressed(target) {
  let current = target;
  while (current) {
    if (isTableCell(current)) {
      return false;
    }
    if (current.getAttribute("role") === "dialog" || current.getAttribute("data-awsui-table-suppress-navigation") === "true") {
      return true;
    }
    current = current.parentElement;
  }
  return false;
}
function findTableRowByAriaRowIndex(table, targetAriaRowIndex, delta) {
  var _a;
  let targetRow = null;
  const rowElements = Array.from(table.querySelectorAll("tr[aria-rowindex]"));
  if (delta < 0) {
    rowElements.reverse();
  }
  for (const element of rowElements) {
    const rowIndex = parseInt((_a = element.getAttribute("aria-rowindex")) !== null && _a !== void 0 ? _a : "");
    targetRow = element;
    if (rowIndex === targetAriaRowIndex) {
      break;
    }
    if (delta >= 0 && rowIndex > targetAriaRowIndex) {
      break;
    }
    if (delta < 0 && rowIndex < targetAriaRowIndex) {
      break;
    }
  }
  return targetRow;
}
function findTableRowCellByAriaColIndex(tableRow, targetAriaColIndex, delta) {
  var _a;
  let targetCell = null;
  const cellElements = Array.from(tableRow.querySelectorAll("td[aria-colindex],th[aria-colindex]"));
  if (delta < 0) {
    cellElements.reverse();
  }
  for (const element of cellElements) {
    const columnIndex = parseInt((_a = element.getAttribute("aria-colindex")) !== null && _a !== void 0 ? _a : "");
    targetCell = element;
    if (columnIndex === targetAriaColIndex) {
      break;
    }
    if (delta >= 0 && columnIndex > targetAriaColIndex) {
      break;
    }
    if (delta < 0 && columnIndex < targetAriaColIndex) {
      break;
    }
  }
  return targetCell;
}
function isTableCell(element) {
  return element.tagName === "TD" || element.tagName === "TH";
}
function focusNextElement(element) {
  if (element) {
    if (isTableCell(element) && element.tabIndex !== 0) {
      element.tabIndex = -1;
    }
    element.focus();
  }
}

// ../node_modules/@cloudscape-design/components/table/table-role/grid-navigation.js
function GridNavigationProvider({ keyboardNavigation, pageSize, getTable, children }) {
  const navigationAPI = (0, import_react27.useRef)(null);
  const gridNavigation = (0, import_react28.useMemo)(() => new GridNavigationProcessor(navigationAPI), []);
  const getTableStable = useStableCallback(getTable);
  (0, import_react28.useEffect)(() => {
    if (keyboardNavigation) {
      const table = getTableStable();
      table && gridNavigation.init(table);
    }
    return () => gridNavigation.cleanup();
  }, [keyboardNavigation, gridNavigation, getTableStable]);
  (0, import_react28.useEffect)(() => {
    gridNavigation.update({ pageSize });
  }, [gridNavigation, pageSize]);
  (0, import_react28.useEffect)(() => {
    if (keyboardNavigation) {
      gridNavigation.refresh();
    }
  });
  return import_react27.default.createElement(SingleTabStopNavigationProvider, { ref: navigationAPI, navigationActive: keyboardNavigation, getNextFocusTarget: gridNavigation.getNextFocusTarget, isElementSuppressed: gridNavigation.isElementSuppressed, onRegisterFocusable: gridNavigation.onRegisterFocusable, onUnregisterActive: gridNavigation.onUnregisterActive }, children);
}
var GridNavigationProcessor = class {
  constructor(navigationAPI) {
    this._pageSize = 0;
    this._table = null;
    this.focusedCell = null;
    this.focusInside = false;
    this.keepUserIndex = false;
    this.onRegisterFocusable = (focusableElement) => {
      var _a;
      if (!this.focusInside) {
        return;
      }
      const focusedElement = (_a = this.focusedCell) === null || _a === void 0 ? void 0 : _a.element;
      if (focusedElement && isTableCell(focusedElement) && focusedElement.contains(focusableElement)) {
        focusableElement.focus({ preventScroll: true });
      }
    };
    this.onUnregisterActive = () => {
      if (this.focusedCell && !nodeBelongs(this.table, this.focusedCell.element)) {
        this.moveFocusBy(this.focusedCell, { x: 0, y: 0 });
      }
    };
    this.getNextFocusTarget = () => {
      var _a;
      const cell = this.focusedCell;
      const firstTableCell = this.table.querySelector("td,th");
      let focusTarget = (_a = firstTableCell && this.getFocusablesFrom(firstTableCell)[0]) !== null && _a !== void 0 ? _a : firstTableCell;
      if (cell) {
        focusTarget = this.getNextFocusable(cell, { x: 0, y: 0 });
      }
      return focusTarget;
    };
    this.isElementSuppressed = (element) => {
      if (!this.focusedCell) {
        return false;
      }
      return !element || defaultIsSuppressed(element);
    };
    this.onFocusin = (event) => {
      var _a;
      this.focusInside = true;
      if (!(event.target instanceof HTMLElement)) {
        return;
      }
      this.updateFocusedCell(event.target);
      if (!this.focusedCell) {
        return;
      }
      (_a = this._navigationAPI.current) === null || _a === void 0 ? void 0 : _a.updateFocusTarget();
      const focusedElement = this.focusedCell.element;
      const nextTarget = isTableCell(focusedElement) ? this.getFocusablesFrom(focusedElement)[0] : null;
      if (nextTarget) {
        nextTarget.focus({ preventScroll: true });
      } else {
        this.keepUserIndex = false;
      }
    };
    this.onFocusout = () => {
      this.focusInside = false;
    };
    this.onKeydown = (event) => {
      if (!this.focusedCell) {
        return;
      }
      const keys = [
        KeyCode.up,
        KeyCode.down,
        KeyCode.left,
        KeyCode.right,
        KeyCode.pageUp,
        KeyCode.pageDown,
        KeyCode.home,
        KeyCode.end
      ];
      const ctrlKey = event.ctrlKey ? 1 : 0;
      const altKey = event.altKey ? 1 : 0;
      const shiftKey = event.shiftKey ? 1 : 0;
      const metaKey = event.metaKey ? 1 : 0;
      const modifiersPressed = ctrlKey + altKey + shiftKey + metaKey;
      const invalidModifierCombination = modifiersPressed && !event.ctrlKey || event.ctrlKey && event.keyCode !== KeyCode.home && event.keyCode !== KeyCode.end;
      if (invalidModifierCombination || this.isElementSuppressed(document.activeElement) || !this.isRegistered(document.activeElement) || keys.indexOf(event.keyCode) === -1) {
        return;
      }
      const from = this.focusedCell;
      event.preventDefault();
      isEventLike(event) && handleKey(event, {
        onBlockStart: () => this.moveFocusBy(from, { y: -1, x: 0 }),
        onBlockEnd: () => this.moveFocusBy(from, { y: 1, x: 0 }),
        onInlineStart: () => this.moveFocusBy(from, { y: 0, x: -1 }),
        onInlineEnd: () => this.moveFocusBy(from, { y: 0, x: 1 }),
        onPageUp: () => this.moveFocusBy(from, { y: -this.pageSize, x: 0 }),
        onPageDown: () => this.moveFocusBy(from, { y: this.pageSize, x: 0 }),
        onHome: () => event.ctrlKey ? this.moveFocusBy(from, { y: -Infinity, x: -Infinity }) : this.moveFocusBy(from, { y: 0, x: -Infinity }),
        onEnd: () => event.ctrlKey ? this.moveFocusBy(from, { y: Infinity, x: Infinity }) : this.moveFocusBy(from, { y: 0, x: Infinity })
      });
    };
    this._navigationAPI = navigationAPI;
  }
  init(table) {
    this._table = table;
    const controller = new AbortController();
    this.table.addEventListener("focusin", this.onFocusin, { signal: controller.signal });
    this.table.addEventListener("focusout", this.onFocusout, { signal: controller.signal });
    this.table.addEventListener("keydown", this.onKeydown, { signal: controller.signal });
    this.cleanup = () => {
      controller.abort();
    };
  }
  cleanup() {
  }
  update({ pageSize }) {
    this._pageSize = pageSize;
  }
  refresh() {
    setTimeout(() => {
      var _a, _b;
      if (this._table) {
        this.updateFocusedCell((_a = this.focusedCell) === null || _a === void 0 ? void 0 : _a.element);
        (_b = this._navigationAPI.current) === null || _b === void 0 ? void 0 : _b.updateFocusTarget();
      }
    }, 0);
  }
  get pageSize() {
    return this._pageSize;
  }
  get table() {
    if (!this._table) {
      throw new Error("Invariant violation: GridNavigationProcessor is used before initialization.");
    }
    return this._table;
  }
  moveFocusBy(cell, delta) {
    if (delta.y !== 0 && delta.x === 0) {
      this.keepUserIndex = true;
    }
    focusNextElement(this.getNextFocusable(cell, delta));
  }
  isRegistered(element) {
    var _a, _b;
    return !element || ((_b = (_a = this._navigationAPI.current) === null || _a === void 0 ? void 0 : _a.isRegistered(element)) !== null && _b !== void 0 ? _b : false);
  }
  updateFocusedCell(focusedElement) {
    var _a, _b, _c, _d, _e, _f;
    if (!focusedElement) {
      return;
    }
    const cellElement = getClosestCell(focusedElement);
    const rowElement = cellElement === null || cellElement === void 0 ? void 0 : cellElement.closest("tr");
    if (!cellElement || !rowElement) {
      return;
    }
    const colIndex = parseInt((_a = cellElement.getAttribute("aria-colindex")) !== null && _a !== void 0 ? _a : "");
    const rowIndex = parseInt((_b = rowElement.getAttribute("aria-rowindex")) !== null && _b !== void 0 ? _b : "");
    if (isNaN(colIndex) || isNaN(rowIndex)) {
      return;
    }
    const cellFocusables = this.getFocusablesFrom(cellElement);
    const elementIndex = cellFocusables.indexOf(focusedElement);
    const prevColIndex = (_d = (_c = this.focusedCell) === null || _c === void 0 ? void 0 : _c.colIndex) !== null && _d !== void 0 ? _d : -1;
    const prevElementIndex = (_f = (_e = this.focusedCell) === null || _e === void 0 ? void 0 : _e.elementIndex) !== null && _f !== void 0 ? _f : -1;
    this.focusedCell = {
      rowIndex,
      colIndex: this.keepUserIndex && prevColIndex !== -1 ? prevColIndex : colIndex,
      elementIndex: this.keepUserIndex && prevElementIndex !== -1 ? prevElementIndex : elementIndex,
      element: focusedElement
    };
  }
  getNextFocusable(from, delta) {
    var _a;
    const targetAriaRowIndex = from.rowIndex + delta.y;
    const targetRow = findTableRowByAriaRowIndex(this.table, targetAriaRowIndex, delta.y);
    if (!targetRow) {
      return null;
    }
    const cellElement = getClosestCell(from.element);
    const cellFocusables = cellElement ? this.getFocusablesFrom(cellElement) : [];
    const nextElementIndex = from.elementIndex + delta.x;
    const isValidDirection = !!delta.x;
    const isValidIndex = from.elementIndex !== -1 && 0 <= nextElementIndex && nextElementIndex < cellFocusables.length;
    const isTargetDifferent = from.element !== cellFocusables[nextElementIndex];
    if (isValidDirection && isValidIndex && isTargetDifferent) {
      return cellFocusables[nextElementIndex];
    }
    const targetAriaColIndex = from.colIndex + delta.x;
    const targetCell = findTableRowCellByAriaColIndex(targetRow, targetAriaColIndex, delta.x);
    if (!targetCell) {
      return null;
    }
    if (targetCell === cellElement && delta.x !== 0) {
      return null;
    }
    const targetCellFocusables = this.getFocusablesFrom(targetCell);
    let focusIndex = from.elementIndex;
    if (isFinite(delta.x) && delta.x > 0 || delta.x === -Infinity) {
      focusIndex = 0;
    }
    if (isFinite(delta.x) && delta.x < 0 || delta.x === Infinity) {
      focusIndex = targetCellFocusables.length - 1;
    }
    return (_a = targetCellFocusables[focusIndex]) !== null && _a !== void 0 ? _a : targetCell;
  }
  getFocusablesFrom(target) {
    const isElementRegistered = (element) => {
      var _a;
      return (_a = this._navigationAPI.current) === null || _a === void 0 ? void 0 : _a.isRegistered(element);
    };
    return getAllFocusables(target).filter((el) => isElementRegistered(el) && !isElementDisabled(el));
  }
};

// ../node_modules/@cloudscape-design/components/table/utils.js
var applyTrackBy = (trackBy, item) => {
  if (typeof trackBy === "function") {
    return trackBy(item);
  }
  return item[trackBy];
};
var getItemKey = (trackBy, item, index) => {
  if (!trackBy) {
    return index;
  }
  return applyTrackBy(trackBy, item);
};
var getTrackableValue2 = (trackBy, item) => {
  if (!trackBy) {
    return item;
  }
  return applyTrackBy(trackBy, item);
};
var getColumnKey = (column, index) => {
  return column.id || index;
};
var toContainerVariant = (variant) => {
  const isDefaultVariant = !variant || variant === "container";
  return isDefaultVariant ? "default" : variant === "borderless" ? "embedded" : variant;
};
function checkSortingState(columnDefinitions, sortingComparator) {
  const matchedColumn = columnDefinitions.filter((column) => column.sortingComparator === sortingComparator)[0];
  if (!matchedColumn) {
    warnOnce("Table", "Currently active sorting comparator was not found in any columns. Make sure to provide the same comparator function instance on each render.");
  }
}
function getVisibleColumnDefinitions({ columnDisplay, visibleColumns, columnDefinitions }) {
  if (columnDisplay) {
    return getVisibleColumnDefinitionsFromColumnDisplay({ columnDisplay, columnDefinitions });
  } else if (visibleColumns) {
    return getVisibleColumnDefinitionsFromVisibleColumns({ visibleColumns, columnDefinitions });
  } else {
    return columnDefinitions;
  }
}
function getVisibleColumnDefinitionsFromColumnDisplay({ columnDisplay, columnDefinitions }) {
  const columnDefinitionsById = columnDefinitions.reduce((accumulator, item) => item.id === void 0 ? accumulator : Object.assign(Object.assign({}, accumulator), { [item.id]: item }), {});
  return columnDisplay.filter((item) => item.visible).map((item) => columnDefinitionsById[item.id]).filter(Boolean);
}
function getVisibleColumnDefinitionsFromVisibleColumns({ visibleColumns, columnDefinitions }) {
  const ids = new Set(visibleColumns);
  return columnDefinitions.filter(({ id }) => id !== void 0 && ids.has(id));
}
function getStickyClassNames(styles, props) {
  return {
    [styles["sticky-cell"]]: !!props,
    [styles["sticky-cell-pad-inline-start"]]: !!(props === null || props === void 0 ? void 0 : props.padInlineStart),
    [styles["sticky-cell-last-inline-start"]]: !!(props === null || props === void 0 ? void 0 : props.lastInsetInlineStart),
    [styles["sticky-cell-last-inline-end"]]: !!(props === null || props === void 0 ? void 0 : props.lastInsetInlineEnd)
  };
}

// ../node_modules/@cloudscape-design/components/table/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/table/styles.scoped.css";
var styles_css_default13 = {
  "root": "awsui_root_wih1l_ez3lf_153",
  "tools": "awsui_tools_wih1l_ez3lf_164",
  "tools-filtering": "awsui_tools-filtering_wih1l_ez3lf_172",
  "tools-align-right": "awsui_tools-align-right_wih1l_ez3lf_186",
  "tools-pagination": "awsui_tools-pagination_wih1l_ez3lf_190",
  "tools-preferences": "awsui_tools-preferences_wih1l_ez3lf_190",
  "tools-small": "awsui_tools-small_wih1l_ez3lf_196",
  "table": "awsui_table_wih1l_ez3lf_202",
  "table-layout-fixed": "awsui_table-layout-fixed_wih1l_ez3lf_208",
  "wrapper": "awsui_wrapper_wih1l_ez3lf_212",
  "variant-stacked": "awsui_variant-stacked_wih1l_ez3lf_219",
  "wrapper-content-measure": "awsui_wrapper-content-measure_wih1l_ez3lf_219",
  "variant-container": "awsui_variant-container_wih1l_ez3lf_219",
  "has-footer": "awsui_has-footer_wih1l_ez3lf_222",
  "has-header": "awsui_has-header_wih1l_ez3lf_225",
  "cell-merged": "awsui_cell-merged_wih1l_ez3lf_242",
  "cell-merged-content": "awsui_cell-merged-content_wih1l_ez3lf_254",
  "empty": "awsui_empty_wih1l_ez3lf_270",
  "loading": "awsui_loading_wih1l_ez3lf_274",
  "selection-control": "awsui_selection-control_wih1l_ez3lf_283",
  "selection-control-header": "awsui_selection-control-header_wih1l_ez3lf_290",
  "header-secondary": "awsui_header-secondary_wih1l_ez3lf_296",
  "variant-full-page": "awsui_variant-full-page_wih1l_ez3lf_308",
  "table-has-header": "awsui_table-has-header_wih1l_ez3lf_314",
  "header-controls": "awsui_header-controls_wih1l_ez3lf_325",
  "variant-embedded": "awsui_variant-embedded_wih1l_ez3lf_334",
  "variant-borderless": "awsui_variant-borderless_wih1l_ez3lf_334",
  "footer-wrapper": "awsui_footer-wrapper_wih1l_ez3lf_339",
  "footer": "awsui_footer_wih1l_ez3lf_339",
  "footer-with-pagination": "awsui_footer-with-pagination_wih1l_ez3lf_347",
  "footer-pagination": "awsui_footer-pagination_wih1l_ez3lf_355",
  "thead-active": "awsui_thead-active_wih1l_ez3lf_359",
  "row": "awsui_row_wih1l_ez3lf_360",
  "row-selected": "awsui_row-selected_wih1l_ez3lf_361"
};

// ../node_modules/@cloudscape-design/components/table/body-cell/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/table/body-cell/styles.scoped.css";
var styles_css_default14 = {
  "expandable-toggle-wrapper": "awsui_expandable-toggle-wrapper_c6tup_ejkv3_145",
  "body-cell": "awsui_body-cell_c6tup_ejkv3_152",
  "body-cell-content": "awsui_body-cell-content_c6tup_ejkv3_160",
  "expandable-level-0": "awsui_expandable-level-0_c6tup_ejkv3_166",
  "expandable-level-1": "awsui_expandable-level-1_c6tup_ejkv3_173",
  "expandable-level-2": "awsui_expandable-level-2_c6tup_ejkv3_180",
  "expandable-level-3": "awsui_expandable-level-3_c6tup_ejkv3_187",
  "expandable-level-4": "awsui_expandable-level-4_c6tup_ejkv3_194",
  "expandable-level-5": "awsui_expandable-level-5_c6tup_ejkv3_201",
  "expandable-level-6": "awsui_expandable-level-6_c6tup_ejkv3_208",
  "expandable-level-7": "awsui_expandable-level-7_c6tup_ejkv3_215",
  "expandable-level-8": "awsui_expandable-level-8_c6tup_ejkv3_222",
  "expandable-level-9": "awsui_expandable-level-9_c6tup_ejkv3_229",
  "expandable-level-next": "awsui_expandable-level-next_c6tup_ejkv3_236",
  "body-cell-align-top": "awsui_body-cell-align-top_c6tup_ejkv3_254",
  "body-cell-wrap": "awsui_body-cell-wrap_c6tup_ejkv3_260",
  "is-visual-refresh": "awsui_is-visual-refresh_c6tup_ejkv3_357",
  "body-cell-edit-active": "awsui_body-cell-edit-active_c6tup_ejkv3_447",
  "body-cell-expandable": "awsui_body-cell-expandable_c6tup_ejkv3_447",
  "body-cell-editable": "awsui_body-cell-editable_c6tup_ejkv3_447",
  "has-striped-rows": "awsui_has-striped-rows_c6tup_ejkv3_530",
  "sticky-cell-pad-inline-start": "awsui_sticky-cell-pad-inline-start_c6tup_ejkv3_696",
  "has-selection": "awsui_has-selection_c6tup_ejkv3_862",
  "body-cell-first-row": "awsui_body-cell-first-row_c6tup_ejkv3_1031",
  "body-cell-last-row": "awsui_body-cell-last-row_c6tup_ejkv3_1034",
  "body-cell-selected": "awsui_body-cell-selected_c6tup_ejkv3_1034",
  "has-footer": "awsui_has-footer_c6tup_ejkv3_1034",
  "body-cell-shaded": "awsui_body-cell-shaded_c6tup_ejkv3_1044",
  "sticky-cell": "awsui_sticky-cell_c6tup_ejkv3_696",
  "sticky-cell-last-inline-end": "awsui_sticky-cell-last-inline-end_c6tup_ejkv3_1106",
  "sticky-cell-last-inline-start": "awsui_sticky-cell-last-inline-start_c6tup_ejkv3_1115",
  "body-cell-next-selected": "awsui_body-cell-next-selected_c6tup_ejkv3_1137",
  "body-cell-prev-selected": "awsui_body-cell-prev-selected_c6tup_ejkv3_1144",
  "body-cell-editor-wrapper": "awsui_body-cell-editor-wrapper_c6tup_ejkv3_1170",
  "body-cell-success": "awsui_body-cell-success_c6tup_ejkv3_1175",
  "body-cell-editor": "awsui_body-cell-editor_c6tup_ejkv3_1170",
  "body-cell-editor-disabled": "awsui_body-cell-editor-disabled_c6tup_ejkv3_1200",
  "body-cell-editor-row": "awsui_body-cell-editor-row_c6tup_ejkv3_1209",
  "body-cell-editor-controls": "awsui_body-cell-editor-controls_c6tup_ejkv3_1219",
  "body-cell-editor-row-editor": "awsui_body-cell-editor-row-editor_c6tup_ejkv3_1222",
  "body-cell-editor-focusable": "awsui_body-cell-editor-focusable_c6tup_ejkv3_1225",
  "body-cell-editor-icon": "awsui_body-cell-editor-icon_c6tup_ejkv3_1249",
  "resizable-columns": "awsui_resizable-columns_c6tup_ejkv3_1361",
  "expandable-cell-content": "awsui_expandable-cell-content_c6tup_ejkv3_1364",
  "body-cell-edit-disabled-popover": "awsui_body-cell-edit-disabled-popover_c6tup_ejkv3_1415",
  "body-cell-has-success": "awsui_body-cell-has-success_c6tup_ejkv3_1418"
};

// ../node_modules/@cloudscape-design/components/table/body-cell/td-element.js
var TableTdElement = import_react29.default.forwardRef((_a, ref) => {
  var { children, wrapLines, isRowHeader, isFirstRow, isLastRow, isSelected, isNextSelected, isPrevSelected, nativeAttributes, onClick, onFocus, onBlur, isEvenRow, stripedRows, isSelection, hasSelection, hasFooter, columnId, colIndex, stickyState, tableRole, level, isExpandable, isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel, verticalAlign, resizableColumns, resizableStyle, isEditable, isEditing, isEditingDisabled, hasSuccessIcon } = _a, rest = __rest(_a, ["children", "wrapLines", "isRowHeader", "isFirstRow", "isLastRow", "isSelected", "isNextSelected", "isPrevSelected", "nativeAttributes", "onClick", "onFocus", "onBlur", "isEvenRow", "stripedRows", "isSelection", "hasSelection", "hasFooter", "columnId", "colIndex", "stickyState", "tableRole", "level", "isExpandable", "isExpanded", "onExpandableItemToggle", "expandButtonLabel", "collapseButtonLabel", "verticalAlign", "resizableColumns", "resizableStyle", "isEditable", "isEditing", "isEditingDisabled", "hasSuccessIcon"]);
  const Element = isRowHeader ? "th" : "td";
  const isVisualRefresh = useVisualRefresh();
  resizableStyle = resizableColumns ? {} : resizableStyle;
  nativeAttributes = Object.assign(Object.assign({}, nativeAttributes), getTableCellRoleProps({ tableRole, isRowHeader, colIndex }));
  const stickyStyles = useStickyCellStyles({
    stickyColumns: stickyState,
    columnId,
    getClassName: (props) => getStickyClassNames(styles_css_default14, props)
  });
  const cellRefObject = (0, import_react29.useRef)(null);
  const mergedRef = useMergeRefs(stickyStyles.ref, ref, cellRefObject);
  const { tabIndex: cellTabIndex } = useSingleTabStopNavigation(cellRefObject);
  const isEditingActive = isEditing && !isEditingDisabled;
  return import_react29.default.createElement(
    Element,
    Object.assign({ style: Object.assign(Object.assign({}, resizableStyle), stickyStyles.style), className: clsx_m_default(styles_css_default14["body-cell"], isFirstRow && styles_css_default14["body-cell-first-row"], isLastRow && styles_css_default14["body-cell-last-row"], isSelected && styles_css_default14["body-cell-selected"], isNextSelected && styles_css_default14["body-cell-next-selected"], isPrevSelected && styles_css_default14["body-cell-prev-selected"], !isEvenRow && stripedRows && styles_css_default14["body-cell-shaded"], stripedRows && styles_css_default14["has-striped-rows"], isVisualRefresh && styles_css_default14["is-visual-refresh"], isSelection && styles_css_default13["selection-control"], hasSelection && styles_css_default14["has-selection"], hasFooter && styles_css_default14["has-footer"], resizableColumns && styles_css_default14["resizable-columns"], verticalAlign === "top" && styles_css_default14["body-cell-align-top"], isEditable && styles_css_default14["body-cell-editable"], isEditing && !isEditingDisabled && styles_css_default14["body-cell-edit-active"], isEditing && isEditingDisabled && styles_css_default14["body-cell-edit-disabled-popover"], hasSuccessIcon && styles_css_default14["body-cell-has-success"], level !== void 0 && !isEditingActive && styles_css_default14["body-cell-expandable"], level !== void 0 && !isEditingActive && styles_css_default14[`expandable-level-${getLevelClassSuffix(level)}`], stickyStyles.className), onClick, onFocus, onBlur, ref: mergedRef }, nativeAttributes, { tabIndex: cellTabIndex === -1 ? void 0 : cellTabIndex }, copyAnalyticsMetadataAttribute(rest)),
    level !== void 0 && isExpandable && !isEditingActive && import_react29.default.createElement(
      "div",
      { className: styles_css_default14["expandable-toggle-wrapper"] },
      import_react29.default.createElement(ExpandToggleButton, { isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel })
    ),
    import_react29.default.createElement("div", { className: clsx_m_default(styles_css_default14["body-cell-content"], wrapLines && styles_css_default14["body-cell-wrap"]) }, children)
  );
});
function getLevelClassSuffix(level) {
  return 0 <= level && level <= 9 ? level : "next";
}

// ../node_modules/@cloudscape-design/components/table/body-cell/disabled-inline-editor.js
function DisabledInlineEditor(_a) {
  var _b;
  var { item, column, ariaLabels, isEditing, onEditStart, onEditEnd, editDisabledReason } = _a, rest = __rest(_a, ["item", "column", "ariaLabels", "isEditing", "onEditStart", "onEditEnd", "editDisabledReason"]);
  const isExpandableColumn = rest.level !== void 0;
  const clickAwayRef = useClickAway(() => {
    if (isEditing) {
      onEditEnd(true);
    }
  });
  const iconRef = (0, import_react30.useRef)(null);
  const buttonRef = (0, import_react30.useRef)(null);
  const portalRef = (0, import_react30.useRef)(null);
  function handleEscape(event) {
    if (event.key === "Escape") {
      onEditEnd(true);
    }
  }
  const onClick = () => {
    var _a2;
    onEditStart();
    (_a2 = buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  };
  const { targetProps, descriptionEl } = useHiddenDescription(editDisabledReason);
  const portalClasses = usePortalModeClasses(portalRef);
  const { tabIndex } = useSingleTabStopNavigation(buttonRef);
  return import_react30.default.createElement(
    TableTdElement,
    Object.assign({}, rest, { nativeAttributes: { "data-inline-editing-active": isEditing.toString() }, isEditing, isEditingDisabled: true, onClick: !isEditing && !isExpandableColumn ? onClick : void 0, ref: !isExpandableColumn ? clickAwayRef : void 0 }),
    column.cell(item),
    import_react30.default.createElement(
      "div",
      { className: styles_css_default14["body-cell-editor-wrapper"] },
      import_react30.default.createElement(
        "div",
        { ref: isExpandableColumn ? clickAwayRef : void 0 },
        import_react30.default.createElement(
          "button",
          Object.assign({ ref: buttonRef, tabIndex, className: clsx_m_default(styles_css_default14["body-cell-editor"], styles_css_default14["body-cell-editor-disabled"], isExpandableColumn && styles_css_default14["body-cell-editor-focusable"]), onClick: !isEditing && isExpandableColumn ? onClick : void 0, "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column, item), "aria-haspopup": "dialog", "aria-disabled": "true", onKeyDown: handleEscape }, targetProps),
          import_react30.default.createElement(
            "span",
            { className: styles_css_default14["body-cell-editor-icon"] },
            import_react30.default.createElement(internal_default, { name: "lock-private", variant: "normal", __internalRootRef: iconRef })
          ),
          descriptionEl
        )
      )
    ),
    isEditing && import_react30.default.createElement(
      "span",
      { ref: portalRef },
      import_react30.default.createElement(
        Portal,
        null,
        import_react30.default.createElement(
          "span",
          { className: portalClasses },
          import_react30.default.createElement(
            PopoverContainer,
            { size: "medium", fixedWidth: false, position: "top", trackRef: iconRef, arrow: (position) => import_react30.default.createElement(arrow_default, { position }), renderWithPortal: true, zIndex: 2e3 },
            import_react30.default.createElement(
              PopoverBody,
              { dismissButton: false, dismissAriaLabel: void 0, header: null, onDismiss: () => {
              }, overflowVisible: "both" },
              import_react30.default.createElement(internal_default2, { tagName: "span" }, editDisabledReason)
            )
          )
        )
      )
    )
  );
}

// ../node_modules/@cloudscape-design/components/table/body-cell/inline-editor.js
var import_react31 = __toESM(require_react());
var noop = () => void 0;
function InlineEditor({ ariaLabels, item, column, onEditEnd, submitEdit, __onRender }) {
  var _a, _b, _c, _d;
  const [currentEditLoading, setCurrentEditLoading] = (0, import_react31.useState)(false);
  const [currentEditValue, setCurrentEditValue] = (0, import_react31.useState)();
  const i18n = useInternalI18n("table");
  const focusLockRef = (0, import_react31.useRef)(null);
  const cellContext = {
    currentValue: currentEditValue,
    setValue: setCurrentEditValue
  };
  function finishEdit({ cancelled = false, refocusCell = true } = {}) {
    if (!cancelled) {
      setCurrentEditValue(void 0);
    }
    onEditEnd({ cancelled, refocusCell });
  }
  function onSubmitClick(evt) {
    var _a2;
    return __awaiter(this, void 0, void 0, function* () {
      evt.preventDefault();
      if (currentEditValue === void 0) {
        finishEdit();
        return;
      }
      setCurrentEditLoading(true);
      try {
        yield submitEdit(item, column, currentEditValue);
        setCurrentEditLoading(false);
        finishEdit();
      } catch (e) {
        setCurrentEditLoading(false);
        (_a2 = focusLockRef.current) === null || _a2 === void 0 ? void 0 : _a2.focusFirst();
      }
    });
  }
  function onCancel({ reFocusEditedCell = true } = {}) {
    if (currentEditLoading) {
      return;
    }
    finishEdit({ cancelled: true, refocusCell: reFocusEditedCell });
  }
  function handleEscape(event) {
    if (event.key === "Escape") {
      onCancel();
    }
  }
  const clickAwayRef = useClickAway(() => onCancel({ reFocusEditedCell: false }));
  (0, import_react31.useEffect)(() => {
    if (__onRender) {
      const timer = setTimeout(__onRender, 1);
      return () => clearTimeout(timer);
    }
  }, [__onRender]);
  const { ariaLabel = void 0, validation = noop, errorIconAriaLabel, constraintText, editingCell } = column.editConfig;
  return import_react31.default.createElement(
    focus_lock_default,
    { restoreFocus: true, ref: focusLockRef },
    import_react31.default.createElement(
      "div",
      { role: "dialog", ref: clickAwayRef, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, column, item), onKeyDown: handleEscape },
      import_react31.default.createElement(
        "form",
        { onSubmit: onSubmitClick },
        import_react31.default.createElement(
          InternalFormField,
          { stretch: true, label: ariaLabel, constraintText, __hideLabel: true, __disableGutters: true, i18nStrings: { errorIconAriaLabel }, errorText: validation(item, currentEditValue) },
          import_react31.default.createElement(
            "div",
            { className: styles_css_default14["body-cell-editor-row"] },
            import_react31.default.createElement("div", { className: styles_css_default14["body-cell-editor-row-editor"] }, editingCell(item, cellContext)),
            import_react31.default.createElement(
              "span",
              { className: styles_css_default14["body-cell-editor-controls"] },
              import_react31.default.createElement(
                internal_default8,
                { direction: "horizontal", size: "xxs" },
                !currentEditLoading ? import_react31.default.createElement(internal_default3, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.cancelEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column), formAction: "none", iconName: "close", variant: "inline-icon", onClick: () => onCancel() }) : null,
                import_react31.default.createElement(internal_default3, { ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.submitEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column), formAction: "submit", iconName: "check", variant: "inline-icon", loading: currentEditLoading })
              ),
              import_react31.default.createElement(internal_default2, { tagName: "span", hidden: true }, currentEditLoading ? i18n("ariaLabels.submittingEditText", (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.submittingEditText) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column)) : "")
            )
          )
        )
      )
    )
  );
}

// ../node_modules/@cloudscape-design/components/table/body-cell/index.js
var submitHandlerFallback = () => {
  throw new Error("The function `handleSubmit` is required for editable columns");
};
function TableCellEditable(_a) {
  var _b, _c, _d;
  var { item, column, isEditing, onEditStart, onEditEnd, submitEdit, ariaLabels, successfulEdit = false } = _a, rest = __rest(_a, ["item", "column", "isEditing", "onEditStart", "onEditEnd", "submitEdit", "ariaLabels", "successfulEdit"]);
  const i18n = useInternalI18n("table");
  const editActivateRef = (0, import_react32.useRef)(null);
  const tdNativeAttributes = {
    "data-inline-editing-active": isEditing.toString()
  };
  const isFocusMoveNeededRef = (0, import_react32.useRef)(false);
  const isExpandableColumn = rest.level !== void 0;
  (0, import_react32.useEffect)(() => {
    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {
      isFocusMoveNeededRef.current = false;
      editActivateRef.current.focus();
    }
  }, [isEditing]);
  const [hasFocus, setHasFocus] = (0, import_react32.useState)(false);
  const prevSuccessfulEdit = usePrevious(successfulEdit);
  const prevHasFocus = usePrevious(hasFocus);
  const [showSuccessIcon, setShowSuccessIcon] = (0, import_react32.useState)(false);
  (0, import_react32.useEffect)(() => {
    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {
      setShowSuccessIcon(false);
    }
    if (successfulEdit && !prevSuccessfulEdit) {
      setShowSuccessIcon(true);
    }
  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);
  const { tabIndex: editActivateTabIndex } = useSingleTabStopNavigation(editActivateRef);
  return import_react32.default.createElement(TableTdElement, Object.assign({}, rest, { nativeAttributes: tdNativeAttributes, isEditing, hasSuccessIcon: showSuccessIcon && hasFocus, onClick: !isEditing && !isExpandableColumn ? onEditStart : void 0, onFocus: () => setHasFocus(true), onBlur: () => setHasFocus(false) }), isEditing && column.editConfig ? import_react32.default.createElement(InlineEditor, { ariaLabels, column, item, onEditEnd: (options) => {
    setShowSuccessIcon(false);
    isFocusMoveNeededRef.current = options.refocusCell;
    onEditEnd(options.cancelled);
  }, submitEdit: submitEdit !== null && submitEdit !== void 0 ? submitEdit : submitHandlerFallback }) : import_react32.default.createElement(
    import_react32.default.Fragment,
    null,
    column.cell(item),
    showSuccessIcon && hasFocus && import_react32.default.createElement(
      import_react32.default.Fragment,
      null,
      import_react32.default.createElement(
        "span",
        { className: styles_css_default14["body-cell-success"], onMouseDown: (e) => {
          e.preventDefault();
        } },
        import_react32.default.createElement(internal_default, { name: "status-positive", variant: "success", ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column) })
      ),
      import_react32.default.createElement(internal_default2, { tagName: "span", hidden: true }, i18n("ariaLabels.successfulEditLabel", (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column)))
    ),
    import_react32.default.createElement(
      "div",
      { className: styles_css_default14["body-cell-editor-wrapper"] },
      import_react32.default.createElement(
        "button",
        { className: clsx_m_default(styles_css_default14["body-cell-editor"], isExpandableColumn && styles_css_default14["body-cell-editor-focusable"]), "aria-label": (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column, item), ref: editActivateRef, onClick: !isEditing && isExpandableColumn ? onEditStart : void 0, tabIndex: editActivateTabIndex },
        import_react32.default.createElement(
          "span",
          { className: styles_css_default14["body-cell-editor-icon"] },
          import_react32.default.createElement(internal_default, { name: "edit" })
        )
      )
    )
  ));
}
function TableBodyCell(props) {
  var _a, _b;
  const editDisabledReason = (_b = (_a = props.column.editConfig) === null || _a === void 0 ? void 0 : _a.disabledReason) === null || _b === void 0 ? void 0 : _b.call(_a, props.item);
  if (editDisabledReason) {
    return import_react32.default.createElement(DisabledInlineEditor, Object.assign({ editDisabledReason }, props));
  }
  if (props.isEditable || props.isEditing) {
    return import_react32.default.createElement(TableCellEditable, Object.assign({}, props));
  }
  const { column, item } = props;
  return import_react32.default.createElement(TableTdElement, Object.assign({}, props, { isEditable: false }), column.cell(item));
}

// ../node_modules/@cloudscape-design/components/table/column-widths-utils.js
function checkColumnWidths(columnDefinitions) {
  for (const column of columnDefinitions) {
    checkProperty(column, "minWidth");
    checkProperty(column, "width");
  }
}
function setElementWidths(element, styles) {
  function setProperty(property) {
    const value = styles[property];
    let widthCssValue = "";
    if (typeof value === "number") {
      widthCssValue = value + "px";
    }
    if (typeof value === "string") {
      widthCssValue = value;
    }
    if (element.style[property] !== widthCssValue) {
      element.style[property] = widthCssValue;
    }
  }
  setProperty("width");
  setProperty("minWidth");
  setProperty("maxWidth");
}
function checkProperty(column, name) {
  const value = column[name];
  if (typeof value !== "number" && typeof value !== "undefined") {
    warnOnce("Table", `resizableColumns feature requires ${name} property to be a number, got ${value}. The component may work incorrectly.`);
  }
}

// ../node_modules/@cloudscape-design/components/table/selection/utils.js
var SELECTION_ITEM = "selection-item";
var SELECTION_ROOT = "selection-root";
var ItemSet = class {
  constructor(trackBy, items) {
    this.map = /* @__PURE__ */ new Map();
    this.put = (item) => this.map.set.call(this.map, getTrackableValue2(this.trackBy, item), item);
    this.has = (item) => this.map.has.call(this.map, getTrackableValue2(this.trackBy, item));
    this.forEach = this.map.forEach.bind(this.map);
    this.trackBy = trackBy;
    items.forEach(this.put);
  }
};
var focusMarkers = {
  item: { ["data-" + SELECTION_ITEM]: "item" },
  all: { ["data-" + SELECTION_ITEM]: "all" },
  root: { ["data-" + SELECTION_ROOT]: "true" }
};

// ../node_modules/@cloudscape-design/components/table/expandable-rows/expandable-rows-utils.js
function useExpandableTableProps({ items, expandableRows, trackBy, ariaLabels }) {
  var _a;
  const i18n = useInternalI18n("table");
  const isExpandable = !!expandableRows;
  const expandedSet = new ItemSet(trackBy, (_a = expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.expandedItems) !== null && _a !== void 0 ? _a : []);
  let allItems = items;
  const itemToDetail = /* @__PURE__ */ new Map();
  const getItemLevel = (item) => {
    var _a2, _b;
    return (_b = (_a2 = itemToDetail.get(item)) === null || _a2 === void 0 ? void 0 : _a2.level) !== null && _b !== void 0 ? _b : 0;
  };
  if (isExpandable) {
    const visibleItems = new Array();
    const traverse = (item, detail) => {
      const children = expandableRows.getItemChildren(item);
      itemToDetail.set(item, Object.assign(Object.assign({}, detail), { children }));
      visibleItems.push(item);
      if (expandedSet.has(item)) {
        children.forEach((child, index) => traverse(child, { level: detail.level + 1, setSize: children.length, posInSet: index + 1, parent: item }));
      }
    };
    items.forEach((item, index) => traverse(item, { level: 1, setSize: items.length, posInSet: index + 1, parent: null }));
    for (let index = 0; index < visibleItems.length; index++) {
      const item = visibleItems[index];
      if (expandedSet.has(item)) {
        let insertionIndex = index + 1;
        for (insertionIndex; insertionIndex < visibleItems.length; insertionIndex++) {
          const insertionItem = visibleItems[insertionIndex];
          if (getItemLevel(item) >= getItemLevel(insertionItem)) {
            break;
          }
        }
        insertionIndex--;
      }
    }
    allItems = visibleItems;
  }
  const getExpandableItemProps = (item) => {
    var _a2, _b, _c, _d;
    const { level = 1, setSize = 1, posInSet = 1, parent = null, children = [] } = (_a2 = itemToDetail.get(item)) !== null && _a2 !== void 0 ? _a2 : {};
    return {
      level,
      setSize,
      posInSet,
      isExpandable: (_b = expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.isItemExpandable(item)) !== null && _b !== void 0 ? _b : true,
      isExpanded: expandedSet.has(item),
      onExpandableItemToggle: () => fireNonCancelableEvent(expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.onExpandableItemToggle, { item, expanded: !expandedSet.has(item) }),
      expandButtonLabel: i18n("ariaLabels.expandButtonLabel", (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.expandButtonLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, item)),
      collapseButtonLabel: i18n("ariaLabels.collapseButtonLabel", (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.collapseButtonLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, item)),
      parent,
      children
    };
  };
  return { isExpandable, allItems, getExpandableItemProps };
}

// ../node_modules/@cloudscape-design/components/table/no-data-cell.js
var import_react33 = __toESM(require_react());
function NoDataCell({ totalColumnsCount, hasFooter, loading, loadingText, empty, tableRef, containerRef }) {
  const cellContentRef = (0, import_react33.useRef)(null);
  useResizeObserver(containerRef, ({ contentBoxWidth: containerInlineSize }) => {
    if (tableRef.current && cellContentRef.current) {
      const tablePaddingInlineStart = parseFloat(getComputedStyle(tableRef.current).paddingInlineStart) || 0;
      const tablePaddingInlineEnd = parseFloat(getComputedStyle(tableRef.current).paddingInlineEnd) || 0;
      const inlineSize = containerInlineSize + tablePaddingInlineStart + tablePaddingInlineEnd;
      cellContentRef.current.style.inlineSize = Math.floor(inlineSize) + "px";
    }
  });
  return import_react33.default.createElement(
    "td",
    { colSpan: totalColumnsCount, className: clsx_m_default(styles_css_default13["cell-merged"], hasFooter && styles_css_default13["has-footer"]) },
    import_react33.default.createElement("div", { ref: cellContentRef, className: styles_css_default13["cell-merged-content"], "data-awsui-table-suppress-navigation": true }, loading ? import_react33.default.createElement(
      StatusIndicator,
      { type: "loading", className: styles_css_default13.loading, wrapText: true },
      import_react33.default.createElement(internal_default2, { tagName: "span" }, loadingText)
    ) : import_react33.default.createElement("div", { className: styles_css_default13.empty }, empty))
  );
}

// ../node_modules/@cloudscape-design/components/table/progressive-loading/items-loader.js
var import_react34 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/progressive-loading/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/table/progressive-loading/styles.scoped.css";
var styles_css_default15 = {
  "items-loader": "awsui_items-loader_115pt_16l07_5"
};

// ../node_modules/@cloudscape-design/components/table/progressive-loading/items-loader.js
function ItemsLoader({ item, trackBy, children }) {
  let parentTrackId = item && trackBy ? applyTrackBy(trackBy, item) : void 0;
  parentTrackId = typeof parentTrackId === "string" ? parentTrackId : void 0;
  return import_react34.default.createElement("div", { "data-root": item ? "false" : "true", "data-parentrow": parentTrackId, className: styles_css_default15["items-loader"] }, children);
}
function getLoaderContent({ item, loadingStatus, renderLoaderPending, renderLoaderLoading, renderLoaderError, renderLoaderEmpty }) {
  let content = null;
  if (loadingStatus === "pending" && renderLoaderPending) {
    content = renderLoaderPending({ item });
  } else if (loadingStatus === "loading" && renderLoaderLoading) {
    content = import_react34.default.createElement(internal_default2, { tagName: "span" }, renderLoaderLoading({ item }));
  } else if (loadingStatus === "error" && renderLoaderError) {
    content = import_react34.default.createElement(internal_default2, { tagName: "span" }, renderLoaderError({ item }));
  } else if (loadingStatus === "finished" && renderLoaderEmpty && item) {
    content = import_react34.default.createElement(internal_default2, { tagName: "span" }, renderLoaderEmpty({ item }));
  } else {
    warnOnce("Table", "Must define `renderLoaderPending`, `renderLoaderLoading`, `renderLoaderError`, or `renderLoaderEmpty` when using corresponding loading status.");
  }
  return content;
}

// ../node_modules/@cloudscape-design/components/table/progressive-loading/loader-cell.js
var import_react35 = __toESM(require_react());
function TableLoaderCell(_a) {
  var { item, trackBy, children } = _a, props = __rest(_a, ["item", "trackBy", "children"]);
  return import_react35.default.createElement(TableTdElement, Object.assign({}, props, { isEditable: false, isEditing: false }), props.isRowHeader ? import_react35.default.createElement(ItemsLoader, { item, trackBy }, children) : null);
}

// ../node_modules/@cloudscape-design/components/table/progressive-loading/progressive-loading-utils.js
function useProgressiveLoadingProps({ items, getLoadingStatus, getExpandableItemProps }) {
  const allRows = new Array();
  const getItemParent = (item) => getExpandableItemProps(item).parent;
  const getItemChildren = (item) => getExpandableItemProps(item).children;
  const getItemLevel = (item) => item ? getExpandableItemProps(item).level : 0;
  const isItemExpanded = (item) => getExpandableItemProps(item).isExpanded;
  for (let i = 0; i < items.length; i++) {
    allRows.push({ type: "data", item: items[i] });
    if (isItemExpanded(items[i]) && getItemChildren(items[i]).length === 0) {
      const status = getLoadingStatus === null || getLoadingStatus === void 0 ? void 0 : getLoadingStatus(items[i]);
      if (status === "loading" || status === "finished" || status === "error") {
        allRows.push({ type: "loader", item: items[i], level: getItemLevel(items[i]), status, from: 0 });
      } else {
        warnOnce("Table", 'Expanded items without children must have "loading", "finished", or "error" loading status.');
      }
    }
    let currentParent = getItemParent(items[i]);
    let levelsDiff = getItemLevel(items[i]) - getItemLevel(items[i + 1]);
    while (currentParent && levelsDiff > 0) {
      const status = getLoadingStatus === null || getLoadingStatus === void 0 ? void 0 : getLoadingStatus(currentParent);
      if (status && status !== "finished") {
        const level = currentParent ? getItemLevel(currentParent) : 0;
        const children = currentParent ? getItemChildren(currentParent) : [];
        allRows.push({ type: "loader", item: currentParent, level, status, from: children.length });
      }
      currentParent = currentParent && getItemParent(currentParent);
      levelsDiff--;
    }
    const rootLoadingStatus = getLoadingStatus === null || getLoadingStatus === void 0 ? void 0 : getLoadingStatus(null);
    if (i === items.length - 1 && rootLoadingStatus && rootLoadingStatus !== "finished") {
      allRows.push({ type: "loader", item: null, level: 0, status: rootLoadingStatus, from: items.length });
    }
  }
  return { allRows };
}

// ../node_modules/@cloudscape-design/components/table/resizer/index.js
var import_react37 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/use-column-widths.js
var import_react36 = __toESM(require_react());
var DEFAULT_COLUMN_WIDTH = 120;
function readWidths(getCell, visibleColumns) {
  const result = /* @__PURE__ */ new Map();
  for (let index = 0; index < visibleColumns.length; index++) {
    const column = visibleColumns[index];
    let width = column.width || 0;
    const minWidth = column.minWidth || width || DEFAULT_COLUMN_WIDTH;
    if (!width && // read width from the DOM if it is missing in the config
    index !== visibleColumns.length - 1) {
      const colEl = getCell(column.id);
      width = colEl ? getLogicalBoundingClientRect(colEl).inlineSize : DEFAULT_COLUMN_WIDTH;
    }
    result.set(column.id, Math.max(width, minWidth));
  }
  return result;
}
function updateWidths(visibleColumns, oldWidths, newWidth, columnId) {
  const column = visibleColumns.find((column2) => column2.id === columnId);
  let minWidth = DEFAULT_COLUMN_WIDTH;
  if (typeof (column === null || column === void 0 ? void 0 : column.width) === "number" && column.width < DEFAULT_COLUMN_WIDTH) {
    minWidth = column === null || column === void 0 ? void 0 : column.width;
  }
  if (typeof (column === null || column === void 0 ? void 0 : column.minWidth) === "number") {
    minWidth = column === null || column === void 0 ? void 0 : column.minWidth;
  }
  newWidth = Math.max(newWidth, minWidth);
  if (oldWidths.get(columnId) === newWidth) {
    return oldWidths;
  }
  const newWidths = new Map(oldWidths);
  newWidths.set(columnId, newWidth);
  return newWidths;
}
var WidthsContext = (0, import_react36.createContext)({
  getColumnStyles: () => ({}),
  columnWidths: /* @__PURE__ */ new Map(),
  updateColumn: () => {
  },
  setCell: () => {
  }
});
function ColumnWidthsProvider({ visibleColumns, resizableColumns, containerRef, children }) {
  const visibleColumnsRef = (0, import_react36.useRef)(null);
  const containerWidthRef = (0, import_react36.useRef)(0);
  const [columnWidths, setColumnWidths] = (0, import_react36.useState)(null);
  const cellsRef = (0, import_react36.useRef)(/* @__PURE__ */ new Map());
  const stickyCellsRef = (0, import_react36.useRef)(/* @__PURE__ */ new Map());
  const getCell = (columnId) => {
    var _a;
    return (_a = cellsRef.current.get(columnId)) !== null && _a !== void 0 ? _a : null;
  };
  const setCell = (sticky, columnId, node) => {
    const ref = sticky ? stickyCellsRef : cellsRef;
    if (node) {
      ref.current.set(columnId, node);
    } else {
      ref.current.delete(columnId);
    }
  };
  const getColumnStyles = (sticky, columnId) => {
    var _a, _b, _c;
    const column = visibleColumns.find((column2) => column2.id === columnId);
    if (!column) {
      return {};
    }
    if (sticky) {
      return {
        width: ((_a = cellsRef.current.get(column.id)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width) || ((_b = columnWidths === null || columnWidths === void 0 ? void 0 : columnWidths.get(column.id)) !== null && _b !== void 0 ? _b : column.width)
      };
    }
    if (resizableColumns && columnWidths) {
      const isLastColumn = column.id === ((_c = visibleColumns[visibleColumns.length - 1]) === null || _c === void 0 ? void 0 : _c.id);
      const totalWidth = visibleColumns.reduce((sum, { id }) => sum + (columnWidths.get(id) || DEFAULT_COLUMN_WIDTH), 0);
      if (isLastColumn && containerWidthRef.current > totalWidth) {
        return { width: "auto", minWidth: column === null || column === void 0 ? void 0 : column.minWidth };
      } else {
        return { width: columnWidths.get(column.id), minWidth: column === null || column === void 0 ? void 0 : column.minWidth };
      }
    }
    return {
      width: column.width,
      minWidth: column.minWidth,
      maxWidth: !resizableColumns ? column.maxWidth : void 0
    };
  };
  const updateColumnWidths = useStableCallback(() => {
    for (const { id } of visibleColumns) {
      const element = cellsRef.current.get(id);
      if (element) {
        setElementWidths(element, getColumnStyles(false, id));
      }
    }
    for (const { id } of visibleColumns) {
      const element = stickyCellsRef.current.get(id);
      if (element) {
        setElementWidths(element, getColumnStyles(true, id));
      }
    }
  });
  useResizeObserver(containerRef, ({ contentBoxWidth: containerWidth }) => {
    containerWidthRef.current = containerWidth;
    requestAnimationFrame(() => updateColumnWidths());
  });
  (0, import_react36.useEffect)(() => {
    updateColumnWidths();
    if (!resizableColumns) {
      return;
    }
    let updated = false;
    const newColumnWidths = new Map(columnWidths);
    const lastVisible = visibleColumnsRef.current;
    if (lastVisible) {
      for (let index = 0; index < visibleColumns.length; index++) {
        const column = visibleColumns[index];
        if (!(columnWidths === null || columnWidths === void 0 ? void 0 : columnWidths.get(column.id)) && lastVisible.indexOf(column.id) === -1) {
          updated = true;
          newColumnWidths.set(column.id, column.width || DEFAULT_COLUMN_WIDTH);
        }
      }
      if (updated) {
        setColumnWidths(newColumnWidths);
      }
    }
    visibleColumnsRef.current = visibleColumns.map((column) => column.id);
  }, [columnWidths, resizableColumns, visibleColumns, updateColumnWidths]);
  (0, import_react36.useEffect)(() => {
    if (!resizableColumns) {
      return;
    }
    setColumnWidths(() => readWidths(getCell, visibleColumns));
  }, []);
  function updateColumn(columnId, newWidth) {
    setColumnWidths((columnWidths2) => updateWidths(visibleColumns, columnWidths2 !== null && columnWidths2 !== void 0 ? columnWidths2 : /* @__PURE__ */ new Map(), newWidth, columnId));
  }
  return import_react36.default.createElement(WidthsContext.Provider, { value: { getColumnStyles, columnWidths: columnWidths !== null && columnWidths !== void 0 ? columnWidths : /* @__PURE__ */ new Map(), updateColumn, setCell } }, children);
}
function useColumnWidths() {
  return (0, import_react36.useContext)(WidthsContext);
}

// ../node_modules/@cloudscape-design/components/table/resizer/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/table/resizer/styles.scoped.css";
var styles_css_default16 = {
  "resize-active": "awsui_resize-active_x7peu_58i5t_145",
  "resize-active-with-focus": "awsui_resize-active-with-focus_x7peu_58i5t_145",
  "divider": "awsui_divider_x7peu_58i5t_150",
  "divider-disabled": "awsui_divider-disabled_x7peu_58i5t_164",
  "divider-active": "awsui_divider-active_x7peu_58i5t_167",
  "resizer": "awsui_resizer_x7peu_58i5t_171",
  "has-focus": "awsui_has-focus_x7peu_58i5t_225",
  "tracker": "awsui_tracker_x7peu_58i5t_250"
};

// ../node_modules/@cloudscape-design/components/table/resizer/resizer-lookup.js
function getResizerElements(resizerElement) {
  if (!resizerElement) {
    return null;
  }
  const header = findUpUntil(resizerElement, (element) => element.tagName.toLowerCase() === "th");
  if (!header) {
    return null;
  }
  const tableRoot = findUpUntil(header, (element) => element.className.indexOf(styles_css_default13.root) > -1);
  if (!tableRoot) {
    return null;
  }
  const table = tableRoot.querySelector(`table`);
  if (!table) {
    return null;
  }
  const tracker = tableRoot.querySelector(`.${styles_css_default16.tracker}`);
  if (!tracker) {
    return null;
  }
  const scrollParent = getOverflowParents(header)[0];
  if (!scrollParent) {
    return null;
  }
  return { header, table, tracker, scrollParent };
}
function getHeaderWidth(resizerElement) {
  const header = resizerElement && findUpUntil(resizerElement, (element) => element.tagName.toLowerCase() === "th");
  return header ? getLogicalBoundingClientRect(header).inlineSize : 0;
}

// ../node_modules/@cloudscape-design/components/table/resizer/index.js
var AUTO_GROW_START_TIME = 10;
var AUTO_GROW_INTERVAL = 10;
var AUTO_GROW_INCREMENT = 5;
function Divider({ className }) {
  return import_react37.default.createElement("span", { className: clsx_m_default(styles_css_default16.divider, styles_css_default16["divider-disabled"], className) });
}
function Resizer({ onWidthUpdate, onWidthUpdateCommit, ariaLabelledby, minWidth = DEFAULT_COLUMN_WIDTH, tabIndex, showFocusRing, focusId, roleDescription }) {
  onWidthUpdate = useStableCallback(onWidthUpdate);
  onWidthUpdateCommit = useStableCallback(onWidthUpdateCommit);
  const separatorId = useUniqueId();
  const resizerToggleRef = (0, import_react37.useRef)(null);
  const resizerSeparatorRef = (0, import_react37.useRef)(null);
  const [isDragging, setIsDragging] = (0, import_react37.useState)(false);
  const [isKeyboardDragging, setIsKeyboardDragging] = (0, import_react37.useState)(false);
  const autoGrowTimeout = (0, import_react37.useRef)();
  const [resizerHasFocus, setResizerHasFocus] = (0, import_react37.useState)(false);
  const [headerCellWidth, setHeaderCellWidth] = (0, import_react37.useState)(0);
  (0, import_react37.useEffect)(() => {
    setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));
  }, []);
  (0, import_react37.useEffect)(() => {
    var _a, _b;
    const elements = getResizerElements(resizerToggleRef.current);
    const document2 = (_b = (_a = resizerToggleRef.current) === null || _a === void 0 ? void 0 : _a.ownerDocument) !== null && _b !== void 0 ? _b : window.document;
    if (!isDragging && !resizerHasFocus || !elements) {
      return;
    }
    const { insetInlineStart: inlineStartEdge, insetInlineEnd: inlineEndEdge } = getLogicalBoundingClientRect(elements.scrollParent);
    const updateTrackerPosition = (newOffset) => {
      const { insetInlineStart: scrollParentInsetInlineStart } = getLogicalBoundingClientRect(elements.table);
      elements.tracker.style.insetBlockStart = getLogicalBoundingClientRect(elements.header).blockSize + "px";
      elements.tracker.style.insetInlineStart = newOffset - scrollParentInsetInlineStart - 1 + "px";
    };
    const updateColumnWidth = (newWidth) => {
      const { insetInlineEnd, inlineSize } = getLogicalBoundingClientRect(elements.header);
      const updatedWidth = newWidth < minWidth ? minWidth : newWidth;
      updateTrackerPosition(insetInlineEnd + updatedWidth - inlineSize);
      if (newWidth >= minWidth) {
        setHeaderCellWidth(newWidth);
      }
      onWidthUpdate(newWidth);
    };
    const resizeColumn = (offset) => {
      if (offset > inlineStartEdge) {
        const cellLeft = getLogicalBoundingClientRect(elements.header).insetInlineStart;
        const newWidth = offset - cellLeft;
        updateColumnWidth(newWidth);
      }
    };
    const onAutoGrow = () => {
      const inlineSize = getLogicalBoundingClientRect(elements.header).inlineSize;
      autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_INTERVAL);
      updateColumnWidth(inlineSize + AUTO_GROW_INCREMENT);
      elements.scrollParent.scrollLeft += AUTO_GROW_INCREMENT * (getIsRtl(elements.scrollParent) ? -1 : 1);
    };
    const onMouseMove = (event) => {
      clearTimeout(autoGrowTimeout.current);
      const offset = getLogicalPageX(event);
      if (offset > inlineEndEdge) {
        autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_START_TIME);
      } else {
        resizeColumn(offset);
      }
    };
    const onMouseUp = (event) => {
      resizeColumn(getLogicalPageX(event));
      setIsDragging(false);
      onWidthUpdateCommit();
      clearTimeout(autoGrowTimeout.current);
    };
    const onKeyDown = (event) => {
      if (isKeyboardDragging) {
        const keys = [KeyCode.left, KeyCode.right, KeyCode.enter, KeyCode.right, KeyCode.space, KeyCode.escape];
        if (keys.indexOf(event.keyCode) !== -1) {
          event.preventDefault();
          isEventLike(event) && handleKey(event, {
            onActivate: () => {
              var _a2;
              setIsKeyboardDragging(false);
              (_a2 = resizerToggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
            },
            onEscape: () => {
              var _a2;
              setIsKeyboardDragging(false);
              (_a2 = resizerToggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
            },
            onInlineStart: () => updateColumnWidth(getLogicalBoundingClientRect(elements.header).inlineSize - 10),
            onInlineEnd: () => updateColumnWidth(getLogicalBoundingClientRect(elements.header).inlineSize + 10)
          });
        }
      } else if (event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) {
        event.preventDefault();
        isEventLike(event) && handleKey(event, {
          onActivate: () => {
            var _a2;
            setIsKeyboardDragging(true);
            (_a2 = resizerSeparatorRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
          }
        });
      }
    };
    updateTrackerPosition(getLogicalBoundingClientRect(elements.header).insetInlineEnd);
    const controller = new AbortController();
    if (isDragging) {
      document2.body.classList.add(styles_css_default16["resize-active"]);
      document2.addEventListener("mousemove", onMouseMove, { signal: controller.signal });
      document2.addEventListener("mouseup", onMouseUp, { signal: controller.signal });
    }
    if (resizerHasFocus) {
      document2.body.classList.add(styles_css_default16["resize-active-with-focus"]);
      elements.header.addEventListener("keydown", onKeyDown, { signal: controller.signal });
    }
    if (isKeyboardDragging) {
      document2.body.classList.add(styles_css_default16["resize-active"]);
    }
    return () => {
      clearTimeout(autoGrowTimeout.current);
      document2.body.classList.remove(styles_css_default16["resize-active"]);
      document2.body.classList.remove(styles_css_default16["resize-active-with-focus"]);
      controller.abort();
    };
  }, [minWidth, isDragging, isKeyboardDragging, resizerHasFocus, onWidthUpdate, onWidthUpdateCommit]);
  const { tabIndex: resizerTabIndex } = useSingleTabStopNavigation(resizerToggleRef, { tabIndex });
  return import_react37.default.createElement(
    import_react37.default.Fragment,
    null,
    import_react37.default.createElement("button", { ref: resizerToggleRef, className: clsx_m_default(styles_css_default16.resizer, (resizerHasFocus || showFocusRing || isKeyboardDragging) && styles_css_default16["has-focus"]), onMouseDown: (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      setIsDragging(true);
    }, onClick: () => {
      var _a;
      setIsDragging(false);
      setResizerHasFocus(true);
      setIsKeyboardDragging(true);
      (_a = resizerSeparatorRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, onFocus: () => {
      setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));
      setResizerHasFocus(true);
    }, onBlur: (event) => {
      if (event.relatedTarget !== resizerSeparatorRef.current) {
        setResizerHasFocus(false);
      }
    }, "aria-roledescription": roleDescription, "aria-labelledby": ariaLabelledby, tabIndex: resizerTabIndex, "data-focus-id": focusId }),
    import_react37.default.createElement("span", { className: clsx_m_default(styles_css_default16.divider, isDragging && styles_css_default16["divider-active"]), "data-awsui-table-suppress-navigation": true, ref: resizerSeparatorRef, id: separatorId, role: "slider", tabIndex: -1, "aria-labelledby": ariaLabelledby, "aria-hidden": !isKeyboardDragging, "aria-valuemin": minWidth, "aria-valuemax": Number.MAX_SAFE_INTEGER, "aria-valuenow": headerCellWidth, "data-focus-id": focusId, onBlur: () => {
      setResizerHasFocus(false);
      if (isKeyboardDragging) {
        setIsKeyboardDragging(false);
      }
      onWidthUpdateCommit();
    } })
  );
}
function ResizeTracker() {
  return import_react37.default.createElement("span", { className: styles_css_default16.tracker });
}

// ../node_modules/@cloudscape-design/components/table/selection/selection-control.js
var import_react40 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/checkbox/internal.js
var import_react38 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/checkbox/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/checkbox/styles.scoped.css";
var styles_css_default17 = {
  "root": "awsui_root_k2y2q_71dt1_145",
  "checkbox-control": "awsui_checkbox-control_k2y2q_71dt1_178",
  "outline": "awsui_outline_k2y2q_71dt1_186"
};

// ../node_modules/@cloudscape-design/components/checkbox/internal.js
var InternalCheckbox = import_react38.default.forwardRef((_a, ref) => {
  var { controlId, name, checked, disabled, readOnly, ariaRequired, indeterminate, children, description, ariaLabel, onFocus, onBlur, onChange, tabIndex: explicitTabIndex, showOutline, ariaControls, __internalRootRef, __injectAnalyticsComponentMetadata = false } = _a, rest = __rest(_a, ["controlId", "name", "checked", "disabled", "readOnly", "ariaRequired", "indeterminate", "children", "description", "ariaLabel", "onFocus", "onBlur", "onChange", "tabIndex", "showOutline", "ariaControls", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const checkboxRef = (0, import_react38.useRef)(null);
  useForwardFocus(ref, checkboxRef);
  (0, import_react38.useEffect)(() => {
    if (checkboxRef.current) {
      checkboxRef.current.indeterminate = Boolean(indeterminate);
    }
  });
  const { tabIndex } = useSingleTabStopNavigation(checkboxRef, { tabIndex: explicitTabIndex });
  const analyticsMetadata = {};
  const analyticsComponentMetadata = {
    name: "awsui.Checkbox",
    label: { root: "self" }
  };
  if (__injectAnalyticsComponentMetadata) {
    analyticsMetadata.component = analyticsComponentMetadata;
  }
  if (!disabled && !readOnly) {
    analyticsMetadata.detail = {
      selected: `${!checked}`
    };
  }
  return import_react38.default.createElement(AbstractSwitch, Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default17.root, baseProps.className), controlClassName: styles_css_default17["checkbox-control"], outlineClassName: styles_css_default17.outline, controlId, disabled, readOnly, label: children, description, descriptionBottomPadding: true, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, showOutline, nativeControl: (nativeControlProps) => import_react38.default.createElement("input", Object.assign({}, nativeControlProps, {
    ref: checkboxRef,
    type: "checkbox",
    checked,
    name,
    "aria-required": ariaRequired ? "true" : void 0,
    "aria-disabled": readOnly && !disabled ? "true" : void 0,
    tabIndex,
    onFocus: () => fireNonCancelableEvent(onFocus),
    onBlur: () => fireNonCancelableEvent(onBlur),
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a2;
    (_a2 = checkboxRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    fireNonCancelableEvent(
      onChange,
      // for deterministic transitions "indeterminate" -> "checked" -> "unchecked"
      indeterminate ? { checked: true, indeterminate: false } : { checked: !checked, indeterminate: false }
    );
  }, styledControl: import_react38.default.createElement(checkbox_icon_default, { checked, indeterminate, disabled, readOnly }), __internalRootRef }, getAnalyticsMetadataAttribute(analyticsMetadata)));
});
var internal_default9 = InternalCheckbox;

// ../node_modules/@cloudscape-design/components/radio-group/radio-button.js
var import_react39 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/radio-group/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/radio-group/styles.scoped.css";
var styles_css_default18 = {
  "root": "awsui_root_1mabk_16xu4_145",
  "radio": "awsui_radio_1mabk_16xu4_178",
  "radio--has-description": "awsui_radio--has-description_1mabk_16xu4_186",
  "radio-control": "awsui_radio-control_1mabk_16xu4_190",
  "outline": "awsui_outline_1mabk_16xu4_198",
  "styled-circle-border": "awsui_styled-circle-border_1mabk_16xu4_220",
  "styled-circle-disabled": "awsui_styled-circle-disabled_1mabk_16xu4_224",
  "styled-circle-readonly": "awsui_styled-circle-readonly_1mabk_16xu4_224",
  "styled-circle-fill": "awsui_styled-circle-fill_1mabk_16xu4_229",
  "styled-circle-checked": "awsui_styled-circle-checked_1mabk_16xu4_245"
};

// ../node_modules/@cloudscape-design/components/radio-group/radio-button.js
var radio_button_default = import_react39.default.forwardRef(function RadioButton(_a, ref) {
  var { name, label, value, checked, description, disabled, controlId, onChange, readOnly, className } = _a, rest = __rest(_a, ["name", "label", "value", "checked", "description", "disabled", "controlId", "onChange", "readOnly", "className"]);
  const isVisualRefresh = useVisualRefresh();
  const radioButtonRef = (0, import_react39.useRef)(null);
  const mergedRefs = useMergeRefs(radioButtonRef, ref);
  const { tabIndex } = useSingleTabStopNavigation(radioButtonRef);
  return import_react39.default.createElement(AbstractSwitch, Object.assign({ className: clsx_m_default(styles_css_default18.radio, description && styles_css_default18["radio--has-description"], className), controlClassName: styles_css_default18["radio-control"], outlineClassName: styles_css_default18.outline, label, description, disabled, readOnly, controlId }, copyAnalyticsMetadataAttribute(rest), { nativeControl: (nativeControlProps) => import_react39.default.createElement("input", Object.assign({}, nativeControlProps, {
    tabIndex,
    type: "radio",
    ref: mergedRefs,
    name,
    value,
    checked,
    "aria-disabled": readOnly && !disabled ? "true" : void 0,
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a2;
    (_a2 = radioButtonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    if (checked) {
      return;
    }
    fireNonCancelableEvent(onChange, { value });
  }, styledControl: import_react39.default.createElement(
    "svg",
    { viewBox: "0 0 100 100", focusable: "false", "aria-hidden": "true" },
    import_react39.default.createElement("circle", { className: clsx_m_default(styles_css_default18["styled-circle-border"], {
      [styles_css_default18["styled-circle-disabled"]]: disabled,
      [styles_css_default18["styled-circle-readonly"]]: readOnly
    }), strokeWidth: isVisualRefresh ? 12 : 8, cx: 50, cy: 50, r: isVisualRefresh ? 44 : 46 }),
    import_react39.default.createElement("circle", { className: clsx_m_default(styles_css_default18["styled-circle-fill"], {
      [styles_css_default18["styled-circle-disabled"]]: disabled,
      [styles_css_default18["styled-circle-checked"]]: checked,
      [styles_css_default18["styled-circle-readonly"]]: readOnly
    }), strokeWidth: 30, cx: 50, cy: 50, r: 35 })
  ) }));
});

// ../node_modules/@cloudscape-design/components/table/selection/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/table/selection/styles.scoped.css";
var styles_css_default19 = {
  "root": "awsui_root_1s55x_1boo4_145",
  "label": "awsui_label_1s55x_1boo4_149",
  "label-top": "awsui_label-top_1s55x_1boo4_163",
  "stud": "awsui_stud_1s55x_1boo4_168"
};

// ../node_modules/@cloudscape-design/components/table/selection/selection-control.js
function SelectionControl(_a) {
  var { selectionType, indeterminate = false, onShiftToggle, onFocusUp, onFocusDown, name, ariaLabel, focusedComponent, rowIndex, itemKey, verticalAlign = "middle" } = _a, sharedProps = __rest(_a, ["selectionType", "indeterminate", "onShiftToggle", "onFocusUp", "onFocusDown", "name", "ariaLabel", "focusedComponent", "rowIndex", "itemKey", "verticalAlign"]);
  const controlId = useUniqueId();
  const isMultiSelection = selectionType === "multi";
  const { navigationActive } = (0, import_react40.useContext)(SingleTabStopNavigationContext);
  const setShiftState = (event) => {
    if (isMultiSelection) {
      onShiftToggle === null || onShiftToggle === void 0 ? void 0 : onShiftToggle(event.shiftKey);
    }
  };
  const onMouseDownHandler = (event) => {
    setShiftState(event);
    if (isMultiSelection) {
      event.preventDefault();
    }
  };
  const handleKeyDown = (event) => {
    setShiftState(event);
    if (isMultiSelection && !navigationActive) {
      if (event.keyCode === KeyCode.up) {
        event.preventDefault();
        onFocusUp === null || onFocusUp === void 0 ? void 0 : onFocusUp(event);
      }
      if (event.keyCode === KeyCode.down) {
        event.preventDefault();
        onFocusDown === null || onFocusDown === void 0 ? void 0 : onFocusDown(event);
      }
    }
  };
  const handleClick = (event) => {
    const target = event.currentTarget;
    const nativeInput = target.tagName === "INPUT" ? target : target.querySelector("input");
    nativeInput === null || nativeInput === void 0 ? void 0 : nativeInput.focus();
  };
  const selector = isMultiSelection ? import_react40.default.createElement(internal_default9, Object.assign({}, sharedProps, { showOutline: focusedComponent === "selection-control", controlId, "data-focus-id": "selection-control", indeterminate })) : import_react40.default.createElement(radio_button_default, Object.assign({}, sharedProps, { controlId, name, value: "", label: "" }));
  return import_react40.default.createElement(
    import_react40.default.Fragment,
    null,
    import_react40.default.createElement("label", Object.assign({ onKeyDown: handleKeyDown, onKeyUp: setShiftState, onMouseDown: onMouseDownHandler, onMouseUp: setShiftState, onClick: handleClick, htmlFor: controlId, className: clsx_m_default(styles_css_default19.label, styles_css_default19.root, verticalAlign === "top" && styles_css_default19["label-top"]), "aria-label": ariaLabel, title: ariaLabel }, rowIndex !== void 0 && !sharedProps.disabled ? getAnalyticsMetadataAttribute({
      detail: {
        position: `${rowIndex + 1}`,
        item: itemKey || ""
      }
    }) : {}), selector),
    import_react40.default.createElement("span", { className: styles_css_default19.stud, "aria-hidden": true }, " ")
  );
}

// ../node_modules/@cloudscape-design/components/table/selection/use-selection-focus-move.js
function useSelectionFocusMove(selectionType, totalItems) {
  if (selectionType !== "multi") {
    return {};
  }
  function moveFocus(sourceElement, fromIndex, direction) {
    let index = fromIndex;
    const rootContainer = findRootContainer(sourceElement);
    while (index >= -1 && index < totalItems) {
      index += direction;
      const control = findSelectionControlByIndex(rootContainer, index);
      if (control && !control.disabled) {
        control.focus();
        break;
      }
    }
  }
  const [moveFocusDown, moveFocusUp] = [1, -1].map((direction) => {
    return (event) => {
      const target = event.currentTarget;
      const itemNode = findUpUntil(target, (node) => node.dataset.selectionItem === "item");
      const fromIndex = Array.prototype.indexOf.call(itemNode.parentElement.children, itemNode);
      moveFocus(target, fromIndex, direction);
    };
  });
  return {
    moveFocusDown,
    moveFocusUp,
    moveFocus
  };
}
function findSelectionControlByIndex(rootContainer, index) {
  if (index === -1) {
    return rootContainer.querySelector(`[data-${SELECTION_ITEM}="all"] .${styles_css_default19.root} input`);
  }
  return rootContainer.querySelectorAll(`[data-${SELECTION_ITEM}="item"] .${styles_css_default19.root} input`)[index];
}
function findRootContainer(element) {
  return findUpUntil(element, (node) => node.dataset.selectionRoot === "true");
}

// ../node_modules/@cloudscape-design/components/table/selection/use-selection.js
var import_react41 = __toESM(require_react());
function useSelection(options) {
  const singleSelectionProps = useSingleSelection(options);
  const multiSelectionProps = useMultiSelection(options);
  return options.selectionType === "single" ? singleSelectionProps : multiSelectionProps;
}
function useSingleSelection({ ariaLabels, isItemDisabled = () => false, onSelectionChange, selectedItems = [], selectionType, trackBy }) {
  const selectionControlName = useUniqueId();
  if (selectionType !== "single") {
    return { isItemSelected: () => false };
  }
  const selectedSet = new ItemSet(trackBy, selectedItems.slice(0, 1));
  const isItemSelected = selectedSet.has.bind(selectedSet);
  const handleToggleItem = (item) => {
    if (!isItemDisabled(item) && !isItemSelected(item)) {
      fireNonCancelableEvent(onSelectionChange, { selectedItems: [item] });
    }
  };
  return {
    isItemSelected,
    getItemSelectionProps: (item) => {
      var _a;
      return {
        name: selectionControlName,
        selectionType: "single",
        disabled: isItemDisabled(item),
        checked: isItemSelected(item),
        onChange: () => handleToggleItem(item),
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, { selectedItems }, item))
      };
    }
  };
}
function useMultiSelection({ ariaLabels, isItemDisabled = () => false, items, loading, onSelectionChange, selectedItems = [], selectionType, trackBy }) {
  const selectionControlName = useUniqueId();
  const [shiftPressed, setShiftPressed] = (0, import_react41.useState)(false);
  const [lastClickedItem, setLastClickedItem] = (0, import_react41.useState)(null);
  if (selectionType !== "multi") {
    return { isItemSelected: () => false };
  }
  const selectedSet = new ItemSet(trackBy, selectedItems);
  const isItemSelected = selectedSet.has.bind(selectedSet);
  let allItemsDisabled = true;
  let allEnabledItemsSelected = true;
  for (const item of items) {
    allItemsDisabled = allItemsDisabled && isItemDisabled(item);
    allEnabledItemsSelected = allEnabledItemsSelected && (isItemSelected(item) || isItemDisabled(item));
  }
  const allItemsCheckboxSelected = selectedItems.length > 0 && allEnabledItemsSelected;
  const allItemsCheckboxIndeterminate = selectedItems.length > 0 && !allEnabledItemsSelected;
  const itemIndexesMap = /* @__PURE__ */ new Map();
  items.forEach((item, i) => itemIndexesMap.set(getTrackableValue2(trackBy, item), i));
  const getShiftSelectedItems = (item) => {
    const lastClickedItemIndex = lastClickedItem ? itemIndexesMap.get(getTrackableValue2(trackBy, lastClickedItem)) : void 0;
    if (lastClickedItemIndex !== void 0) {
      const currentItemIndex = itemIndexesMap.get(getTrackableValue2(trackBy, item));
      const start = Math.min(currentItemIndex, lastClickedItemIndex);
      const end = Math.max(currentItemIndex, lastClickedItemIndex);
      return items.slice(start, end + 1);
    }
    return [item];
  };
  const selectItems = (requestedItems) => {
    const newSelectedItems = [...selectedItems];
    requestedItems.forEach((newItem) => {
      if (!isItemSelected(newItem) && !isItemDisabled(newItem)) {
        newSelectedItems.push(newItem);
      }
    });
    return newSelectedItems;
  };
  const deselectItems = (requestedItems) => {
    const requestedItemsSet = new ItemSet(trackBy, requestedItems);
    const newSelectedItems = [];
    selectedItems.forEach((selectedItem) => {
      const shouldUnselect = requestedItemsSet.has(selectedItem);
      if (!shouldUnselect || isItemDisabled(selectedItem)) {
        newSelectedItems.push(selectedItem);
      }
    });
    return newSelectedItems;
  };
  const handleToggleAll = () => {
    const newSelectedItems = allEnabledItemsSelected ? deselectItems(items) : selectItems(items);
    fireNonCancelableEvent(onSelectionChange, { selectedItems: newSelectedItems });
  };
  const handleToggleItem = (item) => {
    if (!isItemDisabled(item)) {
      const requestedItems = shiftPressed ? getShiftSelectedItems(item) : [item];
      const selectedItems2 = isItemSelected(item) ? deselectItems(requestedItems) : selectItems(requestedItems);
      fireNonCancelableEvent(onSelectionChange, { selectedItems: selectedItems2 });
      setLastClickedItem(item);
    }
  };
  return {
    isItemSelected,
    getSelectAllProps: () => {
      var _a;
      return {
        name: selectionControlName,
        selectionType: "multi",
        disabled: allItemsDisabled || !!loading,
        checked: allItemsCheckboxSelected,
        indeterminate: allItemsCheckboxIndeterminate,
        onChange: handleToggleAll,
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.allItemsSelectionLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, { selectedItems })),
        selectionGroupLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel
      };
    },
    getItemSelectionProps: (item) => {
      var _a;
      return {
        name: selectionControlName,
        selectionType: "multi",
        disabled: isItemDisabled(item),
        checked: isItemSelected(item),
        onChange: () => handleToggleItem(item),
        onShiftToggle: (value) => setShiftPressed(value),
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, { selectedItems }, item))
      };
    }
  };
}

// ../node_modules/@cloudscape-design/components/table/selection/selection-cell.js
var import_react44 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/internal/components/screenreader-only/index.js
var import_react42 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/internal/components/screenreader-only/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/internal/components/screenreader-only/styles.scoped.css";
var styles_css_default20 = {
  "root": "awsui_root_xttbq_1rjuy_145"
};

// ../node_modules/@cloudscape-design/components/internal/components/screenreader-only/index.js
function ScreenreaderOnly(props) {
  return import_react42.default.createElement("span", Object.assign({}, props, { className: clsx_m_default(styles_css_default20.root, props.className) }));
}

// ../node_modules/@cloudscape-design/components/table/header-cell/th-element.js
var import_react43 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/header-cell/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/table/header-cell/styles.scoped.css";
var styles_css_default21 = {
  "header-cell": "awsui_header-cell_1spae_13sne_149",
  "header-cell-fake-focus": "awsui_header-cell-fake-focus_1spae_13sne_183",
  "header-cell-sticky": "awsui_header-cell-sticky_1spae_13sne_204",
  "header-cell-stuck": "awsui_header-cell-stuck_1spae_13sne_207",
  "header-cell-variant-full-page": "awsui_header-cell-variant-full-page_1spae_13sne_207",
  "header-cell-hidden": "awsui_header-cell-hidden_1spae_13sne_213",
  "header-cell-variant-embedded": "awsui_header-cell-variant-embedded_1spae_13sne_216",
  "is-visual-refresh": "awsui_is-visual-refresh_1spae_13sne_216",
  "sticky-cell": "awsui_sticky-cell_1spae_13sne_216",
  "header-cell-variant-borderless": "awsui_header-cell-variant-borderless_1spae_13sne_216",
  "header-cell-sortable": "awsui_header-cell-sortable_1spae_13sne_219",
  "sticky-cell-pad-left": "awsui_sticky-cell-pad-left_1spae_13sne_240",
  "has-selection": "awsui_has-selection_1spae_13sne_240",
  "sticky-cell-last-inline-start": "awsui_sticky-cell-last-inline-start_1spae_13sne_243",
  "resize-divider": "awsui_resize-divider_1spae_13sne_248",
  "sticky-cell-last-inline-end": "awsui_sticky-cell-last-inline-end_1spae_13sne_255",
  "sorting-icon": "awsui_sorting-icon_1spae_13sne_265",
  "edit-icon": "awsui_edit-icon_1spae_13sne_273",
  "header-cell-content": "awsui_header-cell-content_1spae_13sne_279",
  "header-cell-content-expandable": "awsui_header-cell-content-expandable_1spae_13sne_285",
  "header-cell-disabled": "awsui_header-cell-disabled_1spae_13sne_337",
  "header-cell-sorted": "awsui_header-cell-sorted_1spae_13sne_337",
  "header-cell-text": "awsui_header-cell-text_1spae_13sne_351",
  "header-cell-text-wrap": "awsui_header-cell-text-wrap_1spae_13sne_355",
  "header-cell-ascending": "awsui_header-cell-ascending_1spae_13sne_361",
  "header-cell-descending": "awsui_header-cell-descending_1spae_13sne_362",
  "has-striped-rows": "awsui_has-striped-rows_1spae_13sne_476",
  "sticky-cell-pad-inline-start": "awsui_sticky-cell-pad-inline-start_1spae_13sne_476"
};

// ../node_modules/@cloudscape-design/components/table/header-cell/th-element.js
function TableThElement(_a) {
  var { resizableStyle, sortingStatus, sortingDisabled, focusedComponent, stuck, sticky, hidden, stripedRows, isSelection, colIndex, columnId, stickyState, cellRef, tableRole, children, variant, ariaLabel } = _a, props = __rest(_a, ["resizableStyle", "sortingStatus", "sortingDisabled", "focusedComponent", "stuck", "sticky", "hidden", "stripedRows", "isSelection", "colIndex", "columnId", "stickyState", "cellRef", "tableRole", "children", "variant", "ariaLabel"]);
  const isVisualRefresh = useVisualRefresh();
  const stickyStyles = useStickyCellStyles({
    stickyColumns: stickyState,
    columnId,
    getClassName: (props2) => getStickyClassNames(styles_css_default21, props2)
  });
  const cellRefObject = (0, import_react43.useRef)(null);
  const mergedRef = useMergeRefs(stickyStyles.ref, cellRef, cellRefObject);
  const { tabIndex: cellTabIndex } = useSingleTabStopNavigation(cellRefObject);
  return import_react43.default.createElement("th", Object.assign({ "data-focus-id": `header-${String(columnId)}`, className: clsx_m_default(styles_css_default21["header-cell"], styles_css_default21[`header-cell-variant-${variant}`], sticky && styles_css_default21["header-cell-sticky"], stuck && styles_css_default21["header-cell-stuck"], stripedRows && styles_css_default21["has-striped-rows"], isVisualRefresh && styles_css_default21["is-visual-refresh"], isSelection && clsx_m_default(styles_css_default13["selection-control"], styles_css_default13["selection-control-header"]), {
    [styles_css_default21["header-cell-fake-focus"]]: focusedComponent === `header-${String(columnId)}`,
    [styles_css_default21["header-cell-sortable"]]: sortingStatus,
    [styles_css_default21["header-cell-sorted"]]: sortingStatus === "ascending" || sortingStatus === "descending",
    [styles_css_default21["header-cell-disabled"]]: sortingDisabled,
    [styles_css_default21["header-cell-ascending"]]: sortingStatus === "ascending",
    [styles_css_default21["header-cell-descending"]]: sortingStatus === "descending",
    [styles_css_default21["header-cell-hidden"]]: hidden
  }, stickyStyles.className), style: Object.assign(Object.assign({}, resizableStyle), stickyStyles.style), ref: mergedRef }, getTableColHeaderRoleProps({ tableRole, sortingStatus, colIndex }), { tabIndex: cellTabIndex === -1 ? void 0 : cellTabIndex }, copyAnalyticsMetadataAttribute(props), ariaLabel ? { "aria-label": ariaLabel } : {}), children);
}

// ../node_modules/@cloudscape-design/components/table/selection/selection-cell.js
function TableHeaderSelectionCell(_a) {
  var { focusedComponent, singleSelectionHeaderAriaLabel, getSelectAllProps, onFocusMove } = _a, props = __rest(_a, ["focusedComponent", "singleSelectionHeaderAriaLabel", "getSelectAllProps", "onFocusMove"]);
  const selectAllProps = getSelectAllProps ? getSelectAllProps() : void 0;
  return import_react44.default.createElement(
    TableThElement,
    Object.assign({}, props, { isSelection: true, colIndex: 0, focusedComponent, ariaLabel: selectAllProps === null || selectAllProps === void 0 ? void 0 : selectAllProps.selectionGroupLabel }),
    selectAllProps ? import_react44.default.createElement(SelectionControl, Object.assign({ onFocusDown: (event) => {
      onFocusMove(event.target, -1, 1);
    }, focusedComponent }, selectAllProps, props.sticky ? { tabIndex: -1 } : {})) : import_react44.default.createElement(ScreenreaderOnly, null, singleSelectionHeaderAriaLabel),
    import_react44.default.createElement(Divider, { className: styles_css_default13["resize-divider"] })
  );
}
function TableBodySelectionCell(_a) {
  var { selectionControlProps } = _a, props = __rest(_a, ["selectionControlProps"]);
  return import_react44.default.createElement(TableTdElement, Object.assign({}, props, { isSelection: true, wrapLines: false, isEditable: false, isEditing: false, colIndex: 0 }), selectionControlProps ? import_react44.default.createElement(SelectionControl, Object.assign({}, selectionControlProps, { verticalAlign: props.verticalAlign })) : null);
}

// ../node_modules/@cloudscape-design/components/table/sticky-header.js
var import_react48 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/thead.js
var import_react46 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/header-cell/index.js
var import_react45 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/header-cell/utils.js
var stateToIcon = {
  sortable: "caret-down",
  ascending: "caret-up-filled",
  descending: "caret-down-filled"
};
var getSortingStatus = (sortable, sorted, descending, disabled) => {
  if (sorted) {
    if (descending) {
      return "descending";
    }
    return "ascending";
  }
  if (sortable && !disabled) {
    return "sortable";
  }
  return void 0;
};
var getSortingIconName = (sortingState) => stateToIcon[sortingState];
var isSorted = (column, sortingColumn) => column === sortingColumn || column.sortingField !== void 0 && column.sortingField === sortingColumn.sortingField || column.sortingComparator !== void 0 && column.sortingComparator === sortingColumn.sortingComparator;

// ../node_modules/@cloudscape-design/components/table/analytics-metadata/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/table/analytics-metadata/styles.scoped.css";
var styles_css_default22 = {
  "header-cell-text": "awsui_header-cell-text_dpuyq_1id1o_5"
};

// ../node_modules/@cloudscape-design/components/table/header-cell/index.js
function TableHeaderCell({ tabIndex, column, activeSortingColumn, sortingDescending, sortingDisabled, wrapLines, focusedComponent, stuck, sticky, hidden, stripedRows, onClick, colIndex, updateColumn, resizableColumns, resizableStyle, onResizeFinish, isEditable, columnId, stickyState, cellRef, tableRole, resizerRoleDescription, isExpandable, hasDynamicContent, variant }) {
  var _a;
  const i18n = useInternalI18n("table");
  const sortable = !!column.sortingComparator || !!column.sortingField;
  const sorted = !!activeSortingColumn && isSorted(column, activeSortingColumn);
  const sortingStatus = getSortingStatus(sortable, sorted, !!sortingDescending, !!sortingDisabled);
  const handleClick = () => onClick({
    sortingColumn: column,
    isDescending: sorted ? !sortingDescending : false
  });
  const handleKeyPress = ({ nativeEvent: e }) => {
    if (e.keyCode === KeyCode.enter || e.keyCode === KeyCode.space) {
      e.preventDefault();
      handleClick();
    }
  };
  const headerId = useUniqueId("table-header-");
  const clickableHeaderRef = (0, import_react45.useRef)(null);
  const { tabIndex: clickableHeaderTabIndex } = useSingleTabStopNavigation(clickableHeaderRef, { tabIndex });
  const cellRefObject = (0, import_react45.useRef)(null);
  const cellRefCombined = useMergeRefs(cellRef, cellRefObject);
  useResizeObserver(hasDynamicContent ? cellRefObject : () => null, (entry) => {
    updateColumn(columnId, entry.borderBoxWidth);
  });
  return import_react45.default.createElement(
    TableThElement,
    Object.assign({ resizableStyle, cellRef: cellRefCombined, sortingStatus, sortingDisabled, focusedComponent, stuck, sticky, hidden, stripedRows, colIndex, columnId, stickyState, tableRole, variant }, sortingDisabled ? {} : getAnalyticsMetadataAttribute({
      action: "sort",
      detail: {
        position: `${colIndex + 1}`,
        columnId: column.id ? `${column.id}` : "",
        label: `.${styles_css_default22["header-cell-text"]}`,
        sortingDescending: `${!sortingDescending}`
      }
    })),
    import_react45.default.createElement(
      "div",
      Object.assign({ ref: clickableHeaderRef, "data-focus-id": `sorting-control-${String(columnId)}`, className: clsx_m_default(styles_css_default21["header-cell-content"], {
        [styles_css_default21["header-cell-fake-focus"]]: focusedComponent === `sorting-control-${String(columnId)}`,
        [styles_css_default21["header-cell-content-expandable"]]: isExpandable
      }), "aria-label": column.ariaLabel ? column.ariaLabel({
        sorted,
        descending: sorted && !!sortingDescending,
        disabled: !!sortingDisabled
      }) : void 0 }, sortingStatus && !sortingDisabled ? {
        onKeyPress: handleKeyPress,
        tabIndex: clickableHeaderTabIndex,
        role: "button",
        onClick: handleClick
      } : {}),
      import_react45.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default21["header-cell-text"], styles_css_default22["header-cell-text"], wrapLines && styles_css_default21["header-cell-text-wrap"]), id: headerId },
        column.header,
        isEditable ? import_react45.default.createElement(
          "span",
          { className: styles_css_default21["edit-icon"] },
          import_react45.default.createElement(internal_default, { name: "edit", ariaLabel: i18n("columnDefinitions.editConfig.editIconAriaLabel", (_a = column.editConfig) === null || _a === void 0 ? void 0 : _a.editIconAriaLabel) })
        ) : null
      ),
      sortingStatus && import_react45.default.createElement(
        "span",
        { className: styles_css_default21["sorting-icon"] },
        import_react45.default.createElement(internal_default, { name: getSortingIconName(sortingStatus) })
      )
    ),
    resizableColumns ? import_react45.default.createElement(Resizer, { tabIndex, focusId: `resize-control-${String(columnId)}`, showFocusRing: focusedComponent === `resize-control-${String(columnId)}`, onWidthUpdate: (newWidth) => updateColumn(columnId, newWidth), onWidthUpdateCommit: onResizeFinish, ariaLabelledby: headerId, minWidth: typeof column.minWidth === "string" ? parseInt(column.minWidth) : column.minWidth, roleDescription: i18n("ariaLabels.resizerRoleDescription", resizerRoleDescription) }) : import_react45.default.createElement(Divider, { className: styles_css_default21["resize-divider"] })
  );
}

// ../node_modules/@cloudscape-design/components/table/thead.js
var Thead = import_react46.default.forwardRef(({ selectionType, getSelectAllProps, columnDefinitions, sortingColumn, sortingDisabled, sortingDescending, resizableColumns, variant, wrapLines, onFocusMove, onSortingChange, onResizeFinish, singleSelectionHeaderAriaLabel, stripedRows, sticky = false, hidden = false, stuck = false, stickyState, selectionColumnId: selectionColumnId2, focusedComponent, onFocusedComponentChange, tableRole, resizerRoleDescription, isExpandable, setLastUserAction }, outerRef) => {
  const { getColumnStyles, columnWidths, updateColumn, setCell } = useColumnWidths();
  const commonCellProps = {
    stuck,
    sticky,
    hidden,
    stripedRows,
    tableRole,
    variant,
    stickyState
  };
  return import_react46.default.createElement(
    "thead",
    { className: clsx_m_default(!hidden && styles_css_default13["thead-active"]) },
    import_react46.default.createElement(
      "tr",
      Object.assign({}, focusMarkers.all, { ref: outerRef, "aria-rowindex": 1 }, getTableHeaderRowRoleProps({ tableRole }), { onFocus: (event) => {
        var _a;
        const focusControlElement = findUpUntil(event.target, (element) => !!element.getAttribute("data-focus-id"));
        const focusId = (_a = focusControlElement === null || focusControlElement === void 0 ? void 0 : focusControlElement.getAttribute("data-focus-id")) !== null && _a !== void 0 ? _a : null;
        onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(focusId);
      }, onBlur: () => onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(null) }),
      selectionType ? import_react46.default.createElement(TableHeaderSelectionCell, Object.assign({}, commonCellProps, { focusedComponent, columnId: selectionColumnId2, getSelectAllProps, onFocusMove, singleSelectionHeaderAriaLabel }, getAnalyticsMetadataAttribute({
        action: "selectAll"
      }))) : null,
      columnDefinitions.map((column, colIndex) => {
        const columnId = getColumnKey(column, colIndex);
        return import_react46.default.createElement(TableHeaderCell, Object.assign({}, commonCellProps, {
          key: columnId,
          tabIndex: sticky ? -1 : 0,
          focusedComponent,
          column,
          activeSortingColumn: sortingColumn,
          sortingDescending,
          sortingDisabled,
          wrapLines,
          colIndex: selectionType ? colIndex + 1 : colIndex,
          columnId,
          updateColumn,
          onResizeFinish: () => onResizeFinish(columnWidths),
          resizableColumns,
          resizableStyle: getColumnStyles(sticky, columnId),
          onClick: (detail) => {
            setLastUserAction("sorting");
            fireNonCancelableEvent(onSortingChange, detail);
          },
          isEditable: !!column.editConfig,
          cellRef: (node) => setCell(sticky, columnId, node),
          tableRole,
          resizerRoleDescription,
          // Expandable option is only applicable to the first data column of the table.
          // When present, the header content receives extra padding to match the first offset in the data cells.
          isExpandable: colIndex === 0 && isExpandable,
          hasDynamicContent: hidden && !resizableColumns && column.hasDynamicContent
        }));
      })
    )
  );
});
var thead_default = Thead;

// ../node_modules/@cloudscape-design/components/table/use-sticky-header.js
var import_react47 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/sticky-scrolling.js
function stickyScrolling(containerRef, stickyRef) {
  const scrollToTop = () => {
    if (!containerRef.current || !stickyRef.current) {
      return;
    }
    const scrollingOffset = calculateScrollingOffset(containerRef.current, stickyRef.current);
    if (scrollingOffset > 0) {
      scrollUpBy(scrollingOffset, containerRef.current);
    }
  };
  const scrollToItem = (item) => {
    if (!item || !containerRef.current || !stickyRef.current) {
      return;
    }
    const stickyBottom = getLogicalBoundingClientRect(stickyRef.current).insetBlockEnd;
    const scrollingOffset = stickyBottom - getLogicalBoundingClientRect(item).insetBlockStart;
    if (scrollingOffset > 0) {
      scrollUpBy(scrollingOffset, containerRef.current);
    }
  };
  return {
    scrollToTop,
    scrollToItem
  };
}
function calculateScrollingOffset(container, sticky) {
  const stickyRect = getLogicalBoundingClientRect(sticky);
  const containerRect = getLogicalBoundingClientRect(container);
  return stickyRect.insetBlockStart - containerRect.insetBlockStart;
}
function scrollUpBy(amount, container) {
  const parent = getOverflowParents(container);
  if (parent.length) {
    parent[0].scrollTop -= amount;
  } else {
    window.scrollTo({ top: window.pageYOffset - amount });
  }
}

// ../node_modules/@cloudscape-design/components/table/use-sticky-header.js
var useStickyHeader = (tableRef, theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef) => {
  const isMobile = useMobile();
  const syncColumnHeaderWidths = (0, import_react47.useCallback)(() => {
    if (tableRef.current && theadRef.current && secondaryTheadRef.current && secondaryTableRef.current && tableWrapperRef.current) {
      secondaryTableRef.current.style.inlineSize = `${tableRef.current.getBoundingClientRect().width}px`;
      tableWrapperRef.current.style.marginBlockStart = `-${theadRef.current.getBoundingClientRect().height}px`;
    }
  }, [theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef, tableRef]);
  (0, import_react47.useLayoutEffect)(() => {
    syncColumnHeaderWidths();
  });
  useResizeObserver(theadRef, syncColumnHeaderWidths);
  const scrollToTop = () => {
    if (!isMobile && theadRef.current && secondaryTheadRef.current && tableWrapperRef.current) {
      const scrollDist = calculateScrollingOffset(theadRef.current, secondaryTheadRef.current);
      if (scrollDist > 0) {
        scrollUpBy(scrollDist, tableWrapperRef.current);
      }
    }
  };
  const { scrollToItem } = stickyScrolling(tableWrapperRef, secondaryTheadRef);
  const scrollToRow = (itemNode) => {
    if (!isMobile) {
      scrollToItem(itemNode);
    }
  };
  return { scrollToRow, scrollToTop };
};

// ../node_modules/@cloudscape-design/components/table/sticky-header.js
var sticky_header_default = (0, import_react48.forwardRef)(StickyHeader);
function StickyHeader({ variant, theadProps, wrapperRef, theadRef, secondaryWrapperRef, onScroll, tableRef, tableHasHeader, contentDensity, tableRole }, ref) {
  const secondaryTheadRef = (0, import_react48.useRef)(null);
  const secondaryTableRef = (0, import_react48.useRef)(null);
  const { isStuck } = (0, import_react48.useContext)(StickyHeaderContext);
  const [focusedComponent, setFocusedComponent] = (0, import_react48.useState)(null);
  const { scrollToRow, scrollToTop } = useStickyHeader(tableRef, theadRef, secondaryTheadRef, secondaryTableRef, wrapperRef);
  (0, import_react48.useImperativeHandle)(ref, () => ({
    scrollToTop,
    scrollToRow,
    setFocus: setFocusedComponent
  }));
  return import_react48.default.createElement(
    "div",
    {
      className: clsx_m_default(styles_css_default13["header-secondary"], styles_css_default13[`variant-${variant}`], {
        [styles_css_default13["table-has-header"]]: tableHasHeader
      }),
      "aria-hidden": true,
      // Prevents receiving focus in Firefox. Focus on the overflowing table is sufficient
      // to scroll the table horizontally
      tabIndex: -1,
      ref: secondaryWrapperRef,
      onScroll
    },
    import_react48.default.createElement(
      "table",
      Object.assign({ className: clsx_m_default(styles_css_default13.table, styles_css_default13["table-layout-fixed"], contentDensity === "compact" && getVisualContextClassname("compact-table")), ref: secondaryTableRef }, getTableRoleProps({ tableRole })),
      import_react48.default.createElement(thead_default, Object.assign({ ref: secondaryTheadRef, sticky: true, stuck: isStuck, focusedComponent }, theadProps))
    )
  );
}

// ../node_modules/@cloudscape-design/components/table/sticky-scrollbar/sticky-scrollbar.js
var import_react50 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/sticky-scrollbar/use-sticky-scrollbar.js
var import_react49 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/table/sticky-scrollbar/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/table/sticky-scrollbar/styles.scoped.css";
var styles_css_default23 = {
  "sticky-scrollbar": "awsui_sticky-scrollbar_faqt8_qbegi_181",
  "sticky-scrollbar-content": "awsui_sticky-scrollbar-content_faqt8_qbegi_193",
  "sticky-scrollbar-visible": "awsui_sticky-scrollbar-visible_faqt8_qbegi_196",
  "sticky-scrollbar-native-invisible": "awsui_sticky-scrollbar-native-invisible_faqt8_qbegi_199",
  "sticky-scrollbar-offset": "awsui_sticky-scrollbar-offset_faqt8_qbegi_202",
  "is-visual-refresh": "awsui_is-visual-refresh_faqt8_qbegi_205"
};

// ../node_modules/@cloudscape-design/components/table/sticky-scrollbar/use-sticky-scrollbar.js
var updatePosition = (tableEl, wrapperEl, scrollbarEl, scrollbarContentEl, inScrollableContainer) => {
  if (!tableEl || !scrollbarEl || !wrapperEl) {
    return;
  }
  const { inlineSize: tableInlineSize } = getLogicalBoundingClientRect(tableEl);
  const { inlineSize: wrapperInlineSize } = getLogicalBoundingClientRect(wrapperEl);
  const scrollbarHeight = browserScrollbarSize().height;
  const areaIsScrollable = tableInlineSize > wrapperInlineSize;
  if (!areaIsScrollable) {
    scrollbarEl.classList.remove(styles_css_default23["sticky-scrollbar-visible"]);
  } else {
    if (!scrollbarEl.classList.contains(styles_css_default23["sticky-scrollbar-visible"])) {
      requestAnimationFrame(() => {
        scrollbarEl.scrollLeft = wrapperEl.scrollLeft;
      });
    }
    scrollbarEl.classList.add(styles_css_default23["sticky-scrollbar-visible"]);
    if (!scrollbarHeight) {
      scrollbarEl.classList.add(styles_css_default23["sticky-scrollbar-native-invisible"]);
    }
  }
  if (scrollbarHeight && scrollbarEl && scrollbarContentEl) {
    scrollbarEl.style.blockSize = `${scrollbarHeight}px`;
    scrollbarContentEl.style.blockSize = `${scrollbarHeight}px`;
  }
  if (tableEl && wrapperEl && scrollbarContentEl && scrollbarEl) {
    const wrapperElRect = getLogicalBoundingClientRect(wrapperEl);
    const tableElRect = getLogicalBoundingClientRect(tableEl);
    scrollbarEl.style.inlineSize = `${wrapperElRect.inlineSize}px`;
    scrollbarContentEl.style.inlineSize = `${tableElRect.inlineSize}px`;
    scrollbarEl.style.insetBlockEnd = inScrollableContainer ? "0px" : `var(${global_vars_default.stickyVerticalBottomOffset}, 0px)`;
  }
};
function useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetScrollbar) {
  const [inScrollableContainer, setInScrollableContainer] = (0, import_react49.useState)(false);
  const wrapperEl = wrapperRef.current;
  (0, import_react49.useEffect)(() => {
    if (wrapperEl) {
      setInScrollableContainer(!!getContainingBlock(wrapperEl) || !!getOverflowParents(wrapperEl)[0]);
    }
  }, [wrapperEl]);
  (0, import_react49.useEffect)(() => {
    if (wrapperRef.current && tableRef.current) {
      const observer = new ResizeObserver(() => {
        if (scrollbarContentRef.current) {
          updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, inScrollableContainer);
        }
      });
      observer.observe(wrapperRef.current);
      observer.observe(tableRef.current);
      return () => {
        observer.disconnect();
      };
    }
  }, [scrollbarContentRef, scrollbarRef, tableRef, wrapperRef, inScrollableContainer, offsetScrollbar]);
  (0, import_react49.useEffect)(() => {
    const resizeHandler = () => {
      updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, inScrollableContainer);
    };
    resizeHandler();
    window.addEventListener("resize", resizeHandler);
    return () => {
      window.removeEventListener("resize", resizeHandler);
    };
  }, [tableRef, wrapperRef, scrollbarRef, scrollbarContentRef, inScrollableContainer]);
}

// ../node_modules/@cloudscape-design/components/table/sticky-scrollbar/sticky-scrollbar.js
var sticky_scrollbar_default = (0, import_react50.forwardRef)(StickyScrollbar);
function StickyScrollbar({ wrapperRef, tableRef, onScroll, hasStickyColumns }, ref) {
  const isVisualRefresh = useVisualRefresh();
  const scrollbarRef = import_react50.default.useRef(null);
  const scrollbarContentRef = import_react50.default.useRef(null);
  const mergedRef = useMergeRefs(ref, scrollbarRef);
  const offsetScrollbar = hasStickyColumns || browserScrollbarSize().height === 0;
  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetScrollbar);
  const { ref: stickyDetectionRef, isIntersecting: isStickyDetectionVisible } = useIntersectionObserver();
  return import_react50.default.createElement(
    import_react50.default.Fragment,
    null,
    import_react50.default.createElement(
      "div",
      { ref: mergedRef, className: clsx_m_default(styles_css_default23["sticky-scrollbar"], offsetScrollbar && styles_css_default23["sticky-scrollbar-offset"], isVisualRefresh && styles_css_default23["is-visual-refresh"]), onScroll, "data-stuck": !isStickyDetectionVisible },
      import_react50.default.createElement("div", { ref: scrollbarContentRef, className: styles_css_default23["sticky-scrollbar-content"] })
    ),
    import_react50.default.createElement("div", { ref: stickyDetectionRef, style: { position: "absolute", right: 0, bottom: 0, left: 0, height: 1 } })
  );
}

// ../node_modules/@cloudscape-design/components/table/tools-header.js
var import_react51 = __toESM(require_react());
function ToolsHeader({ header, filter, pagination, preferences, setLastUserAction }) {
  const [breakpoint, ref] = useContainerBreakpoints(["xs"]);
  const isHeaderString = typeof header === "string";
  const assignHeaderId = (0, import_react51.useContext)(CollectionLabelContext).assignId;
  const headingId = useUniqueId("heading");
  if (assignHeaderId !== void 0 && isHeaderString) {
    assignHeaderId(headingId);
  }
  const isSmall = breakpoint === "default";
  const hasTools = filter || pagination || preferences;
  return import_react51.default.createElement(
    import_react51.default.Fragment,
    null,
    isHeaderString ? import_react51.default.createElement("span", { id: headingId }, header) : header,
    hasTools && import_react51.default.createElement(
      "div",
      { ref, className: clsx_m_default(styles_css_default13.tools, isSmall && styles_css_default13["tools-small"]) },
      filter && import_react51.default.createElement("div", { className: styles_css_default13["tools-filtering"], onClickCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("filter"), onKeyDownCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("filter") }, filter),
      import_react51.default.createElement(
        "div",
        { className: styles_css_default13["tools-align-right"] },
        pagination && import_react51.default.createElement("div", { className: styles_css_default13["tools-pagination"], onClickCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("pagination") }, pagination),
        preferences && import_react51.default.createElement("div", { className: styles_css_default13["tools-preferences"], onClickCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("preferences") }, preferences)
      )
    )
  );
}

// ../node_modules/@cloudscape-design/components/table/use-cell-editing.js
var import_react52 = __toESM(require_react());
function useCellEditing({ onCancel, onSubmit }) {
  const [currentEditCell, setCurrentEditCell] = (0, import_react52.useState)(null);
  const [lastSuccessfulEditCell, setLastSuccessfulEditCell] = (0, import_react52.useState)(null);
  const [currentEditLoading, setCurrentEditLoading] = (0, import_react52.useState)(false);
  const startEdit = (cellId) => {
    setLastSuccessfulEditCell(null);
    setCurrentEditCell(cellId);
  };
  const cancelEdit = (0, import_react52.useCallback)(() => setCurrentEditCell(null), []);
  const completeEdit = (cellId, editCancelled) => {
    const eventCancelled = fireCancelableEvent(onCancel, {});
    if (!eventCancelled) {
      setCurrentEditCell(null);
      if (!editCancelled) {
        setLastSuccessfulEditCell(cellId);
      }
    }
  };
  const checkEditing = ({ row, col }) => row === (currentEditCell === null || currentEditCell === void 0 ? void 0 : currentEditCell.row) && col === currentEditCell.col;
  const checkLastSuccessfulEdit = ({ row, col }) => row === (lastSuccessfulEditCell === null || lastSuccessfulEditCell === void 0 ? void 0 : lastSuccessfulEditCell.row) && col === lastSuccessfulEditCell.col;
  const submitEdit = onSubmit ? (...args) => __awaiter(this, void 0, void 0, function* () {
    setCurrentEditLoading(true);
    try {
      yield onSubmit(...args);
    } finally {
      setCurrentEditLoading(false);
    }
  }) : void 0;
  return {
    isLoading: currentEditLoading,
    startEdit,
    cancelEdit,
    checkEditing,
    checkLastSuccessfulEdit,
    completeEdit,
    submitEdit
  };
}

// ../node_modules/@cloudscape-design/components/table/use-prevent-sticky-click-scroll.js
var import_react53 = __toESM(require_react());
var _ScrollLock_timeoutId;
var _ScrollLock_scrollLeft;
var _ScrollLock_active;
var stickyCellSelector = `.${styles_css_default14["sticky-cell"]}`;
var scrollLockTimeout = 50;
function usePreventStickyClickScroll(wrapperRefObject) {
  (0, import_react53.useEffect)(() => {
    if (wrapperRefObject.current) {
      const wrapperEl = wrapperRefObject.current;
      const scrollLock = new ScrollLock();
      const onClick = (event) => {
        if (event.target && event.target instanceof HTMLElement && (event.target.matches(stickyCellSelector) || event.target.closest(stickyCellSelector))) {
          scrollLock.set(wrapperEl.scrollLeft);
        }
      };
      wrapperEl.addEventListener("click", onClick);
      const onScroll = () => {
        if (scrollLock.active) {
          wrapperEl.scrollLeft = scrollLock.scrollLeft;
          scrollLock.clear();
        }
      };
      wrapperEl.addEventListener("scroll", onScroll);
      return () => {
        wrapperEl.removeEventListener("click", onClick);
        wrapperEl.removeEventListener("scroll", onScroll);
      };
    }
  }, [wrapperRefObject]);
}
var ScrollLock = class {
  constructor() {
    _ScrollLock_timeoutId.set(this, setTimeout(() => {
    }, 0));
    _ScrollLock_scrollLeft.set(this, 0);
    _ScrollLock_active.set(this, false);
  }
  set(scrollLeft) {
    if (!__classPrivateFieldGet(this, _ScrollLock_active, "f")) {
      __classPrivateFieldSet(this, _ScrollLock_active, true, "f");
      __classPrivateFieldSet(this, _ScrollLock_scrollLeft, scrollLeft, "f");
      __classPrivateFieldSet(this, _ScrollLock_timeoutId, setTimeout(() => __classPrivateFieldSet(this, _ScrollLock_active, false, "f"), scrollLockTimeout), "f");
    }
  }
  clear() {
    __classPrivateFieldSet(this, _ScrollLock_active, false, "f");
    clearTimeout(__classPrivateFieldGet(this, _ScrollLock_timeoutId, "f"));
  }
  get active() {
    return __classPrivateFieldGet(this, _ScrollLock_active, "f");
  }
  get scrollLeft() {
    return __classPrivateFieldGet(this, _ScrollLock_scrollLeft, "f");
  }
};
_ScrollLock_timeoutId = /* @__PURE__ */ new WeakMap(), _ScrollLock_scrollLeft = /* @__PURE__ */ new WeakMap(), _ScrollLock_active = /* @__PURE__ */ new WeakMap();

// ../node_modules/@cloudscape-design/components/table/use-row-events.js
function useRowEvents({ onRowClick, onRowContextMenu }) {
  const onRowClickHandler = (rowIndex, item, event) => {
    const tableCell = findUpUntil(event.target, (element) => element.tagName.toLowerCase() === "td");
    if (!tableCell || !tableCell.classList.contains(styles_css_default13["selection-control"])) {
      const details = { rowIndex, item };
      fireNonCancelableEvent(onRowClick, details);
    }
  };
  const onRowContextMenuHandler = (rowIndex, item, event) => {
    const details = {
      rowIndex,
      item,
      clientX: event.clientX,
      clientY: event.clientY
    };
    fireCancelableEvent(onRowContextMenu, details, event);
  };
  return {
    onRowClickHandler: onRowClick && onRowClickHandler,
    onRowContextMenuHandler: onRowContextMenu && onRowContextMenuHandler
  };
}

// ../node_modules/@cloudscape-design/components/table/use-table-focus-navigation.js
var import_react54 = __toESM(require_react());
function iterateTableCells(table, func) {
  table.querySelectorAll("tr").forEach((row, rowIndex) => {
    row.querySelectorAll("td").forEach((cell, cellIndex) => {
      func(cell, rowIndex, cellIndex);
    });
  });
}
function useTableFocusNavigation({ enableKeyboardNavigation, selectionType, tableRoot, columnDefinitions, numRows }) {
  const focusableColumns = (0, import_react54.useMemo)(() => {
    const cols = columnDefinitions.map((column) => !!column.editConfig);
    if (selectionType) {
      cols.unshift(false);
    }
    return cols;
  }, [columnDefinitions, selectionType]);
  const maxColumnIndex = focusableColumns.length - 1;
  const minColumnIndex = selectionType ? 1 : 0;
  const focusCell = (0, import_react54.useCallback)((rowIndex, columnIndex) => {
    if (tableRoot === null || tableRoot === void 0 ? void 0 : tableRoot.current) {
      iterateTableCells(tableRoot.current, (cell, rIndex, cIndex) => {
        var _a;
        if (rIndex === rowIndex && cIndex === columnIndex) {
          const editButton = cell.querySelector("button:last-child");
          if (editButton) {
            (_a = editButton.focus) === null || _a === void 0 ? void 0 : _a.call(editButton);
            scrollElementIntoView(editButton);
          }
        }
      });
    }
  }, [tableRoot]);
  const shiftFocus = (0, import_react54.useCallback)((vertical, horizontal) => {
    var _a;
    const focusedCell = (_a = tableRoot.current) === null || _a === void 0 ? void 0 : _a.querySelector("td:focus-within");
    if (!focusedCell) {
      return;
    }
    const columnIndex = focusedCell.cellIndex;
    const rowIndex = focusedCell.parentElement.rowIndex;
    let newRowIndex = rowIndex;
    let newColumnIndex = columnIndex;
    if (vertical !== 0) {
      newRowIndex = Math.min(numRows, Math.max(rowIndex + vertical, 0));
    }
    if (horizontal !== 0) {
      while (newColumnIndex <= maxColumnIndex && newColumnIndex >= minColumnIndex) {
        newColumnIndex += horizontal;
        if (focusableColumns[newColumnIndex]) {
          break;
        }
      }
    }
    if ((rowIndex !== newRowIndex || columnIndex !== newColumnIndex) && tableRoot.current) {
      focusCell(newRowIndex, newColumnIndex);
    }
  }, [focusCell, focusableColumns, maxColumnIndex, minColumnIndex, numRows, tableRoot]);
  const handleArrowKeyEvents = (0, import_react54.useCallback)((event) => {
    var _a, _b;
    const abort = !!((_a = tableRoot.current) === null || _a === void 0 ? void 0 : _a.querySelector('[data-inline-editing-active = "true"]')) || !((_b = document.activeElement) === null || _b === void 0 ? void 0 : _b.closest("[data-inline-editing-active]"));
    if (abort) {
      return;
    }
    switch (event.key) {
      case "ArrowUp":
        event.preventDefault();
        shiftFocus(-1, 0);
        break;
      case "ArrowDown":
        event.preventDefault();
        shiftFocus(1, 0);
        break;
      case "ArrowLeft":
        event.preventDefault();
        shiftFocus(0, -1);
        break;
      case "ArrowRight":
        event.preventDefault();
        shiftFocus(0, 1);
        break;
      // istanbul ignore next (default case = do nothing, not testable)
      default:
        return;
    }
  }, [shiftFocus, tableRoot]);
  (0, import_react54.useEffect)(() => {
    if (!tableRoot.current || enableKeyboardNavigation) {
      return;
    }
    const tableElement = tableRoot.current;
    tableRoot.current.addEventListener("keydown", handleArrowKeyEvents);
    return () => tableElement && tableElement.removeEventListener("keydown", handleArrowKeyEvents);
  }, [enableKeyboardNavigation, focusableColumns, handleArrowKeyEvents, tableRoot]);
}
var use_table_focus_navigation_default = useTableFocusNavigation;

// ../node_modules/@cloudscape-design/components/table/internal.js
var GRID_NAVIGATION_PAGE_SIZE = 10;
var SELECTION_COLUMN_WIDTH = 54;
var selectionColumnId = Symbol("selection-column-id");
var InternalTableAsSubstep = import_react55.default.forwardRef((props, ref) => {
  const { funnelSubStepProps } = useFunnelSubStep();
  const tableProps = Object.assign(Object.assign({}, props), { __funnelSubStepProps: funnelSubStepProps });
  return import_react55.default.createElement(InternalTable, Object.assign({}, tableProps, { ref }));
});
var InternalTable = import_react55.default.forwardRef((_a, ref) => {
  var _b, _c, _d;
  var { header, footer, empty, filter, pagination, preferences, items, columnDefinitions, trackBy, loading, loadingText, selectionType, selectedItems, isItemDisabled, ariaLabels, onSelectionChange, onSortingChange, sortingColumn, sortingDescending, sortingDisabled, visibleColumns, stickyHeader, stickyHeaderVerticalOffset, onRowClick, onRowContextMenu, wrapLines, stripedRows, contentDensity, submitEdit, onEditCancel, resizableColumns, onColumnWidthsChange, variant, __internalRootRef, totalItemsCount, firstIndex, renderAriaLive, stickyColumns, columnDisplay, enableKeyboardNavigation, expandableRows, getLoadingStatus, renderLoaderPending, renderLoaderLoading, renderLoaderError, renderLoaderEmpty, cellVerticalAlign, __funnelSubStepProps } = _a, rest = __rest(_a, ["header", "footer", "empty", "filter", "pagination", "preferences", "items", "columnDefinitions", "trackBy", "loading", "loadingText", "selectionType", "selectedItems", "isItemDisabled", "ariaLabels", "onSelectionChange", "onSortingChange", "sortingColumn", "sortingDescending", "sortingDisabled", "visibleColumns", "stickyHeader", "stickyHeaderVerticalOffset", "onRowClick", "onRowContextMenu", "wrapLines", "stripedRows", "contentDensity", "submitEdit", "onEditCancel", "resizableColumns", "onColumnWidthsChange", "variant", "__internalRootRef", "totalItemsCount", "firstIndex", "renderAriaLive", "stickyColumns", "columnDisplay", "enableKeyboardNavigation", "expandableRows", "getLoadingStatus", "renderLoaderPending", "renderLoaderLoading", "renderLoaderError", "renderLoaderEmpty", "cellVerticalAlign", "__funnelSubStepProps"]);
  if (expandableRows && enableKeyboardNavigation === void 0) {
    enableKeyboardNavigation = true;
  }
  const baseProps = getBaseProps(rest);
  const prevStickyHeader = usePrevious(stickyHeader);
  if (prevStickyHeader !== void 0 && !!stickyHeader !== !!prevStickyHeader) {
    warnOnce("Table", `\`stickyHeader\` has changed from "${prevStickyHeader}" to "${stickyHeader}". It is not recommended to change the value of this property during the component lifecycle. Please set it to either "true" or "false" unconditionally.`);
  }
  const isMobile = useMobile();
  const { isExpandable, allItems, getExpandableItemProps } = useExpandableTableProps({
    items,
    expandableRows,
    trackBy,
    ariaLabels
  });
  const { allRows } = useProgressiveLoadingProps({
    items: allItems,
    getLoadingStatus,
    getExpandableItemProps
  });
  const [containerWidth, wrapperMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const wrapperMeasureRefObject = (0, import_react55.useRef)(null);
  const wrapperMeasureMergedRef = useMergeRefs(wrapperMeasureRef, wrapperMeasureRefObject);
  const [tableWidth, tableMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const tableRefObject = (0, import_react55.useRef)(null);
  const secondaryWrapperRef = import_react55.default.useRef(null);
  const theadRef = (0, import_react55.useRef)(null);
  const stickyHeaderRef = import_react55.default.useRef(null);
  const scrollbarRef = import_react55.default.useRef(null);
  const _e = useCellEditing({ onCancel: onEditCancel, onSubmit: submitEdit }), { cancelEdit } = _e, cellEditing = __rest(_e, ["cancelEdit"]);
  const paginationRef = (0, import_react55.useRef)({});
  const filterRef = (0, import_react55.useRef)({});
  const getHeaderText = () => {
    var _a2, _b2, _c2, _d2;
    return (_c2 = (_b2 = (_a2 = toolsHeaderPerformanceMarkRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(`.${styles_css_default7["heading-text"]}`)) === null || _b2 === void 0 ? void 0 : _b2.innerText) !== null && _c2 !== void 0 ? _c2 : (_d2 = toolsHeaderPerformanceMarkRef.current) === null || _d2 === void 0 ? void 0 : _d2.innerText;
  };
  const getPatternIdentifier = () => {
    var _a2;
    const hasActions = !!((_a2 = toolsHeaderPerformanceMarkRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(`.${styles_css_default7.actions} .${styles_css_default.button}`));
    if (hasActions) {
      return "table-with-actions";
    }
    return "";
  };
  const performanceMarkAttributes = usePerformanceMarks("table", () => !loading, tableRefObject, () => ({
    loading: loading !== null && loading !== void 0 ? loading : false,
    header: getHeaderText()
  }), [loading]);
  const analyticsMetadata = getAnalyticsMetadataProps(rest);
  const interactionMetadata = () => {
    const filterData = filterRef.current;
    const paginationData = paginationRef.current;
    return JSON.stringify({
      filterData,
      paginationData,
      sortingColumn: sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingField,
      sortingOrder: sortingColumn ? sortingDescending ? "Descending" : "Ascending" : void 0
    });
  };
  const getComponentConfiguration = () => {
    var _a2, _b2;
    const filterData = filterRef.current;
    const paginationData = paginationRef.current;
    return {
      variant,
      flowType: (_a2 = rest.analyticsMetadata) === null || _a2 === void 0 ? void 0 : _a2.flowType,
      instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier,
      taskName: (_b2 = analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier) !== null && _b2 !== void 0 ? _b2 : getHeaderText(),
      patternIdentifier: getPatternIdentifier(),
      sortedBy: {
        columnId: sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingField,
        sortingOrder: sortingColumn ? sortingDescending ? "desc" : "asc" : void 0
      },
      filtered: Boolean(filterData === null || filterData === void 0 ? void 0 : filterData.filterText),
      currentPageIndex: paginationData.currentPageIndex,
      totalNumberOfResources: paginationData.totalPageCount,
      resourcesPerPage: (allRows === null || allRows === void 0 ? void 0 : allRows.length) || 0,
      resourcesSelected: (selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length) > 0
    };
  };
  const { setLastUserAction, tableInteractionAttributes } = useTableInteractionMetrics({
    elementRef: tableRefObject,
    loading,
    instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier,
    itemCount: items.length,
    getComponentIdentifier: getHeaderText,
    getComponentConfiguration,
    interactionMetadata
  });
  (0, import_react55.useImperativeHandle)(ref, () => {
    var _a2;
    return {
      scrollToTop: ((_a2 = stickyHeaderRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollToTop) || (() => void 0),
      cancelEdit
    };
  }, [cancelEdit]);
  const wrapperRefObject = (0, import_react55.useRef)(null);
  const handleScroll = useScrollSync([wrapperRefObject, scrollbarRef, secondaryWrapperRef]);
  const { moveFocusDown, moveFocusUp, moveFocus } = useSelectionFocusMove(selectionType, allItems.length);
  const { onRowClickHandler, onRowContextMenuHandler } = useRowEvents({ onRowClick, onRowContextMenu });
  const visibleColumnDefinitions = getVisibleColumnDefinitions({
    columnDefinitions,
    columnDisplay,
    visibleColumns
  });
  const { isItemSelected, getSelectAllProps, getItemSelectionProps } = useSelection({
    items: allItems,
    trackBy,
    selectedItems,
    selectionType,
    isItemDisabled,
    onSelectionChange,
    ariaLabels,
    loading
  });
  const isRowSelected = (row) => row.type === "data" && isItemSelected(row.item);
  if (isDevelopment) {
    if (resizableColumns) {
      checkColumnWidths(columnDefinitions);
    }
    if (sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingComparator) {
      checkSortingState(columnDefinitions, sortingColumn.sortingComparator);
    }
  }
  const isVisualRefresh = useVisualRefresh();
  const computedVariant = isVisualRefresh ? variant : ["embedded", "full-page"].indexOf(variant) > -1 ? "container" : variant;
  const hasHeader = !!(header || filter || pagination || preferences);
  const hasSelection = !!selectionType;
  const hasFooterPagination = isMobile && variant === "full-page" && !!pagination;
  const hasFooter = !!footer || hasFooterPagination;
  const headerIdRef = (0, import_react55.useRef)(void 0);
  const isLabelledByHeader = !(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel) && !!header;
  const ariaLabelledby = isLabelledByHeader && headerIdRef.current ? headerIdRef.current : void 0;
  const setHeaderRef = (0, import_react55.useCallback)((id) => {
    headerIdRef.current = id;
  }, []);
  const visibleColumnWidthsWithSelection = [];
  const visibleColumnIdsWithSelection = [];
  if (hasSelection) {
    visibleColumnWidthsWithSelection.push({ id: selectionColumnId, width: SELECTION_COLUMN_WIDTH });
    visibleColumnIdsWithSelection.push(selectionColumnId);
  }
  for (let columnIndex = 0; columnIndex < visibleColumnDefinitions.length; columnIndex++) {
    const columnId = getColumnKey(visibleColumnDefinitions[columnIndex], columnIndex);
    visibleColumnWidthsWithSelection.push(Object.assign(Object.assign({}, visibleColumnDefinitions[columnIndex]), { id: columnId }));
    visibleColumnIdsWithSelection.push(columnId);
  }
  const stickyState = useStickyColumns({
    visibleColumns: visibleColumnIdsWithSelection,
    stickyColumnsFirst: ((_b = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) !== null && _b !== void 0 ? _b : 0) + ((stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) && hasSelection ? 1 : 0),
    stickyColumnsLast: (stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.last) || 0
  });
  const hasStickyColumns = !!(((_c = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) !== null && _c !== void 0 ? _c : 0) + ((_d = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.last) !== null && _d !== void 0 ? _d : 0) > 0);
  const hasEditableCells = !!columnDefinitions.find((col) => col.editConfig);
  let tableRole = "table";
  if (isExpandable) {
    tableRole = "treegrid";
  } else if (enableKeyboardNavigation) {
    tableRole = "grid";
  } else if (hasEditableCells) {
    tableRole = "grid-default";
  }
  const theadProps = {
    selectionType,
    getSelectAllProps,
    columnDefinitions: visibleColumnDefinitions,
    variant: computedVariant,
    wrapLines,
    resizableColumns,
    sortingColumn,
    sortingDisabled,
    sortingDescending,
    onSortingChange,
    onFocusMove: moveFocus,
    onResizeFinish(newWidth) {
      const widthsDetail = columnDefinitions.map((column, index) => newWidth.get(getColumnKey(column, index)) || column.width || DEFAULT_COLUMN_WIDTH);
      const widthsChanged = widthsDetail.some((width, index) => columnDefinitions[index].width !== width);
      if (widthsChanged) {
        fireNonCancelableEvent(onColumnWidthsChange, { widths: widthsDetail });
      }
    },
    singleSelectionHeaderAriaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel,
    resizerRoleDescription: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.resizerRoleDescription,
    stripedRows,
    stickyState,
    selectionColumnId,
    tableRole,
    isExpandable,
    setLastUserAction
  };
  usePreventStickyClickScroll(wrapperRefObject);
  const wrapperRef = useMergeRefs(wrapperRefObject, stickyState.refs.wrapper);
  const tableRef = useMergeRefs(tableMeasureRef, tableRefObject, stickyState.refs.table);
  const wrapperProps = getTableWrapperRoleProps({
    tableRole,
    isScrollable: !!(tableWidth && containerWidth && tableWidth > containerWidth),
    ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel,
    ariaLabelledby
  });
  const getMouseDownTarget = useMouseDownTarget();
  use_table_focus_navigation_default({
    enableKeyboardNavigation,
    selectionType,
    tableRoot: tableRefObject,
    columnDefinitions: visibleColumnDefinitions,
    numRows: allRows === null || allRows === void 0 ? void 0 : allRows.length
  });
  const toolsHeaderPerformanceMarkRef = (0, import_react55.useRef)(null);
  const [toolsHeaderHeight, toolsHeaderWrapperMeasureRef] = useContainerQuery((rect) => rect.borderBoxHeight);
  const toolsHeaderWrapper = useMergeRefs(toolsHeaderPerformanceMarkRef, toolsHeaderWrapperMeasureRef);
  const colIndexOffset = selectionType ? 1 : 0;
  const totalColumnsCount = visibleColumnDefinitions.length + colIndexOffset;
  return import_react55.default.createElement(
    LinkDefaultVariantContext.Provider,
    { value: { defaultVariant: "primary" } },
    import_react55.default.createElement(
      TableComponentsContextProvider,
      { value: { paginationRef, filterRef } },
      import_react55.default.createElement(
        ColumnWidthsProvider,
        { visibleColumns: visibleColumnWidthsWithSelection, resizableColumns, containerRef: wrapperMeasureRefObject },
        import_react55.default.createElement(
          InternalContainer,
          Object.assign({}, baseProps, tableInteractionAttributes, { __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default13.root), __funnelSubStepProps, __fullPage: variant === "full-page", header: import_react55.default.createElement(
            import_react55.default.Fragment,
            null,
            hasHeader && import_react55.default.createElement(
              "div",
              null,
              import_react55.default.createElement(
                "div",
                { ref: toolsHeaderWrapper, className: clsx_m_default(styles_css_default13["header-controls"], styles_css_default13[`variant-${computedVariant}`]) },
                import_react55.default.createElement(
                  CollectionLabelContext.Provider,
                  { value: { assignId: setHeaderRef } },
                  import_react55.default.createElement(ToolsHeader, { header, filter, pagination, preferences, setLastUserAction })
                )
              )
            ),
            stickyHeader && import_react55.default.createElement(sticky_header_default, { ref: stickyHeaderRef, variant: computedVariant, theadProps, wrapperRef: wrapperRefObject, theadRef, secondaryWrapperRef, tableRef: tableRefObject, onScroll: handleScroll, tableHasHeader: hasHeader, contentDensity, tableRole })
          ), disableHeaderPaddings: true, disableContentPaddings: true, variant: toContainerVariant(computedVariant), __disableFooterPaddings: true, __disableFooterDivider: true, __disableStickyMobile: false, footer: hasFooter ? import_react55.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default13["footer-wrapper"], styles_css_default13[`variant-${computedVariant}`]) },
            import_react55.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default13.footer, hasFooterPagination && styles_css_default13["footer-with-pagination"]) },
              footer && import_react55.default.createElement("span", null, footer),
              hasFooterPagination && import_react55.default.createElement("div", { className: styles_css_default13["footer-pagination"] }, pagination)
            )
          ) : null, __stickyHeader: stickyHeader, __mobileStickyOffset: toolsHeaderHeight !== null && toolsHeaderHeight !== void 0 ? toolsHeaderHeight : 0, __stickyOffset: stickyHeaderVerticalOffset }, focusMarkers.root),
          import_react55.default.createElement(
            "div",
            Object.assign({ ref: wrapperRef, className: clsx_m_default(styles_css_default13.wrapper, styles_css_default13[`variant-${computedVariant}`], {
              [styles_css_default13["has-footer"]]: hasFooter,
              [styles_css_default13["has-header"]]: hasHeader
            }), style: stickyState.style.wrapper, onScroll: handleScroll }, wrapperProps),
            import_react55.default.createElement("div", { className: styles_css_default13["wrapper-content-measure"], ref: wrapperMeasureMergedRef }),
            !!renderAriaLive && !!firstIndex && import_react55.default.createElement(
              internal_default2,
              { hidden: true, tagName: "span" },
              import_react55.default.createElement("span", null, renderAriaLive({
                firstIndex,
                lastIndex: firstIndex + items.length - 1,
                visibleItemsCount: allItems.length,
                totalItemsCount
              }))
            ),
            import_react55.default.createElement(
              GridNavigationProvider,
              { keyboardNavigation: !!enableKeyboardNavigation, pageSize: GRID_NAVIGATION_PAGE_SIZE, getTable: () => tableRefObject.current },
              import_react55.default.createElement(
                "table",
                Object.assign({}, performanceMarkAttributes, { ref: tableRef, className: clsx_m_default(styles_css_default13.table, resizableColumns && styles_css_default13["table-layout-fixed"], contentDensity === "compact" && getVisualContextClassname("compact-table")) }, getTableRoleProps({
                  tableRole,
                  totalItemsCount,
                  totalColumnsCount,
                  ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel,
                  ariaLabelledby
                })),
                import_react55.default.createElement(thead_default, Object.assign({ ref: theadRef, hidden: stickyHeader, onFocusedComponentChange: (focusId) => {
                  var _a2;
                  return (_a2 = stickyHeaderRef.current) === null || _a2 === void 0 ? void 0 : _a2.setFocus(focusId);
                } }, theadProps)),
                import_react55.default.createElement("tbody", null, loading || allItems.length === 0 ? import_react55.default.createElement(
                  "tr",
                  null,
                  import_react55.default.createElement(NoDataCell, { totalColumnsCount, hasFooter, loading, loadingText, empty, tableRef: tableRefObject, containerRef: wrapperMeasureRefObject })
                ) : allRows.map((row, rowIndex) => {
                  const isFirstRow = rowIndex === 0;
                  const isLastRow = rowIndex === allRows.length - 1;
                  const expandableProps = row.type === "data" ? getExpandableItemProps(row.item) : void 0;
                  const rowRoleProps = getTableRowRoleProps(Object.assign({
                    tableRole,
                    firstIndex,
                    rowIndex,
                    level: row.type === "loader" ? row.level : void 0
                  }, expandableProps));
                  const getTableItemKey = (item) => getItemKey(trackBy, item, rowIndex);
                  const sharedCellProps = {
                    isFirstRow,
                    isLastRow,
                    isSelected: hasSelection && isRowSelected(row),
                    isPrevSelected: hasSelection && !isFirstRow && isRowSelected(allRows[rowIndex - 1]),
                    isNextSelected: hasSelection && !isLastRow && isRowSelected(allRows[rowIndex + 1]),
                    isEvenRow: rowIndex % 2 === 0,
                    stripedRows,
                    hasSelection,
                    hasFooter,
                    stickyState,
                    tableRole
                  };
                  if (row.type === "data") {
                    const rowId = `${getTableItemKey(row.item)}`;
                    return import_react55.default.createElement(
                      "tr",
                      Object.assign({ key: rowId, className: clsx_m_default(styles_css_default13.row, sharedCellProps.isSelected && styles_css_default13["row-selected"]), onFocus: ({ currentTarget }) => {
                        var _a2;
                        if (!currentTarget.contains(getMouseDownTarget())) {
                          (_a2 = stickyHeaderRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollToRow(currentTarget);
                        }
                      } }, focusMarkers.item, { onClick: onRowClickHandler && onRowClickHandler.bind(null, rowIndex, row.item), onContextMenu: onRowContextMenuHandler && onRowContextMenuHandler.bind(null, rowIndex, row.item) }, rowRoleProps),
                      getItemSelectionProps && import_react55.default.createElement(TableBodySelectionCell, Object.assign({}, sharedCellProps, { columnId: selectionColumnId, selectionControlProps: Object.assign(Object.assign({}, getItemSelectionProps(row.item)), { onFocusDown: moveFocusDown, onFocusUp: moveFocusUp, rowIndex, itemKey: rowId }), verticalAlign: cellVerticalAlign })),
                      visibleColumnDefinitions.map((column, colIndex) => {
                        var _a2, _b2;
                        const colId = `${getColumnKey(column, colIndex)}`;
                        const cellId = { row: rowId, col: colId };
                        const isEditing = cellEditing.checkEditing(cellId);
                        const successfulEdit = cellEditing.checkLastSuccessfulEdit(cellId);
                        const isEditable = !!column.editConfig && !cellEditing.isLoading;
                        const cellExpandableProps = isExpandable && colIndex === 0 ? expandableProps : void 0;
                        const analyticsMetadata2 = {
                          component: {
                            innerContext: {
                              position: `${rowIndex + 1},${colIndex + 1}`,
                              columnId: column.id ? `${column.id}` : "",
                              columnLabel: {
                                selector: `table thead tr th:nth-child(${colIndex + (selectionType ? 2 : 1)})`,
                                root: "component"
                              },
                              item: rowId
                            }
                          }
                        };
                        return import_react55.default.createElement(TableBodyCell, Object.assign({ key: colId }, sharedCellProps, { resizableStyle: {
                          width: column.width,
                          minWidth: column.minWidth,
                          maxWidth: column.maxWidth
                        }, ariaLabels, column, item: row.item, wrapLines, isEditable, isEditing, isRowHeader: column.isRowHeader, successfulEdit, resizableColumns, onEditStart: () => cellEditing.startEdit(cellId), onEditEnd: (editCancelled) => cellEditing.completeEdit(cellId, editCancelled), submitEdit: cellEditing.submitEdit, columnId: (_a2 = column.id) !== null && _a2 !== void 0 ? _a2 : colIndex, colIndex: colIndex + colIndexOffset, verticalAlign: (_b2 = column.verticalAlign) !== null && _b2 !== void 0 ? _b2 : cellVerticalAlign }, cellExpandableProps, getAnalyticsMetadataAttribute(analyticsMetadata2)));
                      })
                    );
                  }
                  const loaderContent = getLoaderContent({
                    item: row.item,
                    loadingStatus: row.status,
                    renderLoaderPending,
                    renderLoaderLoading,
                    renderLoaderError,
                    renderLoaderEmpty
                  });
                  return loaderContent && import_react55.default.createElement(
                    "tr",
                    Object.assign({ key: (row.item ? getTableItemKey(row.item) : "root-" + rowIndex) + "-" + row.from, className: styles_css_default13.row }, rowRoleProps),
                    getItemSelectionProps && import_react55.default.createElement(TableBodySelectionCell, Object.assign({}, sharedCellProps, { columnId: selectionColumnId, verticalAlign: cellVerticalAlign })),
                    visibleColumnDefinitions.map((column, colIndex) => {
                      var _a2;
                      return import_react55.default.createElement(TableLoaderCell, Object.assign({ key: getColumnKey(column, colIndex) }, sharedCellProps, { wrapLines: false, columnId: (_a2 = column.id) !== null && _a2 !== void 0 ? _a2 : colIndex, colIndex: colIndex + colIndexOffset, isRowHeader: colIndex === 0, level: row.level, item: row.item, trackBy }), loaderContent);
                    })
                  );
                }))
              )
            ),
            resizableColumns && import_react55.default.createElement(ResizeTracker, null)
          ),
          import_react55.default.createElement(sticky_scrollbar_default, { ref: scrollbarRef, wrapperRef: wrapperRefObject, tableRef: tableRefObject, onScroll: handleScroll, hasStickyColumns })
        )
      )
    )
  );
});
var internal_default10 = InternalTable;

// ../node_modules/@cloudscape-design/components/text-filter/internal.js
var import_react58 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/text-filter/search-results.js
var import_react56 = __toESM(require_react());

// ../node_modules/@cloudscape-design/components/text-filter/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/text-filter/styles.scoped.css";
var styles_css_default24 = {
  "root": "awsui_root_1sdq3_wn0pm_145",
  "input": "awsui_input_1sdq3_wn0pm_180",
  "results": "awsui_results_1sdq3_wn0pm_184"
};

// ../node_modules/@cloudscape-design/components/text-filter/search-results.js
var LIVE_REGION_DELAY = 2e3;
var SearchResults = import_react56.default.forwardRef(({ id, renderLiveRegion, children }, ref) => {
  const liveRegionRef = (0, import_react56.useRef)(null);
  (0, import_react56.useImperativeHandle)(ref, () => ({
    reannounce: () => {
      var _a;
      (_a = liveRegionRef.current) === null || _a === void 0 ? void 0 : _a.reannounce();
    }
  }), []);
  return import_react56.default.createElement(
    import_react56.default.Fragment,
    null,
    import_react56.default.createElement("span", { className: styles_css_default24.results, id }, children),
    renderLiveRegion && import_react56.default.createElement(internal_default2, { delay: LIVE_REGION_DELAY, tagName: "span", hidden: true, ref: liveRegionRef }, children)
  );
});

// ../node_modules/@cloudscape-design/components/text-filter/use-debounce-search-result-callback.js
var import_react57 = __toESM(require_react());
var LIVE_REGION_DELAY2 = 2e3;
function useDebounceSearchResultCallback({ searchQuery, countText, loading, announceCallback }) {
  const loadingRef = (0, import_react57.useRef)(loading);
  const debounceLiveAnnouncement = useDebounceCallback(() => {
    if (!countText || loadingRef.current) {
      return;
    }
    announceCallback();
  }, LIVE_REGION_DELAY2);
  (0, import_react57.useEffect)(() => {
    loadingRef.current = loading;
    debounceLiveAnnouncement();
  }, [searchQuery, countText, loading, debounceLiveAnnouncement]);
}

// ../node_modules/@cloudscape-design/components/text-filter/internal.js
var InternalTextFilter = import_react58.default.forwardRef((_a, ref) => {
  var _b;
  var { filteringText, filteringAriaLabel, filteringPlaceholder, filteringClearAriaLabel, controlId, ariaLabelledby, ariaDescribedby, disabled, countText, disableBrowserAutocorrect, onChange, onDelayedChange, loading = false, __internalRootRef } = _a, rest = __rest(_a, ["filteringText", "filteringAriaLabel", "filteringPlaceholder", "filteringClearAriaLabel", "controlId", "ariaLabelledby", "ariaDescribedby", "disabled", "countText", "disableBrowserAutocorrect", "onChange", "onDelayedChange", "loading", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const inputRef = (0, import_react58.useRef)(null);
  const searchResultsRef = (0, import_react58.useRef)(null);
  useForwardFocus(ref, inputRef);
  const searchResultsId = useUniqueId("text-filter-search-results");
  const showResults = filteringText && countText && !disabled;
  const tableComponentContext = useTableComponentsContext();
  if ((_b = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.filterRef) === null || _b === void 0 ? void 0 : _b.current) {
    tableComponentContext.filterRef.current.filterText = filteringText;
  }
  useDebounceSearchResultCallback({
    searchQuery: filteringText,
    countText,
    loading,
    announceCallback: () => {
      var _a2;
      (_a2 = searchResultsRef.current) === null || _a2 === void 0 ? void 0 : _a2.reannounce();
    }
  });
  return import_react58.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default24.root), ref: __internalRootRef }),
    import_react58.default.createElement(internal_default5, { __inheritFormFieldProps: true, disableBrowserAutocorrect, ref: inputRef, className: styles_css_default24.input, type: "search", ariaLabel: filteringAriaLabel, placeholder: filteringPlaceholder, value: filteringText, disabled, controlId, ariaLabelledby, ariaDescribedby: joinStrings(showResults ? searchResultsId : void 0, ariaDescribedby), autoComplete: false, clearAriaLabel: filteringClearAriaLabel, onChange: (event) => fireNonCancelableEvent(onChange, { filteringText: event.detail.value }), __onDelayedInput: (event) => fireNonCancelableEvent(onDelayedChange, { filteringText: event.detail.value }) }),
    showResults ? import_react58.default.createElement(SearchResults, { renderLiveRegion: !loading, id: searchResultsId, ref: searchResultsRef }, countText) : null
  );
});
var internal_default11 = InternalTextFilter;

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/empty-state.js
var import_react59 = __toESM(require_react());
function EmptyState({ title, subtitle, action }) {
  return import_react59.default.createElement(
    InternalBox,
    { textAlign: "center", color: "inherit" },
    import_react59.default.createElement(InternalBox, { variant: "strong", textAlign: "center", color: "inherit" }, title),
    import_react59.default.createElement(InternalBox, { variant: "p", padding: { bottom: "s" }, color: "inherit" }, subtitle),
    action
  );
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/styles.scoped.css";
var styles_css_default25 = {
  "modal-actions": "awsui_modal-actions_12hyz_1yyk9_181",
  "submit-button": "awsui_submit-button_12hyz_1yyk9_185",
  "last-updated-caption": "awsui_last-updated-caption_12hyz_1yyk9_189"
};

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/basic-table.js
function getSharedI18Strings(i18n, i18nStrings) {
  return {
    filteringCounterText: i18n("i18nStrings.filteringCounterText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringCounterText, (format2) => (count) => format2({ count })),
    labelRefresh: i18n("i18nStrings.labelRefresh", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelRefresh),
    labelsPagination: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsPagination,
    noMatchTitle: i18n("i18nStrings.filteringNoMatches", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringNoMatches),
    noMatchSubtitle: i18n("i18nStrings.filteringCantFindMatch", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringCantFindMatch),
    clearFilterButtonText: i18n("i18nStrings.clearFilterButtonText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearFilterButtonText),
    filteringClearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelClearFilter,
    lastUpdatedText: i18n("i18nStrings.modalLastUpdatedText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalLastUpdatedText)
  };
}
function BasicS3Table({ forwardFocusRef, columnDefinitions, fetchData, trackBy, i18nStrings = {}, isVisualRefresh, visibleColumns, isItemDisabled, onSelect }) {
  var _a;
  const [loading, setLoading] = (0, import_react60.useState)(false);
  const [allItems, setAllItems] = (0, import_react60.useState)([]);
  const [lastUpdated, setLastUpdated] = (0, import_react60.useState)();
  const textFilterRef = (0, import_react60.useRef)(null);
  const onSelectLatest = useStableCallback(onSelect);
  function loadData() {
    setLoading(true);
    return fetchData().then((items2) => {
      setAllItems(items2);
      setLoading(false);
    }).catch(() => {
      setLoading(false);
    });
  }
  function reloadData() {
    return __awaiter(this, void 0, void 0, function* () {
      yield loadData();
      setLastUpdated(/* @__PURE__ */ new Date());
    });
  }
  (0, import_react60.useEffect)(() => {
    loadData();
  }, []);
  useForwardFocus(forwardFocusRef, textFilterRef);
  const { items, filteredItemsCount, collectionProps, filterProps, paginationProps, actions } = useCollection(allItems, {
    selection: { trackBy },
    filtering: {
      empty: i18nStrings.emptyText,
      noMatch: import_react60.default.createElement(EmptyState, { title: i18nStrings.noMatchTitle, subtitle: i18nStrings.noMatchSubtitle, action: import_react60.default.createElement(InternalButton, { onClick: () => actions.setFiltering("") }, i18nStrings.clearFilterButtonText) })
    },
    pagination: {},
    sorting: {}
  });
  const selectedItem = (_a = collectionProps.selectedItems) === null || _a === void 0 ? void 0 : _a[0];
  (0, import_react60.useEffect)(() => {
    onSelectLatest(selectedItem);
  }, [selectedItem, onSelectLatest]);
  return import_react60.default.createElement(internal_default10, Object.assign({ variant: isVisualRefresh ? "borderless" : "container" }, collectionProps, { header: import_react60.default.createElement(InternalHeader, { variant: isVisualRefresh ? "h3" : "h2", headingTagOverride: "h3", actions: import_react60.default.createElement(InternalHeaderActions, { reloadData, i18nStrings, lastUpdated }), counter: selectedItem ? `(1/${allItems.length})` : `(${allItems.length})` }, i18nStrings.header), trackBy, filter: import_react60.default.createElement(internal_default11, Object.assign({}, filterProps, { ref: textFilterRef, filteringAriaLabel: i18nStrings.filteringAriaLabel, filteringClearAriaLabel: i18nStrings.filteringClearAriaLabel, filteringPlaceholder: i18nStrings.filteringPlaceholder, countText: i18nStrings.filteringCounterText ? i18nStrings.filteringCounterText(filteredItemsCount) : "" })), pagination: import_react60.default.createElement(InternalPagination, Object.assign({}, paginationProps, { ariaLabels: i18nStrings.labelsPagination })), selectionType: "single", ariaLabels: i18nStrings.selectionLabels, loading, loadingText: i18nStrings.loadingText, items, visibleColumns, isItemDisabled, columnDefinitions, enableKeyboardNavigation: true }));
}
function InternalHeaderActions({ i18nStrings, reloadData, lastUpdated }) {
  function getLastUpdated() {
    if (!lastUpdated || !i18nStrings.lastUpdatedText) {
      return null;
    }
    const formattedDate = formatDateLocalized({
      date: lastUpdated.toString(),
      isDateOnly: false,
      isMonthOnly: false
    });
    return import_react60.default.createElement(
      "div",
      { className: styles_css_default25["last-updated-caption"] },
      i18nStrings.lastUpdatedText,
      import_react60.default.createElement("br", null),
      formattedDate,
      import_react60.default.createElement(internal_default2, { tagName: "span", sources: [i18nStrings.lastUpdatedText, formattedDate] })
    );
  }
  return import_react60.default.createElement(
    internal_default8,
    { size: "s", direction: "horizontal", alignItems: "center" },
    getLastUpdated(),
    import_react60.default.createElement(InternalButton, { iconName: "refresh", ariaLabel: i18nStrings.labelRefresh, onClick: reloadData })
  );
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/column-formats.js
var BYTES_BASE = 1024;
var BYTES_DECIMALS = 2;
var BYTES_SIZES = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
function formatDefault(value) {
  return value ? value : "-";
}
function formatSize(bytes) {
  if (bytes === void 0) {
    return "-";
  }
  if (bytes === 0) {
    return `0 ${BYTES_SIZES[0]}`;
  }
  const i = Math.floor(Math.log(bytes) / Math.log(BYTES_BASE));
  return parseFloat((bytes / Math.pow(BYTES_BASE, i)).toFixed(BYTES_DECIMALS)) + " " + BYTES_SIZES[i];
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/table-utils.js
function includes(array, item) {
  return !!array && array.indexOf(item) > -1;
}
var compareDates2 = (itemA, itemB) => {
  const timeA = itemA ? new Date(itemA).getTime() : 0;
  const timeB = itemB ? new Date(itemB).getTime() : 0;
  return timeA - timeB;
};
function getColumnAriaLabel(i18n, i18nStrings, columnName = "") {
  return ({ sorted, descending }) => {
    var _a, _b, _c, _d, _e, _f;
    if (!sorted) {
      return (_b = i18n("i18nStrings.labelNotSorted", (_a = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelNotSorted) === null || _a === void 0 ? void 0 : _a.call(i18nStrings, columnName), (format2) => format2({ columnName }))) !== null && _b !== void 0 ? _b : "";
    }
    if (descending) {
      return (_d = i18n("i18nStrings.labelSortedDescending", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelSortedDescending) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, columnName), (format2) => format2({ columnName }))) !== null && _d !== void 0 ? _d : "";
    }
    return (_f = i18n("i18nStrings.labelSortedAscending", (_e = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelSortedAscending) === null || _e === void 0 ? void 0 : _e.call(i18nStrings, columnName), (format2) => format2({ columnName }))) !== null && _f !== void 0 ? _f : "";
  };
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/buckets-table.js
function BucketsTable({ forwardFocusRef, i18nStrings, isVisualRefresh, isItemDisabled, selectableItemsTypes, fetchData, visibleColumns, onDrilldown, onSelect }) {
  var _a, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react61.default.createElement(BasicS3Table, { forwardFocusRef, trackBy: "Name", fetchData, visibleColumns, isItemDisabled: isItemDisabled || (() => !includes(selectableItemsTypes, "buckets")), i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionBuckets", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBuckets), loadingText: i18n("i18nStrings.selectionBucketsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsLoading), filteringAriaLabel: (_a = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format2) => (itemsType) => format2({ itemsType }))) === null || _a === void 0 ? void 0 : _a((_b = i18n("i18nStrings.selectionBuckets", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBuckets)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionBucketsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionBucketsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsBucketsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsBucketsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format2) => (data, item) => {
    var _a2;
    return format2({ item__Name: (_a2 = item.Name) !== null && _a2 !== void 0 ? _a2 : "" });
  }) }) }), isVisualRefresh, columnDefinitions: [
    {
      id: "Name",
      header: i18n("i18nStrings.columnBucketName", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketName),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketName", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketName)),
      sortingField: "Name",
      cell: (item) => {
        const isClickable = includes(selectableItemsTypes, "objects") || includes(selectableItemsTypes, "versions");
        return isClickable ? import_react61.default.createElement(internal_default4, { onFollow: () => item.Name && onDrilldown(item.Name), variant: "link" }, item.Name) : item.Name;
      },
      minWidth: "250px"
    },
    {
      id: "Region",
      header: i18n("i18nStrings.columnBucketRegion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketRegion),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketRegion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketRegion)),
      sortingField: "Region",
      cell: (item) => formatDefault(item.Region),
      minWidth: "150px"
    },
    {
      id: "CreationDate",
      header: i18n("i18nStrings.columnBucketCreationDate", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketCreationDate),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketCreationDate", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketCreationDate)),
      sortingComparator: (a, b) => compareDates2(a.CreationDate, b.CreationDate),
      cell: (item) => formatDefault(item.CreationDate)
    }
  ], onSelect: (item) => {
    var _a2;
    return onSelect((_a2 = item === null || item === void 0 ? void 0 : item.Name) !== null && _a2 !== void 0 ? _a2 : "");
  } });
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/objects-table.js
var import_react62 = __toESM(require_react());
function ObjectsTable({ forwardFocusRef, pathSegments, i18nStrings, isVisualRefresh, isItemDisabled, selectableItemsTypes, fetchData, visibleColumns, onDrilldown, onSelect }) {
  var _a, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react62.default.createElement(BasicS3Table, {
    // remount fresh component every we change the path to reset the inner state (e.g. selection/filtering)
    key: pathSegments.join("/"),
    forwardFocusRef,
    trackBy: "Key",
    fetchData: () => {
      const [bucketName, ...rest] = pathSegments;
      return fetchData(bucketName, joinObjectPath(rest));
    },
    i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionObjects", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjects), loadingText: i18n("i18nStrings.selectionObjectsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsLoading), filteringAriaLabel: (_a = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format2) => (itemsType) => format2({ itemsType }))) === null || _a === void 0 ? void 0 : _a((_b = i18n("i18nStrings.selectionObjects", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjects)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionObjectsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionObjectsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsObjectsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsObjectsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format2) => (data, item) => {
      var _a2;
      return format2({ item__Key: (_a2 = item.Key) !== null && _a2 !== void 0 ? _a2 : "" });
    }) }) }),
    isVisualRefresh,
    visibleColumns,
    isItemDisabled: isItemDisabled || (() => !includes(selectableItemsTypes, "objects")),
    columnDefinitions: [
      {
        id: "Key",
        header: i18n("i18nStrings.columnObjectKey", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectKey),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectKey", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectKey)),
        sortingField: "Key",
        cell: (item) => {
          const isClickable = item.IsFolder || includes(selectableItemsTypes, "versions");
          const iconProps = item.IsFolder ? { name: "folder", ariaLabel: i18n("i18nStrings.labelIconFolder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelIconFolder) } : { name: "file", ariaLabel: i18n("i18nStrings.labelIconObject", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelIconObject) };
          return import_react62.default.createElement(
            import_react62.default.Fragment,
            null,
            import_react62.default.createElement(internal_default, Object.assign({}, iconProps)),
            " ",
            isClickable ? import_react62.default.createElement(internal_default4, { onFollow: () => item.Key && onDrilldown(item), variant: "link" }, item.Key) : item.Key
          );
        },
        minWidth: "250px"
      },
      {
        id: "LastModified",
        header: i18n("i18nStrings.columnObjectLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectLastModified),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectLastModified)),
        sortingComparator: (a, b) => compareDates2(a.LastModified, b.LastModified),
        cell: (item) => formatDefault(item.LastModified)
      },
      {
        id: "Size",
        header: i18n("i18nStrings.columnObjectSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectSize),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectSize)),
        sortingField: "Size",
        cell: (item) => formatSize(item.Size)
      }
    ],
    onSelect: (item) => {
      var _a2;
      return onSelect((_a2 = item === null || item === void 0 ? void 0 : item.Key) !== null && _a2 !== void 0 ? _a2 : "");
    }
  });
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/versions-table.js
var import_react63 = __toESM(require_react());
function VersionsTable({ forwardFocusRef, pathSegments, i18nStrings, isVisualRefresh, isItemDisabled, fetchData, visibleColumns, onSelect }) {
  var _a, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react63.default.createElement(BasicS3Table, { forwardFocusRef, trackBy: "VersionId", fetchData: () => {
    const [bucketName, ...rest] = pathSegments;
    return fetchData(bucketName, joinObjectPath(rest));
  }, i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionVersions", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersions), loadingText: i18n("i18nStrings.selectionVersionsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsLoading), filteringAriaLabel: (_a = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format2) => (itemsType) => format2({ itemsType }))) === null || _a === void 0 ? void 0 : _a((_b = i18n("i18nStrings.selectionVersions", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersions)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionVersionsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionVersionsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsVersionsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsVersionsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format2) => (data, item) => {
    var _a2;
    return format2({ item__VersionId: (_a2 = item.VersionId) !== null && _a2 !== void 0 ? _a2 : "" });
  }) }) }), isVisualRefresh, visibleColumns, isItemDisabled, columnDefinitions: [
    {
      id: "ID",
      header: i18n("i18nStrings.columnVersionID", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionID),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionID", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionID)),
      sortingField: "VersionId",
      cell: (item) => item.VersionId,
      minWidth: "250px"
    },
    {
      id: "LastModified",
      header: i18n("i18nStrings.columnVersionLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionLastModified),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionLastModified)),
      sortingComparator: (a, b) => compareDates2(a.LastModified, b.LastModified),
      cell: (item) => formatDefault(item.LastModified)
    },
    {
      id: "Size",
      header: i18n("i18nStrings.columnVersionSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionSize),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionSize)),
      sortingField: "Size",
      cell: (item) => formatSize(item.Size)
    }
  ], onSelect: (item) => {
    var _a2;
    return onSelect((_a2 = item === null || item === void 0 ? void 0 : item.VersionId) !== null && _a2 !== void 0 ? _a2 : "");
  } });
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/test-classes/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/s3-resource-selector/test-classes/styles.scoped.css";
var styles_css_default26 = {
  "modal-root": "awsui_modal-root_rkh1e_1yimk_5"
};

// ../node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/index.js
function assertNever(_value) {
  return null;
}
var initialBrowseState = {
  selectedItem: null,
  currentView: "buckets",
  breadcrumbs: []
};
function s3BrowseReducer(state, action) {
  switch (action.type) {
    case "browse-buckets":
      return initialBrowseState;
    case "browse-objects":
      return {
        selectedItem: null,
        currentView: "objects",
        breadcrumbs: action.breadcrumbs
      };
    case "browse-versions":
      return {
        selectedItem: null,
        currentView: "versions",
        breadcrumbs: action.breadcrumbs
      };
    case "select-item":
      return Object.assign(Object.assign({}, state), { selectedItem: action.item });
    default:
      assertNever(action);
  }
  return state;
}
function createResourceInfo({ currentView, breadcrumbs, selectedItem }) {
  const prefix = "s3://";
  if (currentView === "versions") {
    return { uri: prefix + joinObjectPath(breadcrumbs), versionId: selectedItem !== null && selectedItem !== void 0 ? selectedItem : void 0 };
  }
  return { uri: prefix + joinObjectPath([...breadcrumbs, selectedItem]) };
}
function S3Modal({ i18nStrings, alert, selectableItemsTypes, fetchBuckets, bucketsVisibleColumns, bucketsIsItemDisabled, fetchObjects, objectsVisibleColumns, objectsIsItemDisabled, fetchVersions, versionsVisibleColumns, versionsIsItemDisabled, getModalRoot, removeModalRoot, onSubmit, onDismiss }) {
  var _a;
  const [{ currentView, breadcrumbs, selectedItem }, dispatch] = (0, import_react64.useReducer)(s3BrowseReducer, initialBrowseState);
  const forwardFocusRef = (0, import_react64.useRef)(null);
  const i18n = useInternalI18n("s3-resource-selector");
  const isVisualRefresh = useVisualRefresh();
  useEffectOnUpdate(() => {
    var _a2;
    (_a2 = forwardFocusRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  }, [breadcrumbs]);
  return import_react64.default.createElement(
    "div",
    null,
    import_react64.default.createElement(
      InternalModal,
      { className: styles_css_default26["modal-root"], visible: true, size: "max", getModalRoot, removeModalRoot, closeAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelModalDismiss, onDismiss, header: i18n("i18nStrings.modalTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalTitle), footer: import_react64.default.createElement(
        internal_default8,
        { className: styles_css_default25["modal-actions"], size: "xs", direction: "horizontal" },
        import_react64.default.createElement(InternalButton, { variant: "link", formAction: "none", onClick: onDismiss }, i18n("i18nStrings.modalCancelButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalCancelButton)),
        import_react64.default.createElement(InternalButton, { variant: "primary", className: styles_css_default25["submit-button"], disabled: !selectedItem, formAction: "none", onClick: () => onSubmit(createResourceInfo({ currentView, breadcrumbs, selectedItem })) }, i18n("i18nStrings.modalSubmitButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalSubmitButton))
      ) },
      import_react64.default.createElement(
        internal_default8,
        { size: isVisualRefresh ? "xxs" : "xs" },
        import_react64.default.createElement(BreadcrumbGroupImplementation, { ariaLabel: i18n("i18nStrings.labelBreadcrumbs", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelBreadcrumbs), expandAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelExpandBreadcrumbs, onFollow: (event) => {
          event.preventDefault();
          event.detail.item.meta.onClick();
        }, items: [
          {
            text: (_a = i18n("i18nStrings.modalBreadcrumbRootItem", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalBreadcrumbRootItem)) !== null && _a !== void 0 ? _a : "",
            href: "",
            meta: { onClick: () => dispatch({ type: "browse-buckets" }) }
          },
          ...breadcrumbs.map((segment, index) => ({
            text: segment,
            href: "",
            meta: {
              onClick: () => dispatch({
                type: "browse-objects",
                breadcrumbs: breadcrumbs.slice(0, index + 1)
              })
            }
          }))
        ] }),
        alert,
        currentView === "buckets" ? import_react64.default.createElement(BucketsTable, { forwardFocusRef, fetchData: fetchBuckets, visibleColumns: bucketsVisibleColumns, isItemDisabled: bucketsIsItemDisabled, selectableItemsTypes, i18nStrings, isVisualRefresh, onDrilldown: (path) => dispatch({
          type: "browse-objects",
          breadcrumbs: [path]
        }), onSelect: (item) => dispatch({ type: "select-item", item }) }) : currentView === "objects" ? import_react64.default.createElement(ObjectsTable, { forwardFocusRef, pathSegments: breadcrumbs, fetchData: fetchObjects, visibleColumns: objectsVisibleColumns, isItemDisabled: objectsIsItemDisabled, selectableItemsTypes, i18nStrings, isVisualRefresh, onDrilldown: (item) => {
          dispatch({
            type: item.IsFolder ? "browse-objects" : "browse-versions",
            breadcrumbs: [...breadcrumbs, item.Key]
          });
        }, onSelect: (item) => dispatch({ type: "select-item", item }) }) : currentView === "versions" ? import_react64.default.createElement(VersionsTable, { forwardFocusRef, pathSegments: breadcrumbs, fetchData: fetchVersions, visibleColumns: versionsVisibleColumns, isItemDisabled: versionsIsItemDisabled, i18nStrings, isVisualRefresh, onSelect: (item) => dispatch({ type: "select-item", item }) }) : assertNever(currentView)
      )
    )
  );
}

// ../node_modules/@cloudscape-design/components/s3-resource-selector/styles.css.js
import "/Users/cmgabri/Desktop/osdu-decoupled/frontend-uxpin/node_modules/@cloudscape-design/components/s3-resource-selector/styles.scoped.css";
var styles_css_default27 = {
  "root": "awsui_root_1u0yw_rfo7y_5",
  "alert": "awsui_alert_1u0yw_rfo7y_9"
};

// ../node_modules/@cloudscape-design/components/s3-resource-selector/index.js
var S3ResourceSelector = import_react65.default.forwardRef((_a, ref) => {
  var { i18nStrings, inputPlaceholder, alert, resource, viewHref, invalid, selectableItemsTypes = [], inputAriaDescribedby, bucketsVisibleColumns = ["Name", "CreationDate"], bucketsIsItemDisabled, fetchBuckets, fetchObjects, objectsVisibleColumns = ["Key", "LastModified", "Size"], objectsIsItemDisabled, fetchVersions, versionsVisibleColumns = ["ID", "LastModified", "Size"], versionsIsItemDisabled, onChange, ariaLabel, getModalRoot, removeModalRoot } = _a, rest = __rest(_a, ["i18nStrings", "inputPlaceholder", "alert", "resource", "viewHref", "invalid", "selectableItemsTypes", "inputAriaDescribedby", "bucketsVisibleColumns", "bucketsIsItemDisabled", "fetchBuckets", "fetchObjects", "objectsVisibleColumns", "objectsIsItemDisabled", "fetchVersions", "versionsVisibleColumns", "versionsIsItemDisabled", "onChange", "ariaLabel", "getModalRoot", "removeModalRoot"]);
  checkSafeUrl("S3ResourceSelector", viewHref);
  const { __internalRootRef } = useBaseComponent("S3ResourceSelector");
  const [modalOpen, setModalOpen] = (0, import_react65.useState)(false);
  const inContextRef = (0, import_react65.useRef)(null);
  const modalWasSubmitted = (0, import_react65.useRef)(false);
  useForwardFocus(ref, inContextRef);
  const { ariaLabelledby, ariaDescribedby } = useFormFieldContext(rest);
  (0, import_react65.useEffect)(() => {
    var _a2;
    if (!modalOpen && modalWasSubmitted.current) {
      modalWasSubmitted.current = false;
      (_a2 = inContextRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [modalOpen]);
  const baseProps = getBaseProps(rest);
  const modalProps = {
    alert,
    i18nStrings,
    fetchBuckets,
    selectableItemsTypes,
    bucketsVisibleColumns,
    bucketsIsItemDisabled,
    fetchObjects,
    objectsVisibleColumns,
    objectsIsItemDisabled,
    fetchVersions,
    versionsVisibleColumns,
    versionsIsItemDisabled,
    getModalRoot,
    removeModalRoot,
    onSubmit: (resource2) => {
      fireNonCancelableEvent(onChange, { resource: resource2 });
      setModalOpen(false);
      modalWasSubmitted.current = true;
    },
    onDismiss: () => setModalOpen(false)
  };
  return import_react65.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default27.root, baseProps.className), ref: __internalRootRef, role: "group", "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "aria-label": ariaLabel }),
    import_react65.default.createElement(S3InContext, { ref: inContextRef, selectableItemsTypes, i18nStrings, inputPlaceholder, resource, viewHref, invalid, inputAriaDescribedby, fetchVersions, onBrowse: () => setModalOpen(true), onChange: (resource2, errorText) => fireNonCancelableEvent(onChange, { resource: resource2, errorText }) }),
    !modalOpen && alert && import_react65.default.createElement(InternalBox, { className: styles_css_default27.alert, margin: { top: "s" } }, alert),
    modalOpen && import_react65.default.createElement(S3Modal, Object.assign({}, modalProps))
  );
});
applyDisplayName(S3ResourceSelector, "S3ResourceSelector");
var s3_resource_selector_default = S3ResourceSelector;
export {
  s3_resource_selector_default as default
};
//# sourceMappingURL=@cloudscape-design_components_s3-resource-selector.js.map
