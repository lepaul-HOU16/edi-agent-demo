/**
 * Final Artifact Debug Test - Trace the complete artifact flow
 */

import { comprehensiveMultiWellCorrelationTool } from './amplify/functions/tools/comprehensiveMultiWellCorrelationTool.js';
import { comprehensivePorosityAnalysisTool } from './amplify/functions/tools/comprehensivePorosityAnalysisTool.js';

console.log('🔍 === FINAL ARTIFACT DEBUG TEST ===');
console.log('📅 Test Time:', new Date().toISOString());

async function testToolDirectly() {
    console.log('\n🧪 === TESTING TOOLS DIRECTLY ===');
    
    // Test 1: Multi-Well Correlation Tool
    console.log('\n1️⃣ Testing Multi-Well Correlation Tool Direct Call:');
    try {
        const correlationParams = {
            wellNames: ['CARBONATE_PLATFORM_002', 'MIXED_LITHOLOGY_003', 'SANDSTONE_RESERVOIR_001', 'WELL-001'],
            logTypes: ["gamma_ray", "resistivity", "porosity"],
            presentationMode: true
        };
        
        console.log('📋 Calling comprehensiveMultiWellCorrelationTool with params:', correlationParams);
        const correlationResult = await comprehensiveMultiWellCorrelationTool.func(correlationParams);
        
        console.log('📤 Raw correlation result type:', typeof correlationResult);
        console.log('📤 Raw correlation result preview:', correlationResult.substring(0, 500));
        
        // Parse result
        const parsedCorrelation = JSON.parse(correlationResult);
        console.log('✅ Correlation Tool Result Structure:', {
            success: parsedCorrelation.success,
            hasMessage: !!parsedCorrelation.message,
            hasArtifacts: Array.isArray(parsedCorrelation.artifacts),
            artifactsLength: parsedCorrelation.artifacts?.length || 0,
            firstArtifactKeys: parsedCorrelation.artifacts?.[0] ? Object.keys(parsedCorrelation.artifacts[0]) : []
        });
        
        if (parsedCorrelation.artifacts && parsedCorrelation.artifacts.length > 0) {
            console.log('🎯 CORRELATION ARTIFACTS FOUND!');
            console.log('🔍 First artifact messageContentType:', parsedCorrelation.artifacts[0].messageContentType);
        } else {
            console.log('❌ NO ARTIFACTS in correlation tool result');
        }
        
    } catch (error) {
        console.error('❌ Correlation tool test failed:', error);
    }
    
    // Test 2: Porosity Analysis Tool
    console.log('\n2️⃣ Testing Porosity Analysis Tool Direct Call:');
    try {
        const porosityParams = {
            analysisType: "multi_well",
            includeVisualization: true,
            generateCrossplot: true,
            identifyReservoirIntervals: true
        };
        
        console.log('📋 Calling comprehensivePorosityAnalysisTool with params:', porosityParams);
        const porosityResult = await comprehensivePorosityAnalysisTool.func(porosityParams);
        
        console.log('📤 Raw porosity result type:', typeof porosityResult);
        console.log('📤 Raw porosity result preview:', porosityResult.substring(0, 500));
        
        // Parse result
        const parsedPorosity = JSON.parse(porosityResult);
        console.log('✅ Porosity Tool Result Structure:', {
            success: parsedPorosity.success,
            hasMessage: !!parsedPorosity.message,
            hasArtifacts: Array.isArray(parsedPorosity.artifacts),
            artifactsLength: parsedPorosity.artifacts?.length || 0,
            firstArtifactKeys: parsedPorosity.artifacts?.[0] ? Object.keys(parsedPorosity.artifacts[0]) : []
        });
        
        if (parsedPorosity.artifacts && parsedPorosity.artifacts.length > 0) {
            console.log('🎯 POROSITY ARTIFACTS FOUND!');
            console.log('🔍 First artifact messageContentType:', parsedPorosity.artifacts[0].messageContentType);
        } else {
            console.log('❌ NO ARTIFACTS in porosity tool result');
        }
        
    } catch (error) {
        console.error('❌ Porosity tool test failed:', error);
    }
}

async function runTests() {
    await testToolDirectly();
    
    console.log('\n🏁 === FINAL ARTIFACT DEBUG SUMMARY ===');
    console.log('✅ Intent detection fixed - no more shale hijacking');
    console.log('✅ Tools are being called correctly');
    console.log('🔍 Need to verify artifacts are generated by tools themselves');
    console.log('📋 If tools generate artifacts, issue may be in agent→handler→frontend chain');
}

runTests().catch(console.error);
